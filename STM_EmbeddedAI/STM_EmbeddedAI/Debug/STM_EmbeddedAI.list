
STM_EmbeddedAI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5a4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       001c8d20  0800b780  0800b780  0001b780  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  081d44a0  081d44a0  001f0d0c  2**0
                  CONTENTS
  4 .ARM          00000008  081d44a0  081d44a0  001e44a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  081d44a8  081d44a8  001f0d0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  081d44a8  081d44a8  001e44a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  081d44ac  081d44ac  001e44ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000d0c  20000000  081d44b0  001f0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00027a08  20000d20  081d51bc  001f0d20  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20028728  081d51bc  001f8728  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  001f0d0c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b5fa  00000000  00000000  001f0d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000349f  00000000  00000000  0020c336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  0020f7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  00210b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035a96  00000000  00000000  00211e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001afdc  00000000  00000000  00247896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013caa8  00000000  00000000  00262872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0039f31a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bac  00000000  00000000  0039f36c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  003a4f18  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  003a4fb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000d20 	.word	0x20000d20
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b74c 	.word	0x0800b74c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000d24 	.word	0x20000d24
 80001fc:	0800b74c 	.word	0x0800b74c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f001 f823 	bl	80015f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f815 	bl	80005da <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 fa6c 	bl	8000a8c <MX_GPIO_Init>
  MX_CRC_Init();  
 80005b4:	f000 f864 	bl	8000680 <MX_CRC_Init>
  MX_FMC_Init();
 80005b8:	f000 fa02 	bl	80009c0 <MX_FMC_Init>
  MX_I2C1_Init();
 80005bc:	f000 f882 	bl	80006c4 <MX_I2C1_Init>
  MX_SAI1_Init();
 80005c0:	f000 f8c0 	bl	8000744 <MX_SAI1_Init>
//  MX_SDMMC1_SD_Init();
  MX_SPI2_Init();
 80005c4:	f000 f926 	bl	8000814 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80005c8:	f000 f962 	bl	8000890 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005cc:	f000 f9ac 	bl	8000928 <MX_USART3_UART_Init>
//  MX_USB_OTG_FS_PCD_Init();
  MX_X_CUBE_AI_Init();
 80005d0:	f006 f842 	bl	8006658 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 80005d4:	f006 f84e 	bl	8006674 <MX_X_CUBE_AI_Process>
 80005d8:	e7fc      	b.n	80005d4 <main+0x30>

080005da <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b096      	sub	sp, #88	; 0x58
 80005de:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	2244      	movs	r2, #68	; 0x44
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f009 ff3f 	bl	800a46c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ee:	463b      	mov	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80005fc:	2000      	movs	r0, #0
 80005fe:	f001 fd51 	bl	80020a4 <HAL_PWREx_ControlVoltageScaling>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000608:	f000 fc5e 	bl	8000ec8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 800060c:	2330      	movs	r3, #48	; 0x30
 800060e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000614:	2301      	movs	r3, #1
 8000616:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800061c:	2360      	movs	r3, #96	; 0x60
 800061e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000620:	2302      	movs	r3, #2
 8000622:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000624:	2301      	movs	r3, #1
 8000626:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000628:	2301      	movs	r3, #1
 800062a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800062c:	233c      	movs	r3, #60	; 0x3c
 800062e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000630:	2305      	movs	r3, #5
 8000632:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4618      	mov	r0, r3
 8000642:	f001 fde3 	bl	800220c <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800064c:	f000 fc3c 	bl	8000ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2303      	movs	r3, #3
 8000656:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	2105      	movs	r1, #5
 8000668:	4618      	mov	r0, r3
 800066a:	f002 f9e9 	bl	8002a40 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000674:	f000 fc28 	bl	8000ec8 <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3758      	adds	r7, #88	; 0x58
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000684:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <MX_CRC_Init+0x3c>)
 8000686:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <MX_CRC_Init+0x40>)
 8000688:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_CRC_Init+0x3c>)
 800068c:	2200      	movs	r2, #0
 800068e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <MX_CRC_Init+0x3c>)
 8000692:	2200      	movs	r2, #0
 8000694:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_CRC_Init+0x3c>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <MX_CRC_Init+0x3c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_CRC_Init+0x3c>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_CRC_Init+0x3c>)
 80006aa:	f001 f921 	bl	80018f0 <HAL_CRC_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80006b4:	f000 fc08 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000d3c 	.word	0x20000d3c
 80006c0:	40023000 	.word	0x40023000

080006c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <MX_I2C1_Init+0x74>)
 80006ca:	4a1c      	ldr	r2, [pc, #112]	; (800073c <MX_I2C1_Init+0x78>)
 80006cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80006ce:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <MX_I2C1_Init+0x74>)
 80006d0:	4a1b      	ldr	r2, [pc, #108]	; (8000740 <MX_I2C1_Init+0x7c>)
 80006d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006d4:	4b18      	ldr	r3, [pc, #96]	; (8000738 <MX_I2C1_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MX_I2C1_Init+0x74>)
 80006dc:	2201      	movs	r2, #1
 80006de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_I2C1_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_I2C1_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_I2C1_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_I2C1_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_I2C1_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006fe:	480e      	ldr	r0, [pc, #56]	; (8000738 <MX_I2C1_Init+0x74>)
 8000700:	f001 fb8a 	bl	8001e18 <HAL_I2C_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800070a:	f000 fbdd 	bl	8000ec8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800070e:	2100      	movs	r1, #0
 8000710:	4809      	ldr	r0, [pc, #36]	; (8000738 <MX_I2C1_Init+0x74>)
 8000712:	f001 fc10 	bl	8001f36 <HAL_I2CEx_ConfigAnalogFilter>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800071c:	f000 fbd4 	bl	8000ec8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000720:	2100      	movs	r1, #0
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_I2C1_Init+0x74>)
 8000724:	f001 fc52 	bl	8001fcc <HAL_I2CEx_ConfigDigitalFilter>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800072e:	f000 fbcb 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000d60 	.word	0x20000d60
 800073c:	40005400 	.word	0x40005400
 8000740:	307075b1 	.word	0x307075b1

08000744 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000748:	4b2f      	ldr	r3, [pc, #188]	; (8000808 <MX_SAI1_Init+0xc4>)
 800074a:	4a30      	ldr	r2, [pc, #192]	; (800080c <MX_SAI1_Init+0xc8>)
 800074c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800074e:	4b2e      	ldr	r3, [pc, #184]	; (8000808 <MX_SAI1_Init+0xc4>)
 8000750:	2200      	movs	r2, #0
 8000752:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000754:	4b2c      	ldr	r3, [pc, #176]	; (8000808 <MX_SAI1_Init+0xc4>)
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800075a:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <MX_SAI1_Init+0xc4>)
 800075c:	2240      	movs	r2, #64	; 0x40
 800075e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000760:	4b29      	ldr	r3, [pc, #164]	; (8000808 <MX_SAI1_Init+0xc4>)
 8000762:	2200      	movs	r2, #0
 8000764:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000766:	4b28      	ldr	r3, [pc, #160]	; (8000808 <MX_SAI1_Init+0xc4>)
 8000768:	2200      	movs	r2, #0
 800076a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800076c:	4b26      	ldr	r3, [pc, #152]	; (8000808 <MX_SAI1_Init+0xc4>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000772:	4b25      	ldr	r3, [pc, #148]	; (8000808 <MX_SAI1_Init+0xc4>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000778:	4b23      	ldr	r3, [pc, #140]	; (8000808 <MX_SAI1_Init+0xc4>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 800077e:	4b22      	ldr	r3, [pc, #136]	; (8000808 <MX_SAI1_Init+0xc4>)
 8000780:	2200      	movs	r2, #0
 8000782:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000784:	4b20      	ldr	r3, [pc, #128]	; (8000808 <MX_SAI1_Init+0xc4>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800078a:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <MX_SAI1_Init+0xc4>)
 800078c:	4a20      	ldr	r2, [pc, #128]	; (8000810 <MX_SAI1_Init+0xcc>)
 800078e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000790:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <MX_SAI1_Init+0xc4>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <MX_SAI1_Init+0xc4>)
 8000798:	2200      	movs	r2, #0
 800079a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800079c:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_SAI1_Init+0xc4>)
 800079e:	2200      	movs	r2, #0
 80007a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80007a2:	4b19      	ldr	r3, [pc, #100]	; (8000808 <MX_SAI1_Init+0xc4>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_SAI1_Init+0xc4>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_SAI1_Init+0xc4>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_SAI1_Init+0xc4>)
 80007b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_SAI1_Init+0xc4>)
 80007c0:	2208      	movs	r2, #8
 80007c2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80007c4:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_SAI1_Init+0xc4>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_SAI1_Init+0xc4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <MX_SAI1_Init+0xc4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_SAI1_Init+0xc4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_SAI1_Init+0xc4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_SAI1_Init+0xc4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <MX_SAI1_Init+0xc4>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_SAI1_Init+0xc4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_SAI1_Init+0xc4>)
 80007f6:	f004 f987 	bl	8004b08 <HAL_SAI_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8000800:	f000 fb62 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000db4 	.word	0x20000db4
 800080c:	40015404 	.word	0x40015404
 8000810:	0002ee00 	.word	0x0002ee00

08000814 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_SPI2_Init+0x74>)
 800081a:	4a1c      	ldr	r2, [pc, #112]	; (800088c <MX_SPI2_Init+0x78>)
 800081c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_SPI2_Init+0x74>)
 8000820:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000824:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_SPI2_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_SPI2_Init+0x74>)
 800082e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000832:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_SPI2_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_SPI2_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_SPI2_Init+0x74>)
 8000842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000846:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_SPI2_Init+0x74>)
 800084a:	2208      	movs	r2, #8
 800084c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_SPI2_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_SPI2_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_SPI2_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_SPI2_Init+0x74>)
 8000862:	2207      	movs	r2, #7
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_SPI2_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_SPI2_Init+0x74>)
 800086e:	2208      	movs	r2, #8
 8000870:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_SPI2_Init+0x74>)
 8000874:	f004 fb60 	bl	8004f38 <HAL_SPI_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800087e:	f000 fb23 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000e48 	.word	0x20000e48
 800088c:	40003800 	.word	0x40003800

08000890 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000894:	4b22      	ldr	r3, [pc, #136]	; (8000920 <MX_USART2_UART_Init+0x90>)
 8000896:	4a23      	ldr	r2, [pc, #140]	; (8000924 <MX_USART2_UART_Init+0x94>)
 8000898:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089a:	4b21      	ldr	r3, [pc, #132]	; (8000920 <MX_USART2_UART_Init+0x90>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <MX_USART2_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <MX_USART2_UART_Init+0x90>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <MX_USART2_UART_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <MX_USART2_UART_Init+0x90>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <MX_USART2_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_USART2_UART_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <MX_USART2_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_USART2_UART_Init+0x90>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_USART2_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d8:	4811      	ldr	r0, [pc, #68]	; (8000920 <MX_USART2_UART_Init+0x90>)
 80008da:	f004 fc18 	bl	800510e <HAL_UART_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008e4:	f000 faf0 	bl	8000ec8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e8:	2100      	movs	r1, #0
 80008ea:	480d      	ldr	r0, [pc, #52]	; (8000920 <MX_USART2_UART_Init+0x90>)
 80008ec:	f005 fab4 	bl	8005e58 <HAL_UARTEx_SetTxFifoThreshold>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008f6:	f000 fae7 	bl	8000ec8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008fa:	2100      	movs	r1, #0
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <MX_USART2_UART_Init+0x90>)
 80008fe:	f005 fae9 	bl	8005ed4 <HAL_UARTEx_SetRxFifoThreshold>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000908:	f000 fade 	bl	8000ec8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_USART2_UART_Init+0x90>)
 800090e:	f005 fa6a 	bl	8005de6 <HAL_UARTEx_DisableFifoMode>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000918:	f000 fad6 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000eac 	.word	0x20000eac
 8000924:	40004400 	.word	0x40004400

08000928 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800092c:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 800092e:	4a23      	ldr	r2, [pc, #140]	; (80009bc <MX_USART3_UART_Init+0x94>)
 8000930:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000932:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000946:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095e:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000970:	4811      	ldr	r0, [pc, #68]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 8000972:	f004 fbcc 	bl	800510e <HAL_UART_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800097c:	f000 faa4 	bl	8000ec8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000980:	2100      	movs	r1, #0
 8000982:	480d      	ldr	r0, [pc, #52]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 8000984:	f005 fa68 	bl	8005e58 <HAL_UARTEx_SetTxFifoThreshold>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800098e:	f000 fa9b 	bl	8000ec8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000992:	2100      	movs	r1, #0
 8000994:	4808      	ldr	r0, [pc, #32]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 8000996:	f005 fa9d 	bl	8005ed4 <HAL_UARTEx_SetRxFifoThreshold>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009a0:	f000 fa92 	bl	8000ec8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <MX_USART3_UART_Init+0x90>)
 80009a6:	f005 fa1e 	bl	8005de6 <HAL_UARTEx_DisableFifoMode>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009b0:	f000 fa8a 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000f3c 	.word	0x20000f3c
 80009bc:	40004800 	.word	0x40004800

080009c0 <MX_FMC_Init>:

}

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80009c6:	463b      	mov	r3, r7
 80009c8:	2220      	movs	r2, #32
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f009 fd4d 	bl	800a46c <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80009d2:	4b2c      	ldr	r3, [pc, #176]	; (8000a84 <MX_FMC_Init+0xc4>)
 80009d4:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80009d8:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80009da:	4b2a      	ldr	r3, [pc, #168]	; (8000a84 <MX_FMC_Init+0xc4>)
 80009dc:	4a2a      	ldr	r2, [pc, #168]	; (8000a88 <MX_FMC_Init+0xc8>)
 80009de:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80009e0:	4b28      	ldr	r3, [pc, #160]	; (8000a84 <MX_FMC_Init+0xc4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80009e6:	4b27      	ldr	r3, [pc, #156]	; (8000a84 <MX_FMC_Init+0xc4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 80009ec:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <MX_FMC_Init+0xc4>)
 80009ee:	2204      	movs	r2, #4
 80009f0:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80009f2:	4b24      	ldr	r3, [pc, #144]	; (8000a84 <MX_FMC_Init+0xc4>)
 80009f4:	2210      	movs	r2, #16
 80009f6:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 80009f8:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <MX_FMC_Init+0xc4>)
 80009fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009fe:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000a00:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <MX_FMC_Init+0xc4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <MX_FMC_Init+0xc4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <MX_FMC_Init+0xc4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <MX_FMC_Init+0xc4>)
 8000a14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a18:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <MX_FMC_Init+0xc4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_FMC_Init+0xc4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <MX_FMC_Init+0xc4>)
 8000a28:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a2c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_FMC_Init+0xc4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000a34:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <MX_FMC_Init+0xc4>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_FMC_Init+0xc4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000a40:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MX_FMC_Init+0xc4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000a46:	230f      	movs	r3, #15
 8000a48:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000a4a:	230f      	movs	r3, #15
 8000a4c:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000a4e:	23ff      	movs	r3, #255	; 0xff
 8000a50:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000a56:	230f      	movs	r3, #15
 8000a58:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000a5a:	2310      	movs	r3, #16
 8000a5c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000a66:	463b      	mov	r3, r7
 8000a68:	2200      	movs	r2, #0
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_FMC_Init+0xc4>)
 8000a6e:	f004 fb06 	bl	800507e <HAL_SRAM_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 8000a78:	f000 fa26 	bl	8000ec8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a7c:	bf00      	nop
 8000a7e:	3720      	adds	r7, #32
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000fcc 	.word	0x20000fcc
 8000a88:	a0000104 	.word	0xa0000104

08000a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08e      	sub	sp, #56	; 0x38
 8000a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000aa2:	4bb2      	ldr	r3, [pc, #712]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	4ab1      	ldr	r2, [pc, #708]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aae:	4baf      	ldr	r3, [pc, #700]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ab6:	623b      	str	r3, [r7, #32]
 8000ab8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aba:	4bac      	ldr	r3, [pc, #688]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	4aab      	ldr	r2, [pc, #684]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac6:	4ba9      	ldr	r3, [pc, #676]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ace:	61fb      	str	r3, [r7, #28]
 8000ad0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad2:	4ba6      	ldr	r3, [pc, #664]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4aa5      	ldr	r2, [pc, #660]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000ad8:	f043 0310 	orr.w	r3, r3, #16
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4ba3      	ldr	r3, [pc, #652]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0310 	and.w	r3, r3, #16
 8000ae6:	61bb      	str	r3, [r7, #24]
 8000ae8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	4ba0      	ldr	r3, [pc, #640]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a9f      	ldr	r2, [pc, #636]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b9d      	ldr	r3, [pc, #628]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b9a      	ldr	r3, [pc, #616]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a99      	ldr	r2, [pc, #612]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b97      	ldr	r3, [pc, #604]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b1a:	4b94      	ldr	r3, [pc, #592]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	4a93      	ldr	r2, [pc, #588]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b26:	4b91      	ldr	r3, [pc, #580]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000b32:	f001 fb5b 	bl	80021ec <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b36:	4b8d      	ldr	r3, [pc, #564]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	4a8c      	ldr	r2, [pc, #560]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000b3c:	f043 0308 	orr.w	r3, r3, #8
 8000b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b42:	4b8a      	ldr	r3, [pc, #552]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	4b87      	ldr	r3, [pc, #540]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	4a86      	ldr	r2, [pc, #536]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000b54:	f043 0304 	orr.w	r3, r3, #4
 8000b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5a:	4b84      	ldr	r3, [pc, #528]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	f003 0304 	and.w	r3, r3, #4
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b66:	4b81      	ldr	r3, [pc, #516]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	4a80      	ldr	r2, [pc, #512]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000b6c:	f043 0320 	orr.w	r3, r3, #32
 8000b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b72:	4b7e      	ldr	r3, [pc, #504]	; (8000d6c <MX_GPIO_Init+0x2e0>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	f003 0320 	and.w	r3, r3, #32
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f244 0114 	movw	r1, #16404	; 0x4014
 8000b84:	487a      	ldr	r0, [pc, #488]	; (8000d70 <MX_GPIO_Init+0x2e4>)
 8000b86:	f001 f92f 	bl	8001de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b90:	4878      	ldr	r0, [pc, #480]	; (8000d74 <MX_GPIO_Init+0x2e8>)
 8000b92:	f001 f929 	bl	8001de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2140      	movs	r1, #64	; 0x40
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9e:	f001 f923 	bl	8001de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	4874      	ldr	r0, [pc, #464]	; (8000d78 <MX_GPIO_Init+0x2ec>)
 8000ba8:	f001 f91e 	bl	8001de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_IO2_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_IO2_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 8000bac:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	486c      	ldr	r0, [pc, #432]	; (8000d7c <MX_GPIO_Init+0x2f0>)
 8000bca:	f000 ff7b 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 8000bce:	f244 0314 	movw	r3, #16404	; 0x4014
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be4:	4619      	mov	r1, r3
 8000be6:	4862      	ldr	r0, [pc, #392]	; (8000d70 <MX_GPIO_Init+0x2e4>)
 8000be8:	f000 ff6c 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000bec:	2310      	movs	r3, #16
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c04:	4619      	mov	r1, r3
 8000c06:	485c      	ldr	r0, [pc, #368]	; (8000d78 <MX_GPIO_Init+0x2ec>)
 8000c08:	f000 ff5c 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8000c0c:	23b0      	movs	r3, #176	; 0xb0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c1c:	230a      	movs	r3, #10
 8000c1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c24:	4619      	mov	r1, r3
 8000c26:	4855      	ldr	r0, [pc, #340]	; (8000d7c <MX_GPIO_Init+0x2f0>)
 8000c28:	f000 ff4c 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 8000c2c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000c3e:	2305      	movs	r3, #5
 8000c40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c46:	4619      	mov	r1, r3
 8000c48:	484d      	ldr	r0, [pc, #308]	; (8000d80 <MX_GPIO_Init+0x2f4>)
 8000c4a:	f000 ff3b 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	4846      	ldr	r0, [pc, #280]	; (8000d7c <MX_GPIO_Init+0x2f0>)
 8000c64:	f000 ff2e 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 8000c68:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c7a:	230a      	movs	r3, #10
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	483a      	ldr	r0, [pc, #232]	; (8000d70 <MX_GPIO_Init+0x2e4>)
 8000c86:	f000 ff1d 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000c8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4832      	ldr	r0, [pc, #200]	; (8000d70 <MX_GPIO_Init+0x2e4>)
 8000ca8:	f000 ff0c 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8000cac:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000cbe:	2305      	movs	r3, #5
 8000cc0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4829      	ldr	r0, [pc, #164]	; (8000d70 <MX_GPIO_Init+0x2e4>)
 8000cca:	f000 fefb 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000cce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4823      	ldr	r0, [pc, #140]	; (8000d74 <MX_GPIO_Init+0x2e8>)
 8000ce8:	f000 feec 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000cec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf2:	2312      	movs	r3, #18
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d06:	4619      	mov	r1, r3
 8000d08:	481d      	ldr	r0, [pc, #116]	; (8000d80 <MX_GPIO_Init+0x2f4>)
 8000d0a:	f000 fedb 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000d0e:	2340      	movs	r3, #64	; 0x40
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d20:	4619      	mov	r1, r3
 8000d22:	4814      	ldr	r0, [pc, #80]	; (8000d74 <MX_GPIO_Init+0x2e8>)
 8000d24:	f000 fece 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8000d28:	2384      	movs	r3, #132	; 0x84
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d38:	2306      	movs	r3, #6
 8000d3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d40:	4619      	mov	r1, r3
 8000d42:	480c      	ldr	r0, [pc, #48]	; (8000d74 <MX_GPIO_Init+0x2e8>)
 8000d44:	f000 febe 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d54:	2303      	movs	r3, #3
 8000d56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d60:	4619      	mov	r1, r3
 8000d62:	4804      	ldr	r0, [pc, #16]	; (8000d74 <MX_GPIO_Init+0x2e8>)
 8000d64:	f000 feae 	bl	8001ac4 <HAL_GPIO_Init>
 8000d68:	e00c      	b.n	8000d84 <MX_GPIO_Init+0x2f8>
 8000d6a:	bf00      	nop
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	48001c00 	.word	0x48001c00
 8000d74:	48000800 	.word	0x48000800
 8000d78:	48000400 	.word	0x48000400
 8000d7c:	48002000 	.word	0x48002000
 8000d80:	48001800 	.word	0x48001800

  /*Configure GPIO pins : ARD_A2_Pin ARD_A1_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000d84:	2318      	movs	r3, #24
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d88:	230b      	movs	r3, #11
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d94:	4619      	mov	r1, r3
 8000d96:	4849      	ldr	r0, [pc, #292]	; (8000ebc <MX_GPIO_Init+0x430>)
 8000d98:	f000 fe94 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A4_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A0_Pin;
 8000d9c:	2381      	movs	r3, #129	; 0x81
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000da0:	230b      	movs	r3, #11
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dac:	4619      	mov	r1, r3
 8000dae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db2:	f000 fe87 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_PWM_Pin */
  GPIO_InitStruct.Pin = STMOD_PWM_Pin;
 8000db6:	2320      	movs	r3, #32
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(STMOD_PWM_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd4:	f000 fe76 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000dd8:	2340      	movs	r3, #64	; 0x40
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dec:	4619      	mov	r1, r3
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f000 fe67 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000df6:	2302      	movs	r3, #2
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e06:	2302      	movs	r3, #2
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e14:	f000 fe56 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000e18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000e2a:	230b      	movs	r3, #11
 8000e2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e32:	4619      	mov	r1, r3
 8000e34:	4822      	ldr	r0, [pc, #136]	; (8000ec0 <MX_GPIO_Init+0x434>)
 8000e36:	f000 fe45 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000e3a:	2310      	movs	r3, #16
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000e4a:	230a      	movs	r3, #10
 8000e4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e52:	4619      	mov	r1, r3
 8000e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e58:	f000 fe34 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e60:	230b      	movs	r3, #11
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4815      	ldr	r0, [pc, #84]	; (8000ec4 <MX_GPIO_Init+0x438>)
 8000e70:	f000 fe28 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000e74:	2304      	movs	r3, #4
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e88:	4619      	mov	r1, r3
 8000e8a:	480e      	ldr	r0, [pc, #56]	; (8000ec4 <MX_GPIO_Init+0x438>)
 8000e8c:	f000 fe1a 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000ea2:	2306      	movs	r3, #6
 8000ea4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <MX_GPIO_Init+0x438>)
 8000eae:	f000 fe09 	bl	8001ac4 <HAL_GPIO_Init>

}
 8000eb2:	bf00      	nop
 8000eb4:	3738      	adds	r7, #56	; 0x38
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	48000800 	.word	0x48000800
 8000ec0:	48001400 	.word	0x48001400
 8000ec4:	48000400 	.word	0x48000400

08000ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ecc:	b672      	cpsid	i
}
 8000ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <Error_Handler+0x8>
	...

08000ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <HAL_MspInit+0x44>)
 8000edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ede:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <HAL_MspInit+0x44>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <HAL_MspInit+0x44>)
 8000ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <HAL_MspInit+0x44>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <HAL_MspInit+0x44>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efc:	6593      	str	r3, [r2, #88]	; 0x58
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_MspInit+0x44>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40021000 	.word	0x40021000

08000f1c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <HAL_CRC_MspInit+0x38>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d10b      	bne.n	8000f46 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_CRC_MspInit+0x3c>)
 8000f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f32:	4a09      	ldr	r2, [pc, #36]	; (8000f58 <HAL_CRC_MspInit+0x3c>)
 8000f34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f38:	6493      	str	r3, [r2, #72]	; 0x48
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <HAL_CRC_MspInit+0x3c>)
 8000f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40023000 	.word	0x40023000
 8000f58:	40021000 	.word	0x40021000

08000f5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b0b2      	sub	sp, #200	; 0xc8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f74:	f107 0318 	add.w	r3, r7, #24
 8000f78:	229c      	movs	r2, #156	; 0x9c
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f009 fa75 	bl	800a46c <memset>
  if(hi2c->Instance==I2C1)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a33      	ldr	r2, [pc, #204]	; (8001054 <HAL_I2C_MspInit+0xf8>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d15e      	bne.n	800104a <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f8c:	2340      	movs	r3, #64	; 0x40
 8000f8e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f94:	f107 0318 	add.w	r3, r7, #24
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f002 f80b 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fa4:	f7ff ff90 	bl	8000ec8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa8:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <HAL_I2C_MspInit+0xfc>)
 8000faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fac:	4a2a      	ldr	r2, [pc, #168]	; (8001058 <HAL_I2C_MspInit+0xfc>)
 8000fae:	f043 0302 	orr.w	r3, r3, #2
 8000fb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb4:	4b28      	ldr	r3, [pc, #160]	; (8001058 <HAL_I2C_MspInit+0xfc>)
 8000fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb8:	f003 0302 	and.w	r3, r3, #2
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fc0:	4b25      	ldr	r3, [pc, #148]	; (8001058 <HAL_I2C_MspInit+0xfc>)
 8000fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc4:	4a24      	ldr	r2, [pc, #144]	; (8001058 <HAL_I2C_MspInit+0xfc>)
 8000fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fcc:	4b22      	ldr	r3, [pc, #136]	; (8001058 <HAL_I2C_MspInit+0xfc>)
 8000fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000fd8:	f001 f908 	bl	80021ec <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8000fdc:	2340      	movs	r3, #64	; 0x40
 8000fde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe2:	2312      	movs	r3, #18
 8000fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ffe:	4619      	mov	r1, r3
 8001000:	4816      	ldr	r0, [pc, #88]	; (800105c <HAL_I2C_MspInit+0x100>)
 8001002:	f000 fd5f 	bl	8001ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8001006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800100a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100e:	2312      	movs	r3, #18
 8001010:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001014:	2301      	movs	r3, #1
 8001016:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101a:	2303      	movs	r3, #3
 800101c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001020:	2304      	movs	r3, #4
 8001022:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800102a:	4619      	mov	r1, r3
 800102c:	480c      	ldr	r0, [pc, #48]	; (8001060 <HAL_I2C_MspInit+0x104>)
 800102e:	f000 fd49 	bl	8001ac4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_I2C_MspInit+0xfc>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	4a08      	ldr	r2, [pc, #32]	; (8001058 <HAL_I2C_MspInit+0xfc>)
 8001038:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800103c:	6593      	str	r3, [r2, #88]	; 0x58
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_I2C_MspInit+0xfc>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	37c8      	adds	r7, #200	; 0xc8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40005400 	.word	0x40005400
 8001058:	40021000 	.word	0x40021000
 800105c:	48000400 	.word	0x48000400
 8001060:	48001800 	.word	0x48001800

08001064 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a25      	ldr	r2, [pc, #148]	; (8001118 <HAL_SPI_MspInit+0xb4>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d144      	bne.n	8001110 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001086:	4b25      	ldr	r3, [pc, #148]	; (800111c <HAL_SPI_MspInit+0xb8>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108a:	4a24      	ldr	r2, [pc, #144]	; (800111c <HAL_SPI_MspInit+0xb8>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001090:	6593      	str	r3, [r2, #88]	; 0x58
 8001092:	4b22      	ldr	r3, [pc, #136]	; (800111c <HAL_SPI_MspInit+0xb8>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <HAL_SPI_MspInit+0xb8>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	4a1e      	ldr	r2, [pc, #120]	; (800111c <HAL_SPI_MspInit+0xb8>)
 80010a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <HAL_SPI_MspInit+0xb8>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <HAL_SPI_MspInit+0xb8>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	4a18      	ldr	r2, [pc, #96]	; (800111c <HAL_SPI_MspInit+0xb8>)
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_SPI_MspInit+0xb8>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ARD_10_Pin;
 80010ce:	2301      	movs	r3, #1
 80010d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010de:	2305      	movs	r3, #5
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	480d      	ldr	r0, [pc, #52]	; (8001120 <HAL_SPI_MspInit+0xbc>)
 80010ea:	f000 fceb 	bl	8001ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 80010ee:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001100:	2305      	movs	r3, #5
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4619      	mov	r1, r3
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <HAL_SPI_MspInit+0xc0>)
 800110c:	f000 fcda 	bl	8001ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001110:	bf00      	nop
 8001112:	3728      	adds	r7, #40	; 0x28
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40003800 	.word	0x40003800
 800111c:	40021000 	.word	0x40021000
 8001120:	48002000 	.word	0x48002000
 8001124:	48000400 	.word	0x48000400

08001128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b0b4      	sub	sp, #208	; 0xd0
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001140:	f107 0320 	add.w	r3, r7, #32
 8001144:	229c      	movs	r2, #156	; 0x9c
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f009 f98f 	bl	800a46c <memset>
  if(huart->Instance==USART2)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a54      	ldr	r2, [pc, #336]	; (80012a4 <HAL_UART_MspInit+0x17c>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d13c      	bne.n	80011d2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001158:	2302      	movs	r3, #2
 800115a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800115c:	2300      	movs	r3, #0
 800115e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001160:	f107 0320 	add.w	r3, r7, #32
 8001164:	4618      	mov	r0, r3
 8001166:	f001 ff25 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001170:	f7ff feaa 	bl	8000ec8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001174:	4b4c      	ldr	r3, [pc, #304]	; (80012a8 <HAL_UART_MspInit+0x180>)
 8001176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001178:	4a4b      	ldr	r2, [pc, #300]	; (80012a8 <HAL_UART_MspInit+0x180>)
 800117a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800117e:	6593      	str	r3, [r2, #88]	; 0x58
 8001180:	4b49      	ldr	r3, [pc, #292]	; (80012a8 <HAL_UART_MspInit+0x180>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001188:	61fb      	str	r3, [r7, #28]
 800118a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b46      	ldr	r3, [pc, #280]	; (80012a8 <HAL_UART_MspInit+0x180>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001190:	4a45      	ldr	r2, [pc, #276]	; (80012a8 <HAL_UART_MspInit+0x180>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001198:	4b43      	ldr	r3, [pc, #268]	; (80012a8 <HAL_UART_MspInit+0x180>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	61bb      	str	r3, [r7, #24]
 80011a2:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 80011a4:	230c      	movs	r3, #12
 80011a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011bc:	2307      	movs	r3, #7
 80011be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011c6:	4619      	mov	r1, r3
 80011c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011cc:	f000 fc7a 	bl	8001ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011d0:	e063      	b.n	800129a <HAL_UART_MspInit+0x172>
  else if(huart->Instance==USART3)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a35      	ldr	r2, [pc, #212]	; (80012ac <HAL_UART_MspInit+0x184>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d15e      	bne.n	800129a <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011dc:	2304      	movs	r3, #4
 80011de:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e4:	f107 0320 	add.w	r3, r7, #32
 80011e8:	4618      	mov	r0, r3
 80011ea:	f001 fee3 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80011f4:	f7ff fe68 	bl	8000ec8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011f8:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <HAL_UART_MspInit+0x180>)
 80011fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fc:	4a2a      	ldr	r2, [pc, #168]	; (80012a8 <HAL_UART_MspInit+0x180>)
 80011fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001202:	6593      	str	r3, [r2, #88]	; 0x58
 8001204:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <HAL_UART_MspInit+0x180>)
 8001206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001208:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <HAL_UART_MspInit+0x180>)
 8001212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001214:	4a24      	ldr	r2, [pc, #144]	; (80012a8 <HAL_UART_MspInit+0x180>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121c:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <HAL_UART_MspInit+0x180>)
 800121e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001228:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <HAL_UART_MspInit+0x180>)
 800122a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122c:	4a1e      	ldr	r2, [pc, #120]	; (80012a8 <HAL_UART_MspInit+0x180>)
 800122e:	f043 0302 	orr.w	r3, r3, #2
 8001232:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001234:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <HAL_UART_MspInit+0x180>)
 8001236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_RTS_Pin;
 8001240:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001244:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800125a:	2307      	movs	r3, #7
 800125c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001264:	4619      	mov	r1, r3
 8001266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126a:	f000 fc2b 	bl	8001ac4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 800126e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001272:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001288:	2307      	movs	r3, #7
 800128a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001292:	4619      	mov	r1, r3
 8001294:	4806      	ldr	r0, [pc, #24]	; (80012b0 <HAL_UART_MspInit+0x188>)
 8001296:	f000 fc15 	bl	8001ac4 <HAL_GPIO_Init>
}
 800129a:	bf00      	nop
 800129c:	37d0      	adds	r7, #208	; 0xd0
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40004400 	.word	0x40004400
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40004800 	.word	0x40004800
 80012b0:	48000400 	.word	0x48000400

080012b4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80012c8:	4b32      	ldr	r3, [pc, #200]	; (8001394 <HAL_FMC_MspInit+0xe0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d15d      	bne.n	800138c <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 80012d0:	4b30      	ldr	r3, [pc, #192]	; (8001394 <HAL_FMC_MspInit+0xe0>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80012d6:	4b30      	ldr	r3, [pc, #192]	; (8001398 <HAL_FMC_MspInit+0xe4>)
 80012d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012da:	4a2f      	ldr	r2, [pc, #188]	; (8001398 <HAL_FMC_MspInit+0xe4>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6513      	str	r3, [r2, #80]	; 0x50
 80012e2:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <HAL_FMC_MspInit+0xe4>)
 80012e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 80012ee:	f64f 739b 	movw	r3, #65435	; 0xff9b
 80012f2:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001300:	230c      	movs	r3, #12
 8001302:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	4619      	mov	r1, r3
 8001308:	4824      	ldr	r0, [pc, #144]	; (800139c <HAL_FMC_MspInit+0xe8>)
 800130a:	f000 fbdb 	bl	8001ac4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 800130e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001312:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001320:	230c      	movs	r3, #12
 8001322:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	4619      	mov	r1, r3
 8001328:	481d      	ldr	r0, [pc, #116]	; (80013a0 <HAL_FMC_MspInit+0xec>)
 800132a:	f000 fbcb 	bl	8001ac4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800133e:	230c      	movs	r3, #12
 8001340:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	4619      	mov	r1, r3
 8001346:	4817      	ldr	r0, [pc, #92]	; (80013a4 <HAL_FMC_MspInit+0xf0>)
 8001348:	f000 fbbc 	bl	8001ac4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 800134c:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001350:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800135e:	230c      	movs	r3, #12
 8001360:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	4619      	mov	r1, r3
 8001366:	4810      	ldr	r0, [pc, #64]	; (80013a8 <HAL_FMC_MspInit+0xf4>)
 8001368:	f000 fbac 	bl	8001ac4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 800136c:	233f      	movs	r3, #63	; 0x3f
 800136e:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800137c:	230c      	movs	r3, #12
 800137e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	4619      	mov	r1, r3
 8001384:	4809      	ldr	r0, [pc, #36]	; (80013ac <HAL_FMC_MspInit+0xf8>)
 8001386:	f000 fb9d 	bl	8001ac4 <HAL_GPIO_Init>
 800138a:	e000      	b.n	800138e <HAL_FMC_MspInit+0xda>
    return;
 800138c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	2000101c 	.word	0x2000101c
 8001398:	40021000 	.word	0x40021000
 800139c:	48001000 	.word	0x48001000
 80013a0:	48000c00 	.word	0x48000c00
 80013a4:	48000400 	.word	0x48000400
 80013a8:	48001400 	.word	0x48001400
 80013ac:	48001800 	.word	0x48001800

080013b0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80013b8:	f7ff ff7c 	bl	80012b4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b0b0      	sub	sp, #192	; 0xc0
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	229c      	movs	r2, #156	; 0x9c
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f009 f849 	bl	800a46c <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a32      	ldr	r2, [pc, #200]	; (80014a8 <HAL_SAI_MspInit+0xe4>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d15d      	bne.n	80014a0 <HAL_SAI_MspInit+0xdc>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80013e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013e8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	67fb      	str	r3, [r7, #124]	; 0x7c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80013ee:	2301      	movs	r3, #1
 80013f0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80013f6:	2310      	movs	r3, #16
 80013f8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80013fa:	2302      	movs	r3, #2
 80013fc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013fe:	2302      	movs	r3, #2
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001402:	2302      	movs	r3, #2
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8001406:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800140c:	f107 0310 	add.w	r3, r7, #16
 8001410:	4618      	mov	r0, r3
 8001412:	f001 fdcf 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <HAL_SAI_MspInit+0x5c>
    {
      Error_Handler();
 800141c:	f7ff fd54 	bl	8000ec8 <Error_Handler>
    }

    if (SAI1_client == 0)
 8001420:	4b22      	ldr	r3, [pc, #136]	; (80014ac <HAL_SAI_MspInit+0xe8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10b      	bne.n	8001440 <HAL_SAI_MspInit+0x7c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001428:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <HAL_SAI_MspInit+0xec>)
 800142a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142c:	4a20      	ldr	r2, [pc, #128]	; (80014b0 <HAL_SAI_MspInit+0xec>)
 800142e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001432:	6613      	str	r3, [r2, #96]	; 0x60
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <HAL_SAI_MspInit+0xec>)
 8001436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <HAL_SAI_MspInit+0xe8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	3301      	adds	r3, #1
 8001446:	4a19      	ldr	r2, [pc, #100]	; (80014ac <HAL_SAI_MspInit+0xe8>)
 8001448:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PB9     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PE5     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 800144a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800144e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001464:	230d      	movs	r3, #13
 8001466:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800146e:	4619      	mov	r1, r3
 8001470:	4810      	ldr	r0, [pc, #64]	; (80014b4 <HAL_SAI_MspInit+0xf0>)
 8001472:	f000 fb27 	bl	8001ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 8001476:	2364      	movs	r3, #100	; 0x64
 8001478:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800148e:	230d      	movs	r3, #13
 8001490:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001494:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001498:	4619      	mov	r1, r3
 800149a:	4807      	ldr	r0, [pc, #28]	; (80014b8 <HAL_SAI_MspInit+0xf4>)
 800149c:	f000 fb12 	bl	8001ac4 <HAL_GPIO_Init>

    }
}
 80014a0:	bf00      	nop
 80014a2:	37c0      	adds	r7, #192	; 0xc0
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40015404 	.word	0x40015404
 80014ac:	20001020 	.word	0x20001020
 80014b0:	40021000 	.word	0x40021000
 80014b4:	48000400 	.word	0x48000400
 80014b8:	48001000 	.word	0x48001000

080014bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <NMI_Handler+0x4>

080014c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <HardFault_Handler+0x4>

080014c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <MemManage_Handler+0x4>

080014ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <BusFault_Handler+0x4>

080014d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <UsageFault_Handler+0x4>

080014da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001508:	f000 f8c8 	bl	800169c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}

08001510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001518:	4a14      	ldr	r2, [pc, #80]	; (800156c <_sbrk+0x5c>)
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <_sbrk+0x60>)
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <_sbrk+0x64>)
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <_sbrk+0x68>)
 8001530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	429a      	cmp	r2, r3
 800153e:	d207      	bcs.n	8001550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001540:	f008 ff5c 	bl	800a3fc <__errno>
 8001544:	4603      	mov	r3, r0
 8001546:	220c      	movs	r2, #12
 8001548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	e009      	b.n	8001564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <_sbrk+0x64>)
 8001560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200a0000 	.word	0x200a0000
 8001570:	00000800 	.word	0x00000800
 8001574:	20001024 	.word	0x20001024
 8001578:	20028728 	.word	0x20028728

0800157c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <SystemInit+0x20>)
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001586:	4a05      	ldr	r2, [pc, #20]	; (800159c <SystemInit+0x20>)
 8001588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800158c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015a4:	f7ff ffea 	bl	800157c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a8:	480c      	ldr	r0, [pc, #48]	; (80015dc <LoopForever+0x6>)
  ldr r1, =_edata
 80015aa:	490d      	ldr	r1, [pc, #52]	; (80015e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015ac:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <LoopForever+0xe>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b0:	e002      	b.n	80015b8 <LoopCopyDataInit>

080015b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b6:	3304      	adds	r3, #4

080015b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015bc:	d3f9      	bcc.n	80015b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015c0:	4c0a      	ldr	r4, [pc, #40]	; (80015ec <LoopForever+0x16>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c4:	e001      	b.n	80015ca <LoopFillZerobss>

080015c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c8:	3204      	adds	r2, #4

080015ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015cc:	d3fb      	bcc.n	80015c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ce:	f008 ff1b 	bl	800a408 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015d2:	f7fe ffe7 	bl	80005a4 <main>

080015d6 <LoopForever>:

LoopForever:
    b LoopForever
 80015d6:	e7fe      	b.n	80015d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015d8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80015dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e0:	20000d0c 	.word	0x20000d0c
  ldr r2, =_sidata
 80015e4:	081d44b0 	.word	0x081d44b0
  ldr r2, =_sbss
 80015e8:	20000d20 	.word	0x20000d20
  ldr r4, =_ebss
 80015ec:	20028728 	.word	0x20028728

080015f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015f0:	e7fe      	b.n	80015f0 <ADC1_IRQHandler>

080015f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fc:	2003      	movs	r0, #3
 80015fe:	f000 f943 	bl	8001888 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001602:	2000      	movs	r0, #0
 8001604:	f000 f80e 	bl	8001624 <HAL_InitTick>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	71fb      	strb	r3, [r7, #7]
 8001612:	e001      	b.n	8001618 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001614:	f7ff fc5e 	bl	8000ed4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001618:	79fb      	ldrb	r3, [r7, #7]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_InitTick+0x6c>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d023      	beq.n	8001680 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001638:	4b16      	ldr	r3, [pc, #88]	; (8001694 <HAL_InitTick+0x70>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <HAL_InitTick+0x6c>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4619      	mov	r1, r3
 8001642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001646:	fbb3 f3f1 	udiv	r3, r3, r1
 800164a:	fbb2 f3f3 	udiv	r3, r2, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f000 f941 	bl	80018d6 <HAL_SYSTICK_Config>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10f      	bne.n	800167a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b0f      	cmp	r3, #15
 800165e:	d809      	bhi.n	8001674 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001660:	2200      	movs	r2, #0
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	f04f 30ff 	mov.w	r0, #4294967295
 8001668:	f000 f919 	bl	800189e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800166c:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <HAL_InitTick+0x74>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e007      	b.n	8001684 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e004      	b.n	8001684 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	73fb      	strb	r3, [r7, #15]
 800167e:	e001      	b.n	8001684 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001684:	7bfb      	ldrb	r3, [r7, #15]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000008 	.word	0x20000008
 8001694:	20000000 	.word	0x20000000
 8001698:	20000004 	.word	0x20000004

0800169c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_IncTick+0x20>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_IncTick+0x24>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <HAL_IncTick+0x24>)
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20000008 	.word	0x20000008
 80016c0:	20001028 	.word	0x20001028

080016c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return uwTick;
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <HAL_GetTick+0x14>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20001028 	.word	0x20001028

080016dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e4:	f7ff ffee 	bl	80016c4 <HAL_GetTick>
 80016e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f4:	d005      	beq.n	8001702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016f6:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <HAL_Delay+0x44>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4413      	add	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001702:	bf00      	nop
 8001704:	f7ff ffde 	bl	80016c4 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	429a      	cmp	r2, r3
 8001712:	d8f7      	bhi.n	8001704 <HAL_Delay+0x28>
  {
  }
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000008 	.word	0x20000008

08001724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <__NVIC_SetPriorityGrouping+0x44>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001740:	4013      	ands	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800174c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001756:	4a04      	ldr	r2, [pc, #16]	; (8001768 <__NVIC_SetPriorityGrouping+0x44>)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	60d3      	str	r3, [r2, #12]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <__NVIC_GetPriorityGrouping+0x18>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	f003 0307 	and.w	r3, r3, #7
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	2b00      	cmp	r3, #0
 800179a:	db0a      	blt.n	80017b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	490c      	ldr	r1, [pc, #48]	; (80017d4 <__NVIC_SetPriority+0x4c>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	0112      	lsls	r2, r2, #4
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	440b      	add	r3, r1
 80017ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b0:	e00a      	b.n	80017c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4908      	ldr	r1, [pc, #32]	; (80017d8 <__NVIC_SetPriority+0x50>)
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	3b04      	subs	r3, #4
 80017c0:	0112      	lsls	r2, r2, #4
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	440b      	add	r3, r1
 80017c6:	761a      	strb	r2, [r3, #24]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000e100 	.word	0xe000e100
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	; 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f1c3 0307 	rsb	r3, r3, #7
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	bf28      	it	cs
 80017fa:	2304      	movcs	r3, #4
 80017fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3304      	adds	r3, #4
 8001802:	2b06      	cmp	r3, #6
 8001804:	d902      	bls.n	800180c <NVIC_EncodePriority+0x30>
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3b03      	subs	r3, #3
 800180a:	e000      	b.n	800180e <NVIC_EncodePriority+0x32>
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	f04f 32ff 	mov.w	r2, #4294967295
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43da      	mvns	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	401a      	ands	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001824:	f04f 31ff 	mov.w	r1, #4294967295
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	43d9      	mvns	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	4313      	orrs	r3, r2
         );
}
 8001836:	4618      	mov	r0, r3
 8001838:	3724      	adds	r7, #36	; 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001854:	d301      	bcc.n	800185a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001856:	2301      	movs	r3, #1
 8001858:	e00f      	b.n	800187a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <SysTick_Config+0x40>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3b01      	subs	r3, #1
 8001860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001862:	210f      	movs	r1, #15
 8001864:	f04f 30ff 	mov.w	r0, #4294967295
 8001868:	f7ff ff8e 	bl	8001788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <SysTick_Config+0x40>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001872:	4b04      	ldr	r3, [pc, #16]	; (8001884 <SysTick_Config+0x40>)
 8001874:	2207      	movs	r2, #7
 8001876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	e000e010 	.word	0xe000e010

08001888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ff47 	bl	8001724 <__NVIC_SetPriorityGrouping>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b086      	sub	sp, #24
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018b0:	f7ff ff5c 	bl	800176c <__NVIC_GetPriorityGrouping>
 80018b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	6978      	ldr	r0, [r7, #20]
 80018bc:	f7ff ff8e 	bl	80017dc <NVIC_EncodePriority>
 80018c0:	4602      	mov	r2, r0
 80018c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff5d 	bl	8001788 <__NVIC_SetPriority>
}
 80018ce:	bf00      	nop
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ffb0 	bl	8001844 <SysTick_Config>
 80018e4:	4603      	mov	r3, r0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e054      	b.n	80019ac <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	7f5b      	ldrb	r3, [r3, #29]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	d105      	bne.n	8001918 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fb02 	bl	8000f1c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2202      	movs	r2, #2
 800191c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	791b      	ldrb	r3, [r3, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10c      	bne.n	8001940 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a22      	ldr	r2, [pc, #136]	; (80019b4 <HAL_CRC_Init+0xc4>)
 800192c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0218 	bic.w	r2, r2, #24
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	e00c      	b.n	800195a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6899      	ldr	r1, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	461a      	mov	r2, r3
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f834 	bl	80019b8 <HAL_CRCEx_Polynomial_Set>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e028      	b.n	80019ac <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	795b      	ldrb	r3, [r3, #5]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d105      	bne.n	800196e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f04f 32ff 	mov.w	r2, #4294967295
 800196a:	611a      	str	r2, [r3, #16]
 800196c:	e004      	b.n	8001978 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6912      	ldr	r2, [r2, #16]
 8001976:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	699a      	ldr	r2, [r3, #24]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	04c11db7 	.word	0x04c11db7

080019b8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80019c8:	231f      	movs	r3, #31
 80019ca:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80019cc:	bf00      	nop
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1e5a      	subs	r2, r3, #1
 80019d2:	613a      	str	r2, [r7, #16]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d009      	beq.n	80019ec <HAL_CRCEx_Polynomial_Set+0x34>
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	f003 031f 	and.w	r3, r3, #31
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f0      	beq.n	80019ce <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b18      	cmp	r3, #24
 80019f0:	d846      	bhi.n	8001a80 <HAL_CRCEx_Polynomial_Set+0xc8>
 80019f2:	a201      	add	r2, pc, #4	; (adr r2, 80019f8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80019f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f8:	08001a87 	.word	0x08001a87
 80019fc:	08001a81 	.word	0x08001a81
 8001a00:	08001a81 	.word	0x08001a81
 8001a04:	08001a81 	.word	0x08001a81
 8001a08:	08001a81 	.word	0x08001a81
 8001a0c:	08001a81 	.word	0x08001a81
 8001a10:	08001a81 	.word	0x08001a81
 8001a14:	08001a81 	.word	0x08001a81
 8001a18:	08001a75 	.word	0x08001a75
 8001a1c:	08001a81 	.word	0x08001a81
 8001a20:	08001a81 	.word	0x08001a81
 8001a24:	08001a81 	.word	0x08001a81
 8001a28:	08001a81 	.word	0x08001a81
 8001a2c:	08001a81 	.word	0x08001a81
 8001a30:	08001a81 	.word	0x08001a81
 8001a34:	08001a81 	.word	0x08001a81
 8001a38:	08001a69 	.word	0x08001a69
 8001a3c:	08001a81 	.word	0x08001a81
 8001a40:	08001a81 	.word	0x08001a81
 8001a44:	08001a81 	.word	0x08001a81
 8001a48:	08001a81 	.word	0x08001a81
 8001a4c:	08001a81 	.word	0x08001a81
 8001a50:	08001a81 	.word	0x08001a81
 8001a54:	08001a81 	.word	0x08001a81
 8001a58:	08001a5d 	.word	0x08001a5d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d913      	bls.n	8001a8a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001a66:	e010      	b.n	8001a8a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	2b07      	cmp	r3, #7
 8001a6c:	d90f      	bls.n	8001a8e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001a72:	e00c      	b.n	8001a8e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	2b0f      	cmp	r3, #15
 8001a78:	d90b      	bls.n	8001a92 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001a7e:	e008      	b.n	8001a92 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	75fb      	strb	r3, [r7, #23]
      break;
 8001a84:	e006      	b.n	8001a94 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001a86:	bf00      	nop
 8001a88:	e004      	b.n	8001a94 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001a8a:	bf00      	nop
 8001a8c:	e002      	b.n	8001a94 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001a8e:	bf00      	nop
 8001a90:	e000      	b.n	8001a94 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001a92:	bf00      	nop
  }
  if (status == HAL_OK)
 8001a94:	7dfb      	ldrb	r3, [r7, #23]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10d      	bne.n	8001ab6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f023 0118 	bic.w	r1, r3, #24
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	371c      	adds	r7, #28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b087      	sub	sp, #28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad2:	e166      	b.n	8001da2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	2101      	movs	r1, #1
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 8158 	beq.w	8001d9c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d005      	beq.n	8001b04 <HAL_GPIO_Init+0x40>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 0303 	and.w	r3, r3, #3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d130      	bne.n	8001b66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	2203      	movs	r2, #3
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	091b      	lsrs	r3, r3, #4
 8001b50:	f003 0201 	and.w	r2, r3, #1
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	d017      	beq.n	8001ba2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4013      	ands	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d123      	bne.n	8001bf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	08da      	lsrs	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3208      	adds	r2, #8
 8001bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	220f      	movs	r2, #15
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	691a      	ldr	r2, [r3, #16]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	08da      	lsrs	r2, r3, #3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3208      	adds	r2, #8
 8001bf0:	6939      	ldr	r1, [r7, #16]
 8001bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	2203      	movs	r2, #3
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0203 	and.w	r2, r3, #3
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 80b2 	beq.w	8001d9c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c38:	4b61      	ldr	r3, [pc, #388]	; (8001dc0 <HAL_GPIO_Init+0x2fc>)
 8001c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3c:	4a60      	ldr	r2, [pc, #384]	; (8001dc0 <HAL_GPIO_Init+0x2fc>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	6613      	str	r3, [r2, #96]	; 0x60
 8001c44:	4b5e      	ldr	r3, [pc, #376]	; (8001dc0 <HAL_GPIO_Init+0x2fc>)
 8001c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c50:	4a5c      	ldr	r2, [pc, #368]	; (8001dc4 <HAL_GPIO_Init+0x300>)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	089b      	lsrs	r3, r3, #2
 8001c56:	3302      	adds	r3, #2
 8001c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	220f      	movs	r2, #15
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c7a:	d02b      	beq.n	8001cd4 <HAL_GPIO_Init+0x210>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a52      	ldr	r2, [pc, #328]	; (8001dc8 <HAL_GPIO_Init+0x304>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d025      	beq.n	8001cd0 <HAL_GPIO_Init+0x20c>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a51      	ldr	r2, [pc, #324]	; (8001dcc <HAL_GPIO_Init+0x308>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d01f      	beq.n	8001ccc <HAL_GPIO_Init+0x208>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a50      	ldr	r2, [pc, #320]	; (8001dd0 <HAL_GPIO_Init+0x30c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d019      	beq.n	8001cc8 <HAL_GPIO_Init+0x204>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a4f      	ldr	r2, [pc, #316]	; (8001dd4 <HAL_GPIO_Init+0x310>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d013      	beq.n	8001cc4 <HAL_GPIO_Init+0x200>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a4e      	ldr	r2, [pc, #312]	; (8001dd8 <HAL_GPIO_Init+0x314>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d00d      	beq.n	8001cc0 <HAL_GPIO_Init+0x1fc>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a4d      	ldr	r2, [pc, #308]	; (8001ddc <HAL_GPIO_Init+0x318>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d007      	beq.n	8001cbc <HAL_GPIO_Init+0x1f8>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a4c      	ldr	r2, [pc, #304]	; (8001de0 <HAL_GPIO_Init+0x31c>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d101      	bne.n	8001cb8 <HAL_GPIO_Init+0x1f4>
 8001cb4:	2307      	movs	r3, #7
 8001cb6:	e00e      	b.n	8001cd6 <HAL_GPIO_Init+0x212>
 8001cb8:	2308      	movs	r3, #8
 8001cba:	e00c      	b.n	8001cd6 <HAL_GPIO_Init+0x212>
 8001cbc:	2306      	movs	r3, #6
 8001cbe:	e00a      	b.n	8001cd6 <HAL_GPIO_Init+0x212>
 8001cc0:	2305      	movs	r3, #5
 8001cc2:	e008      	b.n	8001cd6 <HAL_GPIO_Init+0x212>
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	e006      	b.n	8001cd6 <HAL_GPIO_Init+0x212>
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e004      	b.n	8001cd6 <HAL_GPIO_Init+0x212>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e002      	b.n	8001cd6 <HAL_GPIO_Init+0x212>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <HAL_GPIO_Init+0x212>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	f002 0203 	and.w	r2, r2, #3
 8001cdc:	0092      	lsls	r2, r2, #2
 8001cde:	4093      	lsls	r3, r2
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ce6:	4937      	ldr	r1, [pc, #220]	; (8001dc4 <HAL_GPIO_Init+0x300>)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	089b      	lsrs	r3, r3, #2
 8001cec:	3302      	adds	r3, #2
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cf4:	4b3b      	ldr	r3, [pc, #236]	; (8001de4 <HAL_GPIO_Init+0x320>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d18:	4a32      	ldr	r2, [pc, #200]	; (8001de4 <HAL_GPIO_Init+0x320>)
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d1e:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <HAL_GPIO_Init+0x320>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d42:	4a28      	ldr	r2, [pc, #160]	; (8001de4 <HAL_GPIO_Init+0x320>)
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d48:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <HAL_GPIO_Init+0x320>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d6c:	4a1d      	ldr	r2, [pc, #116]	; (8001de4 <HAL_GPIO_Init+0x320>)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d72:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <HAL_GPIO_Init+0x320>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d96:	4a13      	ldr	r2, [pc, #76]	; (8001de4 <HAL_GPIO_Init+0x320>)
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f47f ae91 	bne.w	8001ad4 <HAL_GPIO_Init+0x10>
  }
}
 8001db2:	bf00      	nop
 8001db4:	bf00      	nop
 8001db6:	371c      	adds	r7, #28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40010000 	.word	0x40010000
 8001dc8:	48000400 	.word	0x48000400
 8001dcc:	48000800 	.word	0x48000800
 8001dd0:	48000c00 	.word	0x48000c00
 8001dd4:	48001000 	.word	0x48001000
 8001dd8:	48001400 	.word	0x48001400
 8001ddc:	48001800 	.word	0x48001800
 8001de0:	48001c00 	.word	0x48001c00
 8001de4:	40010400 	.word	0x40010400

08001de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]
 8001df4:	4613      	mov	r3, r2
 8001df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df8:	787b      	ldrb	r3, [r7, #1]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dfe:	887a      	ldrh	r2, [r7, #2]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e04:	e002      	b.n	8001e0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e081      	b.n	8001f2e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d106      	bne.n	8001e44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff f88c 	bl	8000f5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2224      	movs	r2, #36	; 0x24
 8001e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0201 	bic.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d107      	bne.n	8001e92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	e006      	b.n	8001ea0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d104      	bne.n	8001eb2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eb0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ec4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ed4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691a      	ldr	r2, [r3, #16]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69d9      	ldr	r1, [r3, #28]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1a      	ldr	r2, [r3, #32]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2220      	movs	r2, #32
 8001f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b20      	cmp	r3, #32
 8001f4a:	d138      	bne.n	8001fbe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e032      	b.n	8001fc0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2224      	movs	r2, #36	; 0x24
 8001f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0201 	bic.w	r2, r2, #1
 8001f78:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f88:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6819      	ldr	r1, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f042 0201 	orr.w	r2, r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2220      	movs	r2, #32
 8001fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e000      	b.n	8001fc0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fbe:	2302      	movs	r3, #2
  }
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b20      	cmp	r3, #32
 8001fe0:	d139      	bne.n	8002056 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e033      	b.n	8002058 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2224      	movs	r2, #36	; 0x24
 8001ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0201 	bic.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800201e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	021b      	lsls	r3, r3, #8
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	4313      	orrs	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f042 0201 	orr.w	r2, r2, #1
 8002040:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2220      	movs	r2, #32
 8002046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	e000      	b.n	8002058 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002056:	2302      	movs	r3, #2
  }
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002068:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002074:	d102      	bne.n	800207c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800207a:	e00b      	b.n	8002094 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800207e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800208a:	d102      	bne.n	8002092 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800208c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002090:	e000      	b.n	8002094 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002092:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002094:	4618      	mov	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40007000 	.word	0x40007000

080020a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d141      	bne.n	8002136 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020b2:	4b4b      	ldr	r3, [pc, #300]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020be:	d131      	bne.n	8002124 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020c0:	4b47      	ldr	r3, [pc, #284]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020c6:	4a46      	ldr	r2, [pc, #280]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020d8:	4a41      	ldr	r2, [pc, #260]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80020e0:	4b40      	ldr	r3, [pc, #256]	; (80021e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2232      	movs	r2, #50	; 0x32
 80020e6:	fb02 f303 	mul.w	r3, r2, r3
 80020ea:	4a3f      	ldr	r2, [pc, #252]	; (80021e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020ec:	fba2 2303 	umull	r2, r3, r2, r3
 80020f0:	0c9b      	lsrs	r3, r3, #18
 80020f2:	3301      	adds	r3, #1
 80020f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020f6:	e002      	b.n	80020fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020fe:	4b38      	ldr	r3, [pc, #224]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800210a:	d102      	bne.n	8002112 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f2      	bne.n	80020f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800211e:	d158      	bne.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e057      	b.n	80021d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002124:	4b2e      	ldr	r3, [pc, #184]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800212a:	4a2d      	ldr	r2, [pc, #180]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800212c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002130:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002134:	e04d      	b.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800213c:	d141      	bne.n	80021c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800213e:	4b28      	ldr	r3, [pc, #160]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800214a:	d131      	bne.n	80021b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800214c:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002152:	4a23      	ldr	r2, [pc, #140]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002158:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800215c:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002164:	4a1e      	ldr	r2, [pc, #120]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800216a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800216c:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2232      	movs	r2, #50	; 0x32
 8002172:	fb02 f303 	mul.w	r3, r2, r3
 8002176:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002178:	fba2 2303 	umull	r2, r3, r2, r3
 800217c:	0c9b      	lsrs	r3, r3, #18
 800217e:	3301      	adds	r3, #1
 8002180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002182:	e002      	b.n	800218a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	3b01      	subs	r3, #1
 8002188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800218a:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002196:	d102      	bne.n	800219e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f2      	bne.n	8002184 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021aa:	d112      	bne.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e011      	b.n	80021d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021b6:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80021c0:	e007      	b.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021c2:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021ca:	4a05      	ldr	r2, [pc, #20]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021d0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	40007000 	.word	0x40007000
 80021e4:	20000000 	.word	0x20000000
 80021e8:	431bde83 	.word	0x431bde83

080021ec <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_PWREx_EnableVddIO2+0x1c>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <HAL_PWREx_EnableVddIO2+0x1c>)
 80021f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021fa:	6053      	str	r3, [r2, #4]
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40007000 	.word	0x40007000

0800220c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b088      	sub	sp, #32
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d102      	bne.n	8002220 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	f000 bc08 	b.w	8002a30 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002220:	4b96      	ldr	r3, [pc, #600]	; (800247c <HAL_RCC_OscConfig+0x270>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800222a:	4b94      	ldr	r3, [pc, #592]	; (800247c <HAL_RCC_OscConfig+0x270>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80e4 	beq.w	800240a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d007      	beq.n	8002258 <HAL_RCC_OscConfig+0x4c>
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	2b0c      	cmp	r3, #12
 800224c:	f040 808b 	bne.w	8002366 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	2b01      	cmp	r3, #1
 8002254:	f040 8087 	bne.w	8002366 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002258:	4b88      	ldr	r3, [pc, #544]	; (800247c <HAL_RCC_OscConfig+0x270>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_RCC_OscConfig+0x64>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e3df      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a1a      	ldr	r2, [r3, #32]
 8002274:	4b81      	ldr	r3, [pc, #516]	; (800247c <HAL_RCC_OscConfig+0x270>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	d004      	beq.n	800228a <HAL_RCC_OscConfig+0x7e>
 8002280:	4b7e      	ldr	r3, [pc, #504]	; (800247c <HAL_RCC_OscConfig+0x270>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002288:	e005      	b.n	8002296 <HAL_RCC_OscConfig+0x8a>
 800228a:	4b7c      	ldr	r3, [pc, #496]	; (800247c <HAL_RCC_OscConfig+0x270>)
 800228c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002296:	4293      	cmp	r3, r2
 8002298:	d223      	bcs.n	80022e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 fdca 	bl	8002e38 <RCC_SetFlashLatencyFromMSIRange>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e3c0      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ae:	4b73      	ldr	r3, [pc, #460]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a72      	ldr	r2, [pc, #456]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80022b4:	f043 0308 	orr.w	r3, r3, #8
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	4b70      	ldr	r3, [pc, #448]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	496d      	ldr	r1, [pc, #436]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022cc:	4b6b      	ldr	r3, [pc, #428]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	4968      	ldr	r1, [pc, #416]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	604b      	str	r3, [r1, #4]
 80022e0:	e025      	b.n	800232e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e2:	4b66      	ldr	r3, [pc, #408]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a65      	ldr	r2, [pc, #404]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80022e8:	f043 0308 	orr.w	r3, r3, #8
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b63      	ldr	r3, [pc, #396]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	4960      	ldr	r1, [pc, #384]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002300:	4b5e      	ldr	r3, [pc, #376]	; (800247c <HAL_RCC_OscConfig+0x270>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	495b      	ldr	r1, [pc, #364]	; (800247c <HAL_RCC_OscConfig+0x270>)
 8002310:	4313      	orrs	r3, r2
 8002312:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d109      	bne.n	800232e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	4618      	mov	r0, r3
 8002320:	f000 fd8a 	bl	8002e38 <RCC_SetFlashLatencyFromMSIRange>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e380      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800232e:	f000 fcc1 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002332:	4602      	mov	r2, r0
 8002334:	4b51      	ldr	r3, [pc, #324]	; (800247c <HAL_RCC_OscConfig+0x270>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	4950      	ldr	r1, [pc, #320]	; (8002480 <HAL_RCC_OscConfig+0x274>)
 8002340:	5ccb      	ldrb	r3, [r1, r3]
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	fa22 f303 	lsr.w	r3, r2, r3
 800234a:	4a4e      	ldr	r2, [pc, #312]	; (8002484 <HAL_RCC_OscConfig+0x278>)
 800234c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800234e:	4b4e      	ldr	r3, [pc, #312]	; (8002488 <HAL_RCC_OscConfig+0x27c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff f966 	bl	8001624 <HAL_InitTick>
 8002358:	4603      	mov	r3, r0
 800235a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d052      	beq.n	8002408 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	e364      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d032      	beq.n	80023d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800236e:	4b43      	ldr	r3, [pc, #268]	; (800247c <HAL_RCC_OscConfig+0x270>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a42      	ldr	r2, [pc, #264]	; (800247c <HAL_RCC_OscConfig+0x270>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800237a:	f7ff f9a3 	bl	80016c4 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002382:	f7ff f99f 	bl	80016c4 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e34d      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002394:	4b39      	ldr	r3, [pc, #228]	; (800247c <HAL_RCC_OscConfig+0x270>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023a0:	4b36      	ldr	r3, [pc, #216]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a35      	ldr	r2, [pc, #212]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80023a6:	f043 0308 	orr.w	r3, r3, #8
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b33      	ldr	r3, [pc, #204]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4930      	ldr	r1, [pc, #192]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023be:	4b2f      	ldr	r3, [pc, #188]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	492b      	ldr	r1, [pc, #172]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	604b      	str	r3, [r1, #4]
 80023d2:	e01a      	b.n	800240a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023d4:	4b29      	ldr	r3, [pc, #164]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a28      	ldr	r2, [pc, #160]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80023da:	f023 0301 	bic.w	r3, r3, #1
 80023de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023e0:	f7ff f970 	bl	80016c4 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023e8:	f7ff f96c 	bl	80016c4 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e31a      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023fa:	4b20      	ldr	r3, [pc, #128]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x1dc>
 8002406:	e000      	b.n	800240a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002408:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d073      	beq.n	80024fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	2b08      	cmp	r3, #8
 800241a:	d005      	beq.n	8002428 <HAL_RCC_OscConfig+0x21c>
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	2b0c      	cmp	r3, #12
 8002420:	d10e      	bne.n	8002440 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d10b      	bne.n	8002440 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002428:	4b14      	ldr	r3, [pc, #80]	; (800247c <HAL_RCC_OscConfig+0x270>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d063      	beq.n	80024fc <HAL_RCC_OscConfig+0x2f0>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d15f      	bne.n	80024fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e2f7      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002448:	d106      	bne.n	8002458 <HAL_RCC_OscConfig+0x24c>
 800244a:	4b0c      	ldr	r3, [pc, #48]	; (800247c <HAL_RCC_OscConfig+0x270>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a0b      	ldr	r2, [pc, #44]	; (800247c <HAL_RCC_OscConfig+0x270>)
 8002450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e025      	b.n	80024a4 <HAL_RCC_OscConfig+0x298>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002460:	d114      	bne.n	800248c <HAL_RCC_OscConfig+0x280>
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_RCC_OscConfig+0x270>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a05      	ldr	r2, [pc, #20]	; (800247c <HAL_RCC_OscConfig+0x270>)
 8002468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4b03      	ldr	r3, [pc, #12]	; (800247c <HAL_RCC_OscConfig+0x270>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a02      	ldr	r2, [pc, #8]	; (800247c <HAL_RCC_OscConfig+0x270>)
 8002474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e013      	b.n	80024a4 <HAL_RCC_OscConfig+0x298>
 800247c:	40021000 	.word	0x40021000
 8002480:	0800b8a8 	.word	0x0800b8a8
 8002484:	20000000 	.word	0x20000000
 8002488:	20000004 	.word	0x20000004
 800248c:	4ba0      	ldr	r3, [pc, #640]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a9f      	ldr	r2, [pc, #636]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 8002492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	4b9d      	ldr	r3, [pc, #628]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a9c      	ldr	r2, [pc, #624]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 800249e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d013      	beq.n	80024d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7ff f90a 	bl	80016c4 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b4:	f7ff f906 	bl	80016c4 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	; 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e2b4      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024c6:	4b92      	ldr	r3, [pc, #584]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCC_OscConfig+0x2a8>
 80024d2:	e014      	b.n	80024fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7ff f8f6 	bl	80016c4 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024dc:	f7ff f8f2 	bl	80016c4 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	; 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e2a0      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ee:	4b88      	ldr	r3, [pc, #544]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x2d0>
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d060      	beq.n	80025cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	2b04      	cmp	r3, #4
 800250e:	d005      	beq.n	800251c <HAL_RCC_OscConfig+0x310>
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d119      	bne.n	800254a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d116      	bne.n	800254a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800251c:	4b7c      	ldr	r3, [pc, #496]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_OscConfig+0x328>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e27d      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002534:	4b76      	ldr	r3, [pc, #472]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	061b      	lsls	r3, r3, #24
 8002542:	4973      	ldr	r1, [pc, #460]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002548:	e040      	b.n	80025cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d023      	beq.n	800259a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002552:	4b6f      	ldr	r3, [pc, #444]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6e      	ldr	r2, [pc, #440]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 8002558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255e:	f7ff f8b1 	bl	80016c4 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002566:	f7ff f8ad 	bl	80016c4 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e25b      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002578:	4b65      	ldr	r3, [pc, #404]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002584:	4b62      	ldr	r3, [pc, #392]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	061b      	lsls	r3, r3, #24
 8002592:	495f      	ldr	r1, [pc, #380]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
 8002598:	e018      	b.n	80025cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259a:	4b5d      	ldr	r3, [pc, #372]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a5c      	ldr	r2, [pc, #368]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 80025a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a6:	f7ff f88d 	bl	80016c4 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ae:	f7ff f889 	bl	80016c4 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e237      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025c0:	4b53      	ldr	r3, [pc, #332]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d03c      	beq.n	8002652 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01c      	beq.n	800261a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e0:	4b4b      	ldr	r3, [pc, #300]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 80025e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025e6:	4a4a      	ldr	r2, [pc, #296]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f0:	f7ff f868 	bl	80016c4 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f8:	f7ff f864 	bl	80016c4 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e212      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800260a:	4b41      	ldr	r3, [pc, #260]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 800260c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ef      	beq.n	80025f8 <HAL_RCC_OscConfig+0x3ec>
 8002618:	e01b      	b.n	8002652 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261a:	4b3d      	ldr	r3, [pc, #244]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 800261c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002620:	4a3b      	ldr	r2, [pc, #236]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262a:	f7ff f84b 	bl	80016c4 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002632:	f7ff f847 	bl	80016c4 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e1f5      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002644:	4b32      	ldr	r3, [pc, #200]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 8002646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1ef      	bne.n	8002632 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 80a6 	beq.w	80027ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002660:	2300      	movs	r3, #0
 8002662:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002664:	4b2a      	ldr	r3, [pc, #168]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10d      	bne.n	800268c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002670:	4b27      	ldr	r3, [pc, #156]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	4a26      	ldr	r2, [pc, #152]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 8002676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267a:	6593      	str	r3, [r2, #88]	; 0x58
 800267c:	4b24      	ldr	r3, [pc, #144]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002688:	2301      	movs	r3, #1
 800268a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800268c:	4b21      	ldr	r3, [pc, #132]	; (8002714 <HAL_RCC_OscConfig+0x508>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d118      	bne.n	80026ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002698:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <HAL_RCC_OscConfig+0x508>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a1d      	ldr	r2, [pc, #116]	; (8002714 <HAL_RCC_OscConfig+0x508>)
 800269e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a4:	f7ff f80e 	bl	80016c4 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ac:	f7ff f80a 	bl	80016c4 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e1b8      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026be:	4b15      	ldr	r3, [pc, #84]	; (8002714 <HAL_RCC_OscConfig+0x508>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d108      	bne.n	80026e4 <HAL_RCC_OscConfig+0x4d8>
 80026d2:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 80026d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d8:	4a0d      	ldr	r2, [pc, #52]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026e2:	e029      	b.n	8002738 <HAL_RCC_OscConfig+0x52c>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b05      	cmp	r3, #5
 80026ea:	d115      	bne.n	8002718 <HAL_RCC_OscConfig+0x50c>
 80026ec:	4b08      	ldr	r3, [pc, #32]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 80026ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f2:	4a07      	ldr	r2, [pc, #28]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 80026f4:	f043 0304 	orr.w	r3, r3, #4
 80026f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026fc:	4b04      	ldr	r3, [pc, #16]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002702:	4a03      	ldr	r2, [pc, #12]	; (8002710 <HAL_RCC_OscConfig+0x504>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800270c:	e014      	b.n	8002738 <HAL_RCC_OscConfig+0x52c>
 800270e:	bf00      	nop
 8002710:	40021000 	.word	0x40021000
 8002714:	40007000 	.word	0x40007000
 8002718:	4b9d      	ldr	r3, [pc, #628]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271e:	4a9c      	ldr	r2, [pc, #624]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002728:	4b99      	ldr	r3, [pc, #612]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 800272a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272e:	4a98      	ldr	r2, [pc, #608]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 8002730:	f023 0304 	bic.w	r3, r3, #4
 8002734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d016      	beq.n	800276e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002740:	f7fe ffc0 	bl	80016c4 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002746:	e00a      	b.n	800275e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002748:	f7fe ffbc 	bl	80016c4 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	; 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e168      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800275e:	4b8c      	ldr	r3, [pc, #560]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 8002760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0ed      	beq.n	8002748 <HAL_RCC_OscConfig+0x53c>
 800276c:	e015      	b.n	800279a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276e:	f7fe ffa9 	bl	80016c4 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002774:	e00a      	b.n	800278c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002776:	f7fe ffa5 	bl	80016c4 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	f241 3288 	movw	r2, #5000	; 0x1388
 8002784:	4293      	cmp	r3, r2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e151      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800278c:	4b80      	ldr	r3, [pc, #512]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1ed      	bne.n	8002776 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800279a:	7ffb      	ldrb	r3, [r7, #31]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a0:	4b7b      	ldr	r3, [pc, #492]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 80027a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a4:	4a7a      	ldr	r2, [pc, #488]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 80027a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d03c      	beq.n	8002832 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01c      	beq.n	80027fa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027c0:	4b73      	ldr	r3, [pc, #460]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 80027c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027c6:	4a72      	ldr	r2, [pc, #456]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d0:	f7fe ff78 	bl	80016c4 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027d8:	f7fe ff74 	bl	80016c4 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e122      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027ea:	4b69      	ldr	r3, [pc, #420]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 80027ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0ef      	beq.n	80027d8 <HAL_RCC_OscConfig+0x5cc>
 80027f8:	e01b      	b.n	8002832 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027fa:	4b65      	ldr	r3, [pc, #404]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 80027fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002800:	4a63      	ldr	r2, [pc, #396]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 8002802:	f023 0301 	bic.w	r3, r3, #1
 8002806:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280a:	f7fe ff5b 	bl	80016c4 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002812:	f7fe ff57 	bl	80016c4 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e105      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002824:	4b5a      	ldr	r3, [pc, #360]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 8002826:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1ef      	bne.n	8002812 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 80f9 	beq.w	8002a2e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002840:	2b02      	cmp	r3, #2
 8002842:	f040 80cf 	bne.w	80029e4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002846:	4b52      	ldr	r3, [pc, #328]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f003 0203 	and.w	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	429a      	cmp	r2, r3
 8002858:	d12c      	bne.n	80028b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	3b01      	subs	r3, #1
 8002866:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002868:	429a      	cmp	r2, r3
 800286a:	d123      	bne.n	80028b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002876:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002878:	429a      	cmp	r2, r3
 800287a:	d11b      	bne.n	80028b4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002886:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002888:	429a      	cmp	r2, r3
 800288a:	d113      	bne.n	80028b4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002896:	085b      	lsrs	r3, r3, #1
 8002898:	3b01      	subs	r3, #1
 800289a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800289c:	429a      	cmp	r2, r3
 800289e:	d109      	bne.n	80028b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	085b      	lsrs	r3, r3, #1
 80028ac:	3b01      	subs	r3, #1
 80028ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d071      	beq.n	8002998 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2b0c      	cmp	r3, #12
 80028b8:	d068      	beq.n	800298c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028ba:	4b35      	ldr	r3, [pc, #212]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d105      	bne.n	80028d2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028c6:	4b32      	ldr	r3, [pc, #200]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e0ac      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028d6:	4b2e      	ldr	r3, [pc, #184]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a2d      	ldr	r2, [pc, #180]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 80028dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028e2:	f7fe feef 	bl	80016c4 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ea:	f7fe feeb 	bl	80016c4 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e099      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028fc:	4b24      	ldr	r3, [pc, #144]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f0      	bne.n	80028ea <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002908:	4b21      	ldr	r3, [pc, #132]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	4b21      	ldr	r3, [pc, #132]	; (8002994 <HAL_RCC_OscConfig+0x788>)
 800290e:	4013      	ands	r3, r2
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002918:	3a01      	subs	r2, #1
 800291a:	0112      	lsls	r2, r2, #4
 800291c:	4311      	orrs	r1, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002922:	0212      	lsls	r2, r2, #8
 8002924:	4311      	orrs	r1, r2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800292a:	0852      	lsrs	r2, r2, #1
 800292c:	3a01      	subs	r2, #1
 800292e:	0552      	lsls	r2, r2, #21
 8002930:	4311      	orrs	r1, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002936:	0852      	lsrs	r2, r2, #1
 8002938:	3a01      	subs	r2, #1
 800293a:	0652      	lsls	r2, r2, #25
 800293c:	4311      	orrs	r1, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002942:	06d2      	lsls	r2, r2, #27
 8002944:	430a      	orrs	r2, r1
 8002946:	4912      	ldr	r1, [pc, #72]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 8002948:	4313      	orrs	r3, r2
 800294a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800294c:	4b10      	ldr	r3, [pc, #64]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a0f      	ldr	r2, [pc, #60]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 8002952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002956:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002958:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 800295e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002962:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002964:	f7fe feae 	bl	80016c4 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296c:	f7fe feaa 	bl	80016c4 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e058      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297e:	4b04      	ldr	r3, [pc, #16]	; (8002990 <HAL_RCC_OscConfig+0x784>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800298a:	e050      	b.n	8002a2e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e04f      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
 8002990:	40021000 	.word	0x40021000
 8002994:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002998:	4b27      	ldr	r3, [pc, #156]	; (8002a38 <HAL_RCC_OscConfig+0x82c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d144      	bne.n	8002a2e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029a4:	4b24      	ldr	r3, [pc, #144]	; (8002a38 <HAL_RCC_OscConfig+0x82c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a23      	ldr	r2, [pc, #140]	; (8002a38 <HAL_RCC_OscConfig+0x82c>)
 80029aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029b0:	4b21      	ldr	r3, [pc, #132]	; (8002a38 <HAL_RCC_OscConfig+0x82c>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	4a20      	ldr	r2, [pc, #128]	; (8002a38 <HAL_RCC_OscConfig+0x82c>)
 80029b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029bc:	f7fe fe82 	bl	80016c4 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c4:	f7fe fe7e 	bl	80016c4 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e02c      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d6:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <HAL_RCC_OscConfig+0x82c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f0      	beq.n	80029c4 <HAL_RCC_OscConfig+0x7b8>
 80029e2:	e024      	b.n	8002a2e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	2b0c      	cmp	r3, #12
 80029e8:	d01f      	beq.n	8002a2a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ea:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <HAL_RCC_OscConfig+0x82c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a12      	ldr	r2, [pc, #72]	; (8002a38 <HAL_RCC_OscConfig+0x82c>)
 80029f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f6:	f7fe fe65 	bl	80016c4 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fe:	f7fe fe61 	bl	80016c4 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e00f      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <HAL_RCC_OscConfig+0x82c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1f0      	bne.n	80029fe <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_RCC_OscConfig+0x82c>)
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	4905      	ldr	r1, [pc, #20]	; (8002a38 <HAL_RCC_OscConfig+0x82c>)
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <HAL_RCC_OscConfig+0x830>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	60cb      	str	r3, [r1, #12]
 8002a28:	e001      	b.n	8002a2e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3720      	adds	r7, #32
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	feeefffc 	.word	0xfeeefffc

08002a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e11d      	b.n	8002c94 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a58:	4b90      	ldr	r3, [pc, #576]	; (8002c9c <HAL_RCC_ClockConfig+0x25c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d910      	bls.n	8002a88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b8d      	ldr	r3, [pc, #564]	; (8002c9c <HAL_RCC_ClockConfig+0x25c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 020f 	bic.w	r2, r3, #15
 8002a6e:	498b      	ldr	r1, [pc, #556]	; (8002c9c <HAL_RCC_ClockConfig+0x25c>)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b89      	ldr	r3, [pc, #548]	; (8002c9c <HAL_RCC_ClockConfig+0x25c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e105      	b.n	8002c94 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d010      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	4b81      	ldr	r3, [pc, #516]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d908      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa4:	4b7e      	ldr	r3, [pc, #504]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	497b      	ldr	r1, [pc, #492]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d079      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d11e      	bne.n	8002b08 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aca:	4b75      	ldr	r3, [pc, #468]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e0dc      	b.n	8002c94 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002ada:	f000 fa07 	bl	8002eec <RCC_GetSysClockFreqFromPLLSource>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	4a70      	ldr	r2, [pc, #448]	; (8002ca4 <HAL_RCC_ClockConfig+0x264>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d946      	bls.n	8002b74 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ae6:	4b6e      	ldr	r3, [pc, #440]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d140      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002af2:	4b6b      	ldr	r3, [pc, #428]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002afa:	4a69      	ldr	r2, [pc, #420]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	e035      	b.n	8002b74 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d107      	bne.n	8002b20 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b10:	4b63      	ldr	r3, [pc, #396]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d115      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0b9      	b.n	8002c94 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d107      	bne.n	8002b38 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b28:	4b5d      	ldr	r3, [pc, #372]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d109      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0ad      	b.n	8002c94 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b38:	4b59      	ldr	r3, [pc, #356]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0a5      	b.n	8002c94 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002b48:	f000 f8b4 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	4a55      	ldr	r2, [pc, #340]	; (8002ca4 <HAL_RCC_ClockConfig+0x264>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d90f      	bls.n	8002b74 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002b54:	4b52      	ldr	r3, [pc, #328]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d109      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b60:	4b4f      	ldr	r3, [pc, #316]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b68:	4a4d      	ldr	r2, [pc, #308]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b6e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b74:	4b4a      	ldr	r3, [pc, #296]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f023 0203 	bic.w	r2, r3, #3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	4947      	ldr	r1, [pc, #284]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b86:	f7fe fd9d 	bl	80016c4 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8e:	f7fe fd99 	bl	80016c4 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e077      	b.n	8002c94 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba4:	4b3e      	ldr	r3, [pc, #248]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 020c 	and.w	r2, r3, #12
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d1eb      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2b80      	cmp	r3, #128	; 0x80
 8002bba:	d105      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002bbc:	4b38      	ldr	r3, [pc, #224]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	4a37      	ldr	r2, [pc, #220]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002bc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bc6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d010      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	4b31      	ldr	r3, [pc, #196]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d208      	bcs.n	8002bf6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be4:	4b2e      	ldr	r3, [pc, #184]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	492b      	ldr	r1, [pc, #172]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf6:	4b29      	ldr	r3, [pc, #164]	; (8002c9c <HAL_RCC_ClockConfig+0x25c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d210      	bcs.n	8002c26 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c04:	4b25      	ldr	r3, [pc, #148]	; (8002c9c <HAL_RCC_ClockConfig+0x25c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f023 020f 	bic.w	r2, r3, #15
 8002c0c:	4923      	ldr	r1, [pc, #140]	; (8002c9c <HAL_RCC_ClockConfig+0x25c>)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c14:	4b21      	ldr	r3, [pc, #132]	; (8002c9c <HAL_RCC_ClockConfig+0x25c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 030f 	and.w	r3, r3, #15
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d001      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e036      	b.n	8002c94 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c32:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	4918      	ldr	r1, [pc, #96]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0308 	and.w	r3, r3, #8
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d009      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c50:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4910      	ldr	r1, [pc, #64]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c64:	f000 f826 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <HAL_RCC_ClockConfig+0x260>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	091b      	lsrs	r3, r3, #4
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	490c      	ldr	r1, [pc, #48]	; (8002ca8 <HAL_RCC_ClockConfig+0x268>)
 8002c76:	5ccb      	ldrb	r3, [r1, r3]
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c80:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <HAL_RCC_ClockConfig+0x26c>)
 8002c82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c84:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <HAL_RCC_ClockConfig+0x270>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe fccb 	bl	8001624 <HAL_InitTick>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	73fb      	strb	r3, [r7, #15]

  return status;
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40022000 	.word	0x40022000
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	04c4b400 	.word	0x04c4b400
 8002ca8:	0800b8a8 	.word	0x0800b8a8
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	20000004 	.word	0x20000004

08002cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b089      	sub	sp, #36	; 0x24
 8002cb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cc2:	4b3e      	ldr	r3, [pc, #248]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ccc:	4b3b      	ldr	r3, [pc, #236]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0303 	and.w	r3, r3, #3
 8002cd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	d121      	bne.n	8002d26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d11e      	bne.n	8002d26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ce8:	4b34      	ldr	r3, [pc, #208]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d107      	bne.n	8002d04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cf4:	4b31      	ldr	r3, [pc, #196]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfa:	0a1b      	lsrs	r3, r3, #8
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	e005      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d04:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d10:	4a2b      	ldr	r2, [pc, #172]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10d      	bne.n	8002d3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d24:	e00a      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d102      	bne.n	8002d32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d2c:	4b25      	ldr	r3, [pc, #148]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d2e:	61bb      	str	r3, [r7, #24]
 8002d30:	e004      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d101      	bne.n	8002d3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d38:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	2b0c      	cmp	r3, #12
 8002d40:	d134      	bne.n	8002dac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d42:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d003      	beq.n	8002d5a <HAL_RCC_GetSysClockFreq+0xa6>
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d003      	beq.n	8002d60 <HAL_RCC_GetSysClockFreq+0xac>
 8002d58:	e005      	b.n	8002d66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d5c:	617b      	str	r3, [r7, #20]
      break;
 8002d5e:	e005      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d60:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d62:	617b      	str	r3, [r7, #20]
      break;
 8002d64:	e002      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	617b      	str	r3, [r7, #20]
      break;
 8002d6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d6c:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	3301      	adds	r3, #1
 8002d78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d7a:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	0a1b      	lsrs	r3, r3, #8
 8002d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	fb03 f202 	mul.w	r2, r3, r2
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d92:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	0e5b      	lsrs	r3, r3, #25
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002daa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002dac:	69bb      	ldr	r3, [r7, #24]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3724      	adds	r7, #36	; 0x24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	0800b8c0 	.word	0x0800b8c0
 8002dc4:	00f42400 	.word	0x00f42400

08002dc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dcc:	4b03      	ldr	r3, [pc, #12]	; (8002ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dce:	681b      	ldr	r3, [r3, #0]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	20000000 	.word	0x20000000

08002de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002de4:	f7ff fff0 	bl	8002dc8 <HAL_RCC_GetHCLKFreq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	0a1b      	lsrs	r3, r3, #8
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	4904      	ldr	r1, [pc, #16]	; (8002e08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002df6:	5ccb      	ldrb	r3, [r1, r3]
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40021000 	.word	0x40021000
 8002e08:	0800b8b8 	.word	0x0800b8b8

08002e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e10:	f7ff ffda 	bl	8002dc8 <HAL_RCC_GetHCLKFreq>
 8002e14:	4602      	mov	r2, r0
 8002e16:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	0adb      	lsrs	r3, r3, #11
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	4904      	ldr	r1, [pc, #16]	; (8002e34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e22:	5ccb      	ldrb	r3, [r1, r3]
 8002e24:	f003 031f 	and.w	r3, r3, #31
 8002e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40021000 	.word	0x40021000
 8002e34:	0800b8b8 	.word	0x0800b8b8

08002e38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e40:	2300      	movs	r3, #0
 8002e42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e44:	4b27      	ldr	r3, [pc, #156]	; (8002ee4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e50:	f7ff f908 	bl	8002064 <HAL_PWREx_GetVoltageRange>
 8002e54:	6178      	str	r0, [r7, #20]
 8002e56:	e014      	b.n	8002e82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e58:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5c:	4a21      	ldr	r2, [pc, #132]	; (8002ee4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e62:	6593      	str	r3, [r2, #88]	; 0x58
 8002e64:	4b1f      	ldr	r3, [pc, #124]	; (8002ee4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e70:	f7ff f8f8 	bl	8002064 <HAL_PWREx_GetVoltageRange>
 8002e74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e76:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7a:	4a1a      	ldr	r2, [pc, #104]	; (8002ee4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e88:	d10b      	bne.n	8002ea2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b80      	cmp	r3, #128	; 0x80
 8002e8e:	d913      	bls.n	8002eb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2ba0      	cmp	r3, #160	; 0xa0
 8002e94:	d902      	bls.n	8002e9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e96:	2302      	movs	r3, #2
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	e00d      	b.n	8002eb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	e00a      	b.n	8002eb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b7f      	cmp	r3, #127	; 0x7f
 8002ea6:	d902      	bls.n	8002eae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	613b      	str	r3, [r7, #16]
 8002eac:	e004      	b.n	8002eb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b70      	cmp	r3, #112	; 0x70
 8002eb2:	d101      	bne.n	8002eb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f023 020f 	bic.w	r2, r3, #15
 8002ec0:	4909      	ldr	r1, [pc, #36]	; (8002ee8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ec8:	4b07      	ldr	r3, [pc, #28]	; (8002ee8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d001      	beq.n	8002eda <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40022000 	.word	0x40022000

08002eec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ef2:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	d00b      	beq.n	8002f1a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d825      	bhi.n	8002f54 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d008      	beq.n	8002f20 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d11f      	bne.n	8002f54 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002f14:	4b25      	ldr	r3, [pc, #148]	; (8002fac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f16:	613b      	str	r3, [r7, #16]
    break;
 8002f18:	e01f      	b.n	8002f5a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002f1a:	4b24      	ldr	r3, [pc, #144]	; (8002fac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f1c:	613b      	str	r3, [r7, #16]
    break;
 8002f1e:	e01c      	b.n	8002f5a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f20:	4b21      	ldr	r3, [pc, #132]	; (8002fa8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d107      	bne.n	8002f3c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f2c:	4b1e      	ldr	r3, [pc, #120]	; (8002fa8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f32:	0a1b      	lsrs	r3, r3, #8
 8002f34:	f003 030f 	and.w	r3, r3, #15
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	e005      	b.n	8002f48 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f3c:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	091b      	lsrs	r3, r3, #4
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002f48:	4a19      	ldr	r2, [pc, #100]	; (8002fb0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f50:	613b      	str	r3, [r7, #16]
    break;
 8002f52:	e002      	b.n	8002f5a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	613b      	str	r3, [r7, #16]
    break;
 8002f58:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f5a:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	091b      	lsrs	r3, r3, #4
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	3301      	adds	r3, #1
 8002f66:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f68:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	0a1b      	lsrs	r3, r3, #8
 8002f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	fb03 f202 	mul.w	r2, r3, r2
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f80:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	0e5b      	lsrs	r3, r3, #25
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f98:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002f9a:	683b      	ldr	r3, [r7, #0]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	371c      	adds	r7, #28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	00f42400 	.word	0x00f42400
 8002fb0:	0800b8c0 	.word	0x0800b8c0

08002fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d040      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fd4:	2b80      	cmp	r3, #128	; 0x80
 8002fd6:	d02a      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002fd8:	2b80      	cmp	r3, #128	; 0x80
 8002fda:	d825      	bhi.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002fdc:	2b60      	cmp	r3, #96	; 0x60
 8002fde:	d026      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002fe0:	2b60      	cmp	r3, #96	; 0x60
 8002fe2:	d821      	bhi.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002fe4:	2b40      	cmp	r3, #64	; 0x40
 8002fe6:	d006      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002fe8:	2b40      	cmp	r3, #64	; 0x40
 8002fea:	d81d      	bhi.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d009      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d010      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002ff4:	e018      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ff6:	4b89      	ldr	r3, [pc, #548]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	4a88      	ldr	r2, [pc, #544]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003000:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003002:	e015      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3304      	adds	r3, #4
 8003008:	2100      	movs	r1, #0
 800300a:	4618      	mov	r0, r3
 800300c:	f001 fa82 	bl	8004514 <RCCEx_PLLSAI1_Config>
 8003010:	4603      	mov	r3, r0
 8003012:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003014:	e00c      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3320      	adds	r3, #32
 800301a:	2100      	movs	r1, #0
 800301c:	4618      	mov	r0, r3
 800301e:	f001 fb6d 	bl	80046fc <RCCEx_PLLSAI2_Config>
 8003022:	4603      	mov	r3, r0
 8003024:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003026:	e003      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	74fb      	strb	r3, [r7, #19]
      break;
 800302c:	e000      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800302e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003030:	7cfb      	ldrb	r3, [r7, #19]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10b      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003036:	4b79      	ldr	r3, [pc, #484]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003038:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800303c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003044:	4975      	ldr	r1, [pc, #468]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800304c:	e001      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800304e:	7cfb      	ldrb	r3, [r7, #19]
 8003050:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d047      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003066:	d030      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800306c:	d82a      	bhi.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800306e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003072:	d02a      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003074:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003078:	d824      	bhi.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800307a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800307e:	d008      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003084:	d81e      	bhi.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00a      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800308a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800308e:	d010      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003090:	e018      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003092:	4b62      	ldr	r3, [pc, #392]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	4a61      	ldr	r2, [pc, #388]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800309e:	e015      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3304      	adds	r3, #4
 80030a4:	2100      	movs	r1, #0
 80030a6:	4618      	mov	r0, r3
 80030a8:	f001 fa34 	bl	8004514 <RCCEx_PLLSAI1_Config>
 80030ac:	4603      	mov	r3, r0
 80030ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030b0:	e00c      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3320      	adds	r3, #32
 80030b6:	2100      	movs	r1, #0
 80030b8:	4618      	mov	r0, r3
 80030ba:	f001 fb1f 	bl	80046fc <RCCEx_PLLSAI2_Config>
 80030be:	4603      	mov	r3, r0
 80030c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030c2:	e003      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	74fb      	strb	r3, [r7, #19]
      break;
 80030c8:	e000      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80030ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030cc:	7cfb      	ldrb	r3, [r7, #19]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10b      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030d2:	4b52      	ldr	r3, [pc, #328]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e0:	494e      	ldr	r1, [pc, #312]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80030e8:	e001      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ea:	7cfb      	ldrb	r3, [r7, #19]
 80030ec:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 809f 	beq.w	800323a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030fc:	2300      	movs	r3, #0
 80030fe:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003100:	4b46      	ldr	r3, [pc, #280]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003110:	2300      	movs	r3, #0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00d      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003116:	4b41      	ldr	r3, [pc, #260]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311a:	4a40      	ldr	r2, [pc, #256]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800311c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003120:	6593      	str	r3, [r2, #88]	; 0x58
 8003122:	4b3e      	ldr	r3, [pc, #248]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800312e:	2301      	movs	r3, #1
 8003130:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003132:	4b3b      	ldr	r3, [pc, #236]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a3a      	ldr	r2, [pc, #232]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800313e:	f7fe fac1 	bl	80016c4 <HAL_GetTick>
 8003142:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003144:	e009      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003146:	f7fe fabd 	bl	80016c4 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d902      	bls.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	74fb      	strb	r3, [r7, #19]
        break;
 8003158:	e005      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800315a:	4b31      	ldr	r3, [pc, #196]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0ef      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003166:	7cfb      	ldrb	r3, [r7, #19]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d15b      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800316c:	4b2b      	ldr	r3, [pc, #172]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003176:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d01f      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	429a      	cmp	r2, r3
 8003188:	d019      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800318a:	4b24      	ldr	r3, [pc, #144]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800318c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003194:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003196:	4b21      	ldr	r3, [pc, #132]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319c:	4a1f      	ldr	r2, [pc, #124]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800319e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031a6:	4b1d      	ldr	r3, [pc, #116]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ac:	4a1b      	ldr	r2, [pc, #108]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031b6:	4a19      	ldr	r2, [pc, #100]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d016      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fe fa7c 	bl	80016c4 <HAL_GetTick>
 80031cc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ce:	e00b      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d0:	f7fe fa78 	bl	80016c4 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	; 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d902      	bls.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	74fb      	strb	r3, [r7, #19]
            break;
 80031e6:	e006      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0ec      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80031f6:	7cfb      	ldrb	r3, [r7, #19]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10c      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031fc:	4b07      	ldr	r3, [pc, #28]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003202:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800320c:	4903      	ldr	r1, [pc, #12]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003214:	e008      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003216:	7cfb      	ldrb	r3, [r7, #19]
 8003218:	74bb      	strb	r3, [r7, #18]
 800321a:	e005      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800321c:	40021000 	.word	0x40021000
 8003220:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003224:	7cfb      	ldrb	r3, [r7, #19]
 8003226:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003228:	7c7b      	ldrb	r3, [r7, #17]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d105      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800322e:	4ba0      	ldr	r3, [pc, #640]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003232:	4a9f      	ldr	r2, [pc, #636]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003238:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003246:	4b9a      	ldr	r3, [pc, #616]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324c:	f023 0203 	bic.w	r2, r3, #3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003254:	4996      	ldr	r1, [pc, #600]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00a      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003268:	4b91      	ldr	r3, [pc, #580]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	f023 020c 	bic.w	r2, r3, #12
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	498e      	ldr	r1, [pc, #568]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800328a:	4b89      	ldr	r3, [pc, #548]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800328c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003290:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	4985      	ldr	r1, [pc, #532]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00a      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032ac:	4b80      	ldr	r3, [pc, #512]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ba:	497d      	ldr	r1, [pc, #500]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032ce:	4b78      	ldr	r3, [pc, #480]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032dc:	4974      	ldr	r1, [pc, #464]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00a      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032f0:	4b6f      	ldr	r3, [pc, #444]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032fe:	496c      	ldr	r1, [pc, #432]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003312:	4b67      	ldr	r3, [pc, #412]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003318:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003320:	4963      	ldr	r1, [pc, #396]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00a      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003334:	4b5e      	ldr	r3, [pc, #376]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003342:	495b      	ldr	r1, [pc, #364]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003356:	4b56      	ldr	r3, [pc, #344]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003364:	4952      	ldr	r1, [pc, #328]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003378:	4b4d      	ldr	r3, [pc, #308]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003386:	494a      	ldr	r1, [pc, #296]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800339a:	4b45      	ldr	r3, [pc, #276]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a8:	4941      	ldr	r1, [pc, #260]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033bc:	4b3c      	ldr	r3, [pc, #240]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033c2:	f023 0203 	bic.w	r2, r3, #3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ca:	4939      	ldr	r1, [pc, #228]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d028      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033de:	4b34      	ldr	r3, [pc, #208]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ec:	4930      	ldr	r1, [pc, #192]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033fc:	d106      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033fe:	4b2c      	ldr	r3, [pc, #176]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	4a2b      	ldr	r2, [pc, #172]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003408:	60d3      	str	r3, [r2, #12]
 800340a:	e011      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003410:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003414:	d10c      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3304      	adds	r3, #4
 800341a:	2101      	movs	r1, #1
 800341c:	4618      	mov	r0, r3
 800341e:	f001 f879 	bl	8004514 <RCCEx_PLLSAI1_Config>
 8003422:	4603      	mov	r3, r0
 8003424:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003426:	7cfb      	ldrb	r3, [r7, #19]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800342c:	7cfb      	ldrb	r3, [r7, #19]
 800342e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d04d      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003440:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003444:	d108      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003446:	4b1a      	ldr	r3, [pc, #104]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003448:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800344c:	4a18      	ldr	r2, [pc, #96]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800344e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003452:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003456:	e012      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003458:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800345a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800345e:	4a14      	ldr	r2, [pc, #80]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003460:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003464:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003468:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003476:	490e      	ldr	r1, [pc, #56]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003482:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003486:	d106      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003488:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	4a08      	ldr	r2, [pc, #32]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800348e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003492:	60d3      	str	r3, [r2, #12]
 8003494:	e020      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800349a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800349e:	d109      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034a0:	4b03      	ldr	r3, [pc, #12]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4a02      	ldr	r2, [pc, #8]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034aa:	60d3      	str	r3, [r2, #12]
 80034ac:	e014      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80034ae:	bf00      	nop
 80034b0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034bc:	d10c      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3304      	adds	r3, #4
 80034c2:	2101      	movs	r1, #1
 80034c4:	4618      	mov	r0, r3
 80034c6:	f001 f825 	bl	8004514 <RCCEx_PLLSAI1_Config>
 80034ca:	4603      	mov	r3, r0
 80034cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034ce:	7cfb      	ldrb	r3, [r7, #19]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80034d4:	7cfb      	ldrb	r3, [r7, #19]
 80034d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d028      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034e4:	4b7a      	ldr	r3, [pc, #488]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034f2:	4977      	ldr	r1, [pc, #476]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003502:	d106      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003504:	4b72      	ldr	r3, [pc, #456]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4a71      	ldr	r2, [pc, #452]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800350a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800350e:	60d3      	str	r3, [r2, #12]
 8003510:	e011      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003516:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800351a:	d10c      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3304      	adds	r3, #4
 8003520:	2101      	movs	r1, #1
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fff6 	bl	8004514 <RCCEx_PLLSAI1_Config>
 8003528:	4603      	mov	r3, r0
 800352a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800352c:	7cfb      	ldrb	r3, [r7, #19]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003532:	7cfb      	ldrb	r3, [r7, #19]
 8003534:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01e      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003542:	4b63      	ldr	r3, [pc, #396]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003548:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003552:	495f      	ldr	r1, [pc, #380]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003560:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003564:	d10c      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3304      	adds	r3, #4
 800356a:	2102      	movs	r1, #2
 800356c:	4618      	mov	r0, r3
 800356e:	f000 ffd1 	bl	8004514 <RCCEx_PLLSAI1_Config>
 8003572:	4603      	mov	r3, r0
 8003574:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003576:	7cfb      	ldrb	r3, [r7, #19]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800357c:	7cfb      	ldrb	r3, [r7, #19]
 800357e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00b      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800358c:	4b50      	ldr	r3, [pc, #320]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800358e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003592:	f023 0204 	bic.w	r2, r3, #4
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800359c:	494c      	ldr	r1, [pc, #304]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00b      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80035b0:	4b47      	ldr	r3, [pc, #284]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80035b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035b6:	f023 0218 	bic.w	r2, r3, #24
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c0:	4943      	ldr	r1, [pc, #268]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d035      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80035d4:	4b3e      	ldr	r3, [pc, #248]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a3d      	ldr	r2, [pc, #244]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80035da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e0:	f7fe f870 	bl	80016c4 <HAL_GetTick>
 80035e4:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035e6:	e009      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035e8:	f7fe f86c 	bl	80016c4 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d902      	bls.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	74fb      	strb	r3, [r7, #19]
        break;
 80035fa:	e005      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035fc:	4b34      	ldr	r3, [pc, #208]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1ef      	bne.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8003608:	7cfb      	ldrb	r3, [r7, #19]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d113      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800360e:	4b30      	ldr	r3, [pc, #192]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003610:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003614:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800361e:	492c      	ldr	r1, [pc, #176]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3320      	adds	r3, #32
 800362a:	2102      	movs	r1, #2
 800362c:	4618      	mov	r0, r3
 800362e:	f001 f865 	bl	80046fc <RCCEx_PLLSAI2_Config>
 8003632:	4603      	mov	r3, r0
 8003634:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8003636:	7cfb      	ldrb	r3, [r7, #19]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800363c:	7cfb      	ldrb	r3, [r7, #19]
 800363e:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01e      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800364c:	4b20      	ldr	r3, [pc, #128]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800364e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003652:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365c:	491c      	ldr	r1, [pc, #112]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800366e:	d10c      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3320      	adds	r3, #32
 8003674:	2101      	movs	r1, #1
 8003676:	4618      	mov	r0, r3
 8003678:	f001 f840 	bl	80046fc <RCCEx_PLLSAI2_Config>
 800367c:	4603      	mov	r3, r0
 800367e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003680:	7cfb      	ldrb	r3, [r7, #19]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8003686:	7cfb      	ldrb	r3, [r7, #19]
 8003688:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d017      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003696:	4b0e      	ldr	r3, [pc, #56]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003698:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800369c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036a6:	490a      	ldr	r1, [pc, #40]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036b8:	d105      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ba:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	4a04      	ldr	r2, [pc, #16]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036c4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40021000 	.word	0x40021000

080036d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b088      	sub	sp, #32
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036e6:	d13e      	bne.n	8003766 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80036e8:	4bb6      	ldr	r3, [pc, #728]	; (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f2:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036fa:	d028      	beq.n	800374e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003702:	f200 86f2 	bhi.w	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800370c:	d005      	beq.n	800371a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003714:	d00e      	beq.n	8003734 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003716:	f000 bee8 	b.w	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800371a:	4baa      	ldr	r3, [pc, #680]	; (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800371c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b02      	cmp	r3, #2
 8003726:	f040 86e2 	bne.w	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 800372a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800372e:	61fb      	str	r3, [r7, #28]
      break;
 8003730:	f000 bedd 	b.w	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003734:	4ba3      	ldr	r3, [pc, #652]	; (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b02      	cmp	r3, #2
 8003740:	f040 86d7 	bne.w	80044f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8003744:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003748:	61fb      	str	r3, [r7, #28]
      break;
 800374a:	f000 bed2 	b.w	80044f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800374e:	4b9d      	ldr	r3, [pc, #628]	; (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800375a:	f040 86cc 	bne.w	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 800375e:	4b9a      	ldr	r3, [pc, #616]	; (80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003760:	61fb      	str	r3, [r7, #28]
      break;
 8003762:	f000 bec8 	b.w	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003766:	4b97      	ldr	r3, [pc, #604]	; (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d036      	beq.n	80037e4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b03      	cmp	r3, #3
 800377a:	d840      	bhi.n	80037fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d003      	beq.n	800378a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	2b02      	cmp	r3, #2
 8003786:	d020      	beq.n	80037ca <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003788:	e039      	b.n	80037fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800378a:	4b8e      	ldr	r3, [pc, #568]	; (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b02      	cmp	r3, #2
 8003794:	d116      	bne.n	80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003796:	4b8b      	ldr	r3, [pc, #556]	; (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d005      	beq.n	80037ae <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80037a2:	4b88      	ldr	r3, [pc, #544]	; (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	091b      	lsrs	r3, r3, #4
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	e005      	b.n	80037ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80037ae:	4b85      	ldr	r3, [pc, #532]	; (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80037b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037b4:	0a1b      	lsrs	r3, r3, #8
 80037b6:	f003 030f 	and.w	r3, r3, #15
 80037ba:	4a84      	ldr	r2, [pc, #528]	; (80039cc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80037bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80037c2:	e01f      	b.n	8003804 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	61bb      	str	r3, [r7, #24]
      break;
 80037c8:	e01c      	b.n	8003804 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80037ca:	4b7e      	ldr	r3, [pc, #504]	; (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d6:	d102      	bne.n	80037de <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80037d8:	4b7d      	ldr	r3, [pc, #500]	; (80039d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80037da:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80037dc:	e012      	b.n	8003804 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	61bb      	str	r3, [r7, #24]
      break;
 80037e2:	e00f      	b.n	8003804 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80037e4:	4b77      	ldr	r3, [pc, #476]	; (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037f0:	d102      	bne.n	80037f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80037f2:	4b77      	ldr	r3, [pc, #476]	; (80039d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80037f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80037f6:	e005      	b.n	8003804 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	61bb      	str	r3, [r7, #24]
      break;
 80037fc:	e002      	b.n	8003804 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	61bb      	str	r3, [r7, #24]
      break;
 8003802:	bf00      	nop
    }

    switch(PeriphClk)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800380a:	f000 8604 	beq.w	8004416 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003814:	f200 8671 	bhi.w	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800381e:	f000 8467 	beq.w	80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003828:	f200 8667 	bhi.w	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003832:	f000 852f 	beq.w	8004294 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800383c:	f200 865d 	bhi.w	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003846:	f000 8185 	beq.w	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003850:	f200 8653 	bhi.w	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800385a:	f000 80cb 	beq.w	80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003864:	f200 8649 	bhi.w	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800386e:	f000 842e 	beq.w	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003878:	f200 863f 	bhi.w	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003882:	f000 83e2 	beq.w	800404a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800388c:	f200 8635 	bhi.w	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003896:	f000 80ad 	beq.w	80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a0:	f200 862b 	bhi.w	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038aa:	f000 809b 	beq.w	80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b4:	f200 8621 	bhi.w	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038be:	f000 8089 	beq.w	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c8:	f200 8617 	bhi.w	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d2:	f000 8552 	beq.w	800437a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038dc:	f200 860d 	bhi.w	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e6:	f000 84fe 	beq.w	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f0:	f200 8603 	bhi.w	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fa:	f000 849f 	beq.w	800423c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003904:	f200 85f9 	bhi.w	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b80      	cmp	r3, #128	; 0x80
 800390c:	f000 846a 	beq.w	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b80      	cmp	r3, #128	; 0x80
 8003914:	f200 85f1 	bhi.w	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b20      	cmp	r3, #32
 800391c:	d84c      	bhi.n	80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 85ea 	beq.w	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3b01      	subs	r3, #1
 800392a:	2b1f      	cmp	r3, #31
 800392c:	f200 85e5 	bhi.w	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003930:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8003932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003936:	bf00      	nop
 8003938:	08003d49 	.word	0x08003d49
 800393c:	08003db7 	.word	0x08003db7
 8003940:	080044fb 	.word	0x080044fb
 8003944:	08003e4b 	.word	0x08003e4b
 8003948:	080044fb 	.word	0x080044fb
 800394c:	080044fb 	.word	0x080044fb
 8003950:	080044fb 	.word	0x080044fb
 8003954:	08003ec3 	.word	0x08003ec3
 8003958:	080044fb 	.word	0x080044fb
 800395c:	080044fb 	.word	0x080044fb
 8003960:	080044fb 	.word	0x080044fb
 8003964:	080044fb 	.word	0x080044fb
 8003968:	080044fb 	.word	0x080044fb
 800396c:	080044fb 	.word	0x080044fb
 8003970:	080044fb 	.word	0x080044fb
 8003974:	08003f47 	.word	0x08003f47
 8003978:	080044fb 	.word	0x080044fb
 800397c:	080044fb 	.word	0x080044fb
 8003980:	080044fb 	.word	0x080044fb
 8003984:	080044fb 	.word	0x080044fb
 8003988:	080044fb 	.word	0x080044fb
 800398c:	080044fb 	.word	0x080044fb
 8003990:	080044fb 	.word	0x080044fb
 8003994:	080044fb 	.word	0x080044fb
 8003998:	080044fb 	.word	0x080044fb
 800399c:	080044fb 	.word	0x080044fb
 80039a0:	080044fb 	.word	0x080044fb
 80039a4:	080044fb 	.word	0x080044fb
 80039a8:	080044fb 	.word	0x080044fb
 80039ac:	080044fb 	.word	0x080044fb
 80039b0:	080044fb 	.word	0x080044fb
 80039b4:	08003fc9 	.word	0x08003fc9
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b40      	cmp	r3, #64	; 0x40
 80039bc:	f000 83e6 	beq.w	800418c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80039c0:	f000 bd9b 	b.w	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80039c4:	40021000 	.word	0x40021000
 80039c8:	0007a120 	.word	0x0007a120
 80039cc:	0800b8c0 	.word	0x0800b8c0
 80039d0:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80039d4:	69b9      	ldr	r1, [r7, #24]
 80039d6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80039da:	f000 ff83 	bl	80048e4 <RCCEx_GetSAIxPeriphCLKFreq>
 80039de:	61f8      	str	r0, [r7, #28]
      break;
 80039e0:	f000 bd8e 	b.w	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80039e4:	69b9      	ldr	r1, [r7, #24]
 80039e6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80039ea:	f000 ff7b 	bl	80048e4 <RCCEx_GetSAIxPeriphCLKFreq>
 80039ee:	61f8      	str	r0, [r7, #28]
      break;
 80039f0:	f000 bd86 	b.w	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80039f4:	4b9a      	ldr	r3, [pc, #616]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fa:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003a06:	d015      	beq.n	8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003a0e:	f200 8092 	bhi.w	8003b36 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a18:	d029      	beq.n	8003a6e <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a20:	f200 8089 	bhi.w	8003b36 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d07b      	beq.n	8003b22 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a30:	d04a      	beq.n	8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8003a32:	e080      	b.n	8003b36 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003a34:	4b8a      	ldr	r3, [pc, #552]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d17d      	bne.n	8003b3c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003a40:	4b87      	ldr	r3, [pc, #540]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8003a4c:	4b84      	ldr	r3, [pc, #528]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	091b      	lsrs	r3, r3, #4
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	e005      	b.n	8003a64 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8003a58:	4b81      	ldr	r3, [pc, #516]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a5e:	0a1b      	lsrs	r3, r3, #8
 8003a60:	f003 030f 	and.w	r3, r3, #15
 8003a64:	4a7f      	ldr	r2, [pc, #508]	; (8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a6a:	61fb      	str	r3, [r7, #28]
          break;
 8003a6c:	e066      	b.n	8003b3c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003a6e:	4b7c      	ldr	r3, [pc, #496]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a7a:	d162      	bne.n	8003b42 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003a7c:	4b78      	ldr	r3, [pc, #480]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a88:	d15b      	bne.n	8003b42 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003a8a:	4b75      	ldr	r3, [pc, #468]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	0a1b      	lsrs	r3, r3, #8
 8003a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a94:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	fb03 f202 	mul.w	r2, r3, r2
 8003a9e:	4b70      	ldr	r3, [pc, #448]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	091b      	lsrs	r3, r3, #4
 8003aa4:	f003 030f 	and.w	r3, r3, #15
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aae:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003ab0:	4b6b      	ldr	r3, [pc, #428]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	0d5b      	lsrs	r3, r3, #21
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	3301      	adds	r3, #1
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac4:	61fb      	str	r3, [r7, #28]
          break;
 8003ac6:	e03c      	b.n	8003b42 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003ac8:	4b65      	ldr	r3, [pc, #404]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ad0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ad4:	d138      	bne.n	8003b48 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003ad6:	4b62      	ldr	r3, [pc, #392]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ade:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ae2:	d131      	bne.n	8003b48 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003ae4:	4b5e      	ldr	r3, [pc, #376]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	0a1b      	lsrs	r3, r3, #8
 8003aea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aee:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	fb03 f202 	mul.w	r2, r3, r2
 8003af8:	4b59      	ldr	r3, [pc, #356]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	091b      	lsrs	r3, r3, #4
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	3301      	adds	r3, #1
 8003b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b08:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003b0a:	4b55      	ldr	r3, [pc, #340]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	0d5b      	lsrs	r3, r3, #21
 8003b10:	f003 0303 	and.w	r3, r3, #3
 8003b14:	3301      	adds	r3, #1
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1e:	61fb      	str	r3, [r7, #28]
          break;
 8003b20:	e012      	b.n	8003b48 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003b22:	4b4f      	ldr	r3, [pc, #316]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d10e      	bne.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8003b30:	4b4d      	ldr	r3, [pc, #308]	; (8003c68 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8003b32:	61fb      	str	r3, [r7, #28]
          break;
 8003b34:	e00b      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8003b36:	bf00      	nop
 8003b38:	f000 bce2 	b.w	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003b3c:	bf00      	nop
 8003b3e:	f000 bcdf 	b.w	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003b42:	bf00      	nop
 8003b44:	f000 bcdc 	b.w	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003b48:	bf00      	nop
 8003b4a:	f000 bcd9 	b.w	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003b4e:	bf00      	nop
        break;
 8003b50:	f000 bcd6 	b.w	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8003b54:	4b42      	ldr	r3, [pc, #264]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b62:	d13d      	bne.n	8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003b64:	4b3e      	ldr	r3, [pc, #248]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b70:	f040 84c5 	bne.w	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8003b74:	4b3a      	ldr	r3, [pc, #232]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b80:	f040 84bd 	bne.w	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003b84:	4b36      	ldr	r3, [pc, #216]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	0a1b      	lsrs	r3, r3, #8
 8003b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b8e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	fb03 f202 	mul.w	r2, r3, r2
 8003b98:	4b31      	ldr	r3, [pc, #196]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba8:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8003baa:	4b2d      	ldr	r3, [pc, #180]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	0edb      	lsrs	r3, r3, #27
 8003bb0:	f003 031f 	and.w	r3, r3, #31
 8003bb4:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10a      	bne.n	8003bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003bbc:	4b28      	ldr	r3, [pc, #160]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8003bc8:	2311      	movs	r3, #17
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	e001      	b.n	8003bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 8003bce:	2307      	movs	r3, #7
 8003bd0:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bda:	61fb      	str	r3, [r7, #28]
      break;
 8003bdc:	f000 bc8f 	b.w	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003be0:	4b1f      	ldr	r3, [pc, #124]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003bf2:	d016      	beq.n	8003c22 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003bfa:	f200 809b 	bhi.w	8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c04:	d032      	beq.n	8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c0c:	f200 8092 	bhi.w	8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 8084 	beq.w	8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c1e:	d052      	beq.n	8003cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8003c20:	e088      	b.n	8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003c22:	4b0f      	ldr	r3, [pc, #60]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	f040 8084 	bne.w	8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003c30:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d005      	beq.n	8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8003c3c:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	091b      	lsrs	r3, r3, #4
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	e005      	b.n	8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8003c48:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c4e:	0a1b      	lsrs	r3, r3, #8
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	4a03      	ldr	r2, [pc, #12]	; (8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c5a:	61fb      	str	r3, [r7, #28]
          break;
 8003c5c:	e06c      	b.n	8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8003c5e:	bf00      	nop
 8003c60:	40021000 	.word	0x40021000
 8003c64:	0800b8c0 	.word	0x0800b8c0
 8003c68:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003c6c:	4ba5      	ldr	r3, [pc, #660]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c78:	d160      	bne.n	8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003c7a:	4ba2      	ldr	r3, [pc, #648]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c86:	d159      	bne.n	8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003c88:	4b9e      	ldr	r3, [pc, #632]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	0a1b      	lsrs	r3, r3, #8
 8003c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c92:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	fb03 f202 	mul.w	r2, r3, r2
 8003c9c:	4b99      	ldr	r3, [pc, #612]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	091b      	lsrs	r3, r3, #4
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cac:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003cae:	4b95      	ldr	r3, [pc, #596]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	0d5b      	lsrs	r3, r3, #21
 8003cb4:	f003 0303 	and.w	r3, r3, #3
 8003cb8:	3301      	adds	r3, #1
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc2:	61fb      	str	r3, [r7, #28]
          break;
 8003cc4:	e03a      	b.n	8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003cc6:	4b8f      	ldr	r3, [pc, #572]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cd2:	d135      	bne.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003cd4:	4b8b      	ldr	r3, [pc, #556]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ce0:	d12e      	bne.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003ce2:	4b88      	ldr	r3, [pc, #544]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	0a1b      	lsrs	r3, r3, #8
 8003ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cec:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	fb03 f202 	mul.w	r2, r3, r2
 8003cf6:	4b83      	ldr	r3, [pc, #524]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	091b      	lsrs	r3, r3, #4
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	3301      	adds	r3, #1
 8003d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d06:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003d08:	4b7e      	ldr	r3, [pc, #504]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	0d5b      	lsrs	r3, r3, #21
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	3301      	adds	r3, #1
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1c:	61fb      	str	r3, [r7, #28]
          break;
 8003d1e:	e00f      	b.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003d20:	4b78      	ldr	r3, [pc, #480]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003d22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d10a      	bne.n	8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 8003d2e:	4b76      	ldr	r3, [pc, #472]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8003d30:	61fb      	str	r3, [r7, #28]
          break;
 8003d32:	e007      	b.n	8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8003d34:	bf00      	nop
 8003d36:	e3e2      	b.n	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003d38:	bf00      	nop
 8003d3a:	e3e0      	b.n	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003d3c:	bf00      	nop
 8003d3e:	e3de      	b.n	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003d40:	bf00      	nop
 8003d42:	e3dc      	b.n	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003d44:	bf00      	nop
      break;
 8003d46:	e3da      	b.n	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003d48:	4b6e      	ldr	r3, [pc, #440]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d827      	bhi.n	8003daa <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8003d5a:	a201      	add	r2, pc, #4	; (adr r2, 8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8003d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d60:	08003d71 	.word	0x08003d71
 8003d64:	08003d79 	.word	0x08003d79
 8003d68:	08003d81 	.word	0x08003d81
 8003d6c:	08003d95 	.word	0x08003d95
          frequency = HAL_RCC_GetPCLK2Freq();
 8003d70:	f7ff f84c 	bl	8002e0c <HAL_RCC_GetPCLK2Freq>
 8003d74:	61f8      	str	r0, [r7, #28]
          break;
 8003d76:	e01d      	b.n	8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003d78:	f7fe ff9c 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8003d7c:	61f8      	str	r0, [r7, #28]
          break;
 8003d7e:	e019      	b.n	8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d80:	4b60      	ldr	r3, [pc, #384]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d8c:	d10f      	bne.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8003d8e:	4b5f      	ldr	r3, [pc, #380]	; (8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8003d90:	61fb      	str	r3, [r7, #28]
          break;
 8003d92:	e00c      	b.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003d94:	4b5b      	ldr	r3, [pc, #364]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d107      	bne.n	8003db2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 8003da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003da6:	61fb      	str	r3, [r7, #28]
          break;
 8003da8:	e003      	b.n	8003db2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8003daa:	bf00      	nop
 8003dac:	e3a8      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003dae:	bf00      	nop
 8003db0:	e3a6      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003db2:	bf00      	nop
        break;
 8003db4:	e3a4      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003db6:	4b53      	ldr	r3, [pc, #332]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbc:	f003 030c 	and.w	r3, r3, #12
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b0c      	cmp	r3, #12
 8003dc6:	d83a      	bhi.n	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8003dc8:	a201      	add	r2, pc, #4	; (adr r2, 8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8003dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dce:	bf00      	nop
 8003dd0:	08003e05 	.word	0x08003e05
 8003dd4:	08003e3f 	.word	0x08003e3f
 8003dd8:	08003e3f 	.word	0x08003e3f
 8003ddc:	08003e3f 	.word	0x08003e3f
 8003de0:	08003e0d 	.word	0x08003e0d
 8003de4:	08003e3f 	.word	0x08003e3f
 8003de8:	08003e3f 	.word	0x08003e3f
 8003dec:	08003e3f 	.word	0x08003e3f
 8003df0:	08003e15 	.word	0x08003e15
 8003df4:	08003e3f 	.word	0x08003e3f
 8003df8:	08003e3f 	.word	0x08003e3f
 8003dfc:	08003e3f 	.word	0x08003e3f
 8003e00:	08003e29 	.word	0x08003e29
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e04:	f7fe ffec 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 8003e08:	61f8      	str	r0, [r7, #28]
          break;
 8003e0a:	e01d      	b.n	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8003e0c:	f7fe ff52 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8003e10:	61f8      	str	r0, [r7, #28]
          break;
 8003e12:	e019      	b.n	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e14:	4b3b      	ldr	r3, [pc, #236]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e20:	d10f      	bne.n	8003e42 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 8003e22:	4b3a      	ldr	r3, [pc, #232]	; (8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8003e24:	61fb      	str	r3, [r7, #28]
          break;
 8003e26:	e00c      	b.n	8003e42 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003e28:	4b36      	ldr	r3, [pc, #216]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d107      	bne.n	8003e46 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 8003e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e3a:	61fb      	str	r3, [r7, #28]
          break;
 8003e3c:	e003      	b.n	8003e46 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 8003e3e:	bf00      	nop
 8003e40:	e35e      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003e42:	bf00      	nop
 8003e44:	e35c      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003e46:	bf00      	nop
        break;
 8003e48:	e35a      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003e4a:	4b2e      	ldr	r3, [pc, #184]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b30      	cmp	r3, #48	; 0x30
 8003e5a:	d021      	beq.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2b30      	cmp	r3, #48	; 0x30
 8003e60:	d829      	bhi.n	8003eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d011      	beq.n	8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2b20      	cmp	r3, #32
 8003e6c:	d823      	bhi.n	8003eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b10      	cmp	r3, #16
 8003e78:	d004      	beq.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 8003e7a:	e01c      	b.n	8003eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e7c:	f7fe ffb0 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 8003e80:	61f8      	str	r0, [r7, #28]
          break;
 8003e82:	e01d      	b.n	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8003e84:	f7fe ff16 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8003e88:	61f8      	str	r0, [r7, #28]
          break;
 8003e8a:	e019      	b.n	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e8c:	4b1d      	ldr	r3, [pc, #116]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e98:	d10f      	bne.n	8003eba <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 8003e9a:	4b1c      	ldr	r3, [pc, #112]	; (8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8003e9c:	61fb      	str	r3, [r7, #28]
          break;
 8003e9e:	e00c      	b.n	8003eba <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003ea0:	4b18      	ldr	r3, [pc, #96]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d107      	bne.n	8003ebe <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 8003eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb2:	61fb      	str	r3, [r7, #28]
          break;
 8003eb4:	e003      	b.n	8003ebe <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 8003eb6:	bf00      	nop
 8003eb8:	e322      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003eba:	bf00      	nop
 8003ebc:	e320      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003ebe:	bf00      	nop
        break;
 8003ec0:	e31e      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003ec2:	4b10      	ldr	r3, [pc, #64]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2bc0      	cmp	r3, #192	; 0xc0
 8003ed2:	d027      	beq.n	8003f24 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ed8:	d82f      	bhi.n	8003f3a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b80      	cmp	r3, #128	; 0x80
 8003ede:	d017      	beq.n	8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b80      	cmp	r3, #128	; 0x80
 8003ee4:	d829      	bhi.n	8003f3a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b40      	cmp	r3, #64	; 0x40
 8003ef0:	d004      	beq.n	8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 8003ef2:	e022      	b.n	8003f3a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003ef4:	f7fe ff74 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 8003ef8:	61f8      	str	r0, [r7, #28]
          break;
 8003efa:	e023      	b.n	8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 8003efc:	f7fe feda 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8003f00:	61f8      	str	r0, [r7, #28]
          break;
 8003f02:	e01f      	b.n	8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8003f04:	40021000 	.word	0x40021000
 8003f08:	02dc6c00 	.word	0x02dc6c00
 8003f0c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f10:	4b9b      	ldr	r3, [pc, #620]	; (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1c:	d10f      	bne.n	8003f3e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 8003f1e:	4b99      	ldr	r3, [pc, #612]	; (8004184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8003f20:	61fb      	str	r3, [r7, #28]
          break;
 8003f22:	e00c      	b.n	8003f3e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f24:	4b96      	ldr	r3, [pc, #600]	; (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d107      	bne.n	8003f42 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 8003f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f36:	61fb      	str	r3, [r7, #28]
          break;
 8003f38:	e003      	b.n	8003f42 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8003f3a:	bf00      	nop
 8003f3c:	e2e0      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003f3e:	bf00      	nop
 8003f40:	e2de      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003f42:	bf00      	nop
        break;
 8003f44:	e2dc      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003f46:	4b8e      	ldr	r3, [pc, #568]	; (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f58:	d025      	beq.n	8003fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f60:	d82c      	bhi.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f68:	d013      	beq.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f70:	d824      	bhi.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d004      	beq.n	8003f82 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f7e:	d004      	beq.n	8003f8a <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8003f80:	e01c      	b.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f82:	f7fe ff2d 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 8003f86:	61f8      	str	r0, [r7, #28]
          break;
 8003f88:	e01d      	b.n	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8003f8a:	f7fe fe93 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8003f8e:	61f8      	str	r0, [r7, #28]
          break;
 8003f90:	e019      	b.n	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f92:	4b7b      	ldr	r3, [pc, #492]	; (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f9e:	d10f      	bne.n	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8003fa0:	4b78      	ldr	r3, [pc, #480]	; (8004184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8003fa2:	61fb      	str	r3, [r7, #28]
          break;
 8003fa4:	e00c      	b.n	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003fa6:	4b76      	ldr	r3, [pc, #472]	; (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d107      	bne.n	8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8003fb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fb8:	61fb      	str	r3, [r7, #28]
          break;
 8003fba:	e003      	b.n	8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8003fbc:	bf00      	nop
 8003fbe:	e29f      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003fc0:	bf00      	nop
 8003fc2:	e29d      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003fc4:	bf00      	nop
        break;
 8003fc6:	e29b      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003fc8:	4b6d      	ldr	r3, [pc, #436]	; (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fda:	d025      	beq.n	8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fe2:	d82c      	bhi.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fea:	d013      	beq.n	8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ff2:	d824      	bhi.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d004      	beq.n	8004004 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004000:	d004      	beq.n	800400c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8004002:	e01c      	b.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004004:	f7fe feec 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 8004008:	61f8      	str	r0, [r7, #28]
          break;
 800400a:	e01d      	b.n	8004048 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 800400c:	f7fe fe52 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8004010:	61f8      	str	r0, [r7, #28]
          break;
 8004012:	e019      	b.n	8004048 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004014:	4b5a      	ldr	r3, [pc, #360]	; (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004020:	d10f      	bne.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 8004022:	4b58      	ldr	r3, [pc, #352]	; (8004184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004024:	61fb      	str	r3, [r7, #28]
          break;
 8004026:	e00c      	b.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004028:	4b55      	ldr	r3, [pc, #340]	; (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b02      	cmp	r3, #2
 8004034:	d107      	bne.n	8004046 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 8004036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800403a:	61fb      	str	r3, [r7, #28]
          break;
 800403c:	e003      	b.n	8004046 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 800403e:	bf00      	nop
 8004040:	e25e      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004042:	bf00      	nop
 8004044:	e25c      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004046:	bf00      	nop
        break;
 8004048:	e25a      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800404a:	4b4d      	ldr	r3, [pc, #308]	; (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004050:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800405c:	d007      	beq.n	800406e <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004064:	d12f      	bne.n	80040c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8004066:	f7fe fe25 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 800406a:	61f8      	str	r0, [r7, #28]
          break;
 800406c:	e02e      	b.n	80040cc <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800406e:	4b44      	ldr	r3, [pc, #272]	; (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004076:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800407a:	d126      	bne.n	80040ca <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 800407c:	4b40      	ldr	r3, [pc, #256]	; (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d020      	beq.n	80040ca <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004088:	4b3d      	ldr	r3, [pc, #244]	; (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	0a1b      	lsrs	r3, r3, #8
 800408e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004092:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	fb03 f202 	mul.w	r2, r3, r2
 800409c:	4b38      	ldr	r3, [pc, #224]	; (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	091b      	lsrs	r3, r3, #4
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	3301      	adds	r3, #1
 80040a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ac:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80040ae:	4b34      	ldr	r3, [pc, #208]	; (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	0e5b      	lsrs	r3, r3, #25
 80040b4:	f003 0303 	and.w	r3, r3, #3
 80040b8:	3301      	adds	r3, #1
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c2:	61fb      	str	r3, [r7, #28]
          break;
 80040c4:	e001      	b.n	80040ca <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 80040c6:	bf00      	nop
 80040c8:	e21a      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80040ca:	bf00      	nop
        break;
 80040cc:	e218      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80040ce:	4b2c      	ldr	r3, [pc, #176]	; (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80040d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d103      	bne.n	80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 80040e0:	f7fe fe94 	bl	8002e0c <HAL_RCC_GetPCLK2Freq>
 80040e4:	61f8      	str	r0, [r7, #28]
        break;
 80040e6:	e20b      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 80040e8:	f7fe fde4 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 80040ec:	61f8      	str	r0, [r7, #28]
        break;
 80040ee:	e207      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80040f0:	4b23      	ldr	r3, [pc, #140]	; (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80040f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040f6:	f003 0318 	and.w	r3, r3, #24
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2b10      	cmp	r3, #16
 8004100:	d010      	beq.n	8004124 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2b10      	cmp	r3, #16
 8004106:	d834      	bhi.n	8004172 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b08      	cmp	r3, #8
 8004112:	d024      	beq.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8004114:	e02d      	b.n	8004172 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004116:	69b9      	ldr	r1, [r7, #24]
 8004118:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800411c:	f000 fbe2 	bl	80048e4 <RCCEx_GetSAIxPeriphCLKFreq>
 8004120:	61f8      	str	r0, [r7, #28]
          break;
 8004122:	e02b      	b.n	800417c <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004124:	4b16      	ldr	r3, [pc, #88]	; (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b02      	cmp	r3, #2
 800412e:	d122      	bne.n	8004176 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004130:	4b13      	ldr	r3, [pc, #76]	; (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800413c:	4b10      	ldr	r3, [pc, #64]	; (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	091b      	lsrs	r3, r3, #4
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	e005      	b.n	8004154 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8004148:	4b0d      	ldr	r3, [pc, #52]	; (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800414a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800414e:	0a1b      	lsrs	r3, r3, #8
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	4a0c      	ldr	r2, [pc, #48]	; (8004188 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800415a:	61fb      	str	r3, [r7, #28]
          break;
 800415c:	e00b      	b.n	8004176 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800415e:	4b08      	ldr	r3, [pc, #32]	; (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800416a:	d106      	bne.n	800417a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 800416c:	4b05      	ldr	r3, [pc, #20]	; (8004184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800416e:	61fb      	str	r3, [r7, #28]
          break;
 8004170:	e003      	b.n	800417a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 8004172:	bf00      	nop
 8004174:	e1c4      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004176:	bf00      	nop
 8004178:	e1c2      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800417a:	bf00      	nop
        break;
 800417c:	e1c0      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 800417e:	bf00      	nop
 8004180:	40021000 	.word	0x40021000
 8004184:	00f42400 	.word	0x00f42400
 8004188:	0800b8c0 	.word	0x0800b8c0
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800418c:	4b96      	ldr	r3, [pc, #600]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800418e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004192:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800419e:	d013      	beq.n	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a6:	d819      	bhi.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d004      	beq.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b4:	d004      	beq.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 80041b6:	e011      	b.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 80041b8:	f7fe fe12 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 80041bc:	61f8      	str	r0, [r7, #28]
          break;
 80041be:	e010      	b.n	80041e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80041c0:	f7fe fd78 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 80041c4:	61f8      	str	r0, [r7, #28]
          break;
 80041c6:	e00c      	b.n	80041e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041c8:	4b87      	ldr	r3, [pc, #540]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d4:	d104      	bne.n	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 80041d6:	4b85      	ldr	r3, [pc, #532]	; (80043ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80041d8:	61fb      	str	r3, [r7, #28]
          break;
 80041da:	e001      	b.n	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 80041dc:	bf00      	nop
 80041de:	e18f      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80041e0:	bf00      	nop
        break;
 80041e2:	e18d      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80041e4:	4b80      	ldr	r3, [pc, #512]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041f6:	d013      	beq.n	8004220 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041fe:	d819      	bhi.n	8004234 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d004      	beq.n	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800420c:	d004      	beq.n	8004218 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 800420e:	e011      	b.n	8004234 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004210:	f7fe fde6 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 8004214:	61f8      	str	r0, [r7, #28]
          break;
 8004216:	e010      	b.n	800423a <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8004218:	f7fe fd4c 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 800421c:	61f8      	str	r0, [r7, #28]
          break;
 800421e:	e00c      	b.n	800423a <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004220:	4b71      	ldr	r3, [pc, #452]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800422c:	d104      	bne.n	8004238 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 800422e:	4b6f      	ldr	r3, [pc, #444]	; (80043ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004230:	61fb      	str	r3, [r7, #28]
          break;
 8004232:	e001      	b.n	8004238 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8004234:	bf00      	nop
 8004236:	e163      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004238:	bf00      	nop
        break;
 800423a:	e161      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800423c:	4b6a      	ldr	r3, [pc, #424]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004242:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800424e:	d013      	beq.n	8004278 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004256:	d819      	bhi.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d004      	beq.n	8004268 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004264:	d004      	beq.n	8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 8004266:	e011      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004268:	f7fe fdba 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 800426c:	61f8      	str	r0, [r7, #28]
          break;
 800426e:	e010      	b.n	8004292 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8004270:	f7fe fd20 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8004274:	61f8      	str	r0, [r7, #28]
          break;
 8004276:	e00c      	b.n	8004292 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004278:	4b5b      	ldr	r3, [pc, #364]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004284:	d104      	bne.n	8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8004286:	4b59      	ldr	r3, [pc, #356]	; (80043ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004288:	61fb      	str	r3, [r7, #28]
          break;
 800428a:	e001      	b.n	8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 800428c:	bf00      	nop
 800428e:	e137      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004290:	bf00      	nop
        break;
 8004292:	e135      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004294:	4b54      	ldr	r3, [pc, #336]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004296:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d011      	beq.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d818      	bhi.n	80042de <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d004      	beq.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 80042b8:	e011      	b.n	80042de <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80042ba:	f7fe fd91 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 80042be:	61f8      	str	r0, [r7, #28]
          break;
 80042c0:	e010      	b.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 80042c2:	f7fe fcf7 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 80042c6:	61f8      	str	r0, [r7, #28]
          break;
 80042c8:	e00c      	b.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042ca:	4b47      	ldr	r3, [pc, #284]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d6:	d104      	bne.n	80042e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 80042d8:	4b44      	ldr	r3, [pc, #272]	; (80043ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80042da:	61fb      	str	r3, [r7, #28]
          break;
 80042dc:	e001      	b.n	80042e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 80042de:	bf00      	nop
 80042e0:	e10e      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80042e2:	bf00      	nop
        break;
 80042e4:	e10c      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80042e6:	4b40      	ldr	r3, [pc, #256]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80042f8:	d02c      	beq.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004300:	d833      	bhi.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004308:	d01a      	beq.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004310:	d82b      	bhi.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d004      	beq.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800431e:	d004      	beq.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8004320:	e023      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004322:	f7fe fd5d 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 8004326:	61f8      	str	r0, [r7, #28]
          break;
 8004328:	e026      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800432a:	4b2f      	ldr	r3, [pc, #188]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800432c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b02      	cmp	r3, #2
 8004336:	d11a      	bne.n	800436e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8004338:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800433c:	61fb      	str	r3, [r7, #28]
          break;
 800433e:	e016      	b.n	800436e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004340:	4b29      	ldr	r3, [pc, #164]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800434c:	d111      	bne.n	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 800434e:	4b27      	ldr	r3, [pc, #156]	; (80043ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004350:	61fb      	str	r3, [r7, #28]
          break;
 8004352:	e00e      	b.n	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004354:	4b24      	ldr	r3, [pc, #144]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b02      	cmp	r3, #2
 8004360:	d109      	bne.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8004362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004366:	61fb      	str	r3, [r7, #28]
          break;
 8004368:	e005      	b.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 800436a:	bf00      	nop
 800436c:	e0c8      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800436e:	bf00      	nop
 8004370:	e0c6      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004372:	bf00      	nop
 8004374:	e0c4      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004376:	bf00      	nop
        break;
 8004378:	e0c2      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800437a:	4b1b      	ldr	r3, [pc, #108]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800437c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004380:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800438c:	d030      	beq.n	80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004394:	d837      	bhi.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800439c:	d01a      	beq.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043a4:	d82f      	bhi.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d004      	beq.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043b2:	d004      	beq.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 80043b4:	e027      	b.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 80043b6:	f7fe fd13 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 80043ba:	61f8      	str	r0, [r7, #28]
          break;
 80043bc:	e02a      	b.n	8004414 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80043be:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80043c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d11e      	bne.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 80043cc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80043d0:	61fb      	str	r3, [r7, #28]
          break;
 80043d2:	e01a      	b.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043d4:	4b04      	ldr	r3, [pc, #16]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e0:	d115      	bne.n	800440e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 80043e2:	4b02      	ldr	r3, [pc, #8]	; (80043ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80043e4:	61fb      	str	r3, [r7, #28]
          break;
 80043e6:	e012      	b.n	800440e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80043e8:	40021000 	.word	0x40021000
 80043ec:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80043f0:	4b46      	ldr	r3, [pc, #280]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80043f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d109      	bne.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 80043fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004402:	61fb      	str	r3, [r7, #28]
          break;
 8004404:	e005      	b.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8004406:	bf00      	nop
 8004408:	e07a      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800440a:	bf00      	nop
 800440c:	e078      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800440e:	bf00      	nop
 8004410:	e076      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004412:	bf00      	nop
        break;
 8004414:	e074      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8004416:	4b3d      	ldr	r3, [pc, #244]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004418:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800441c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004428:	d02c      	beq.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004430:	d855      	bhi.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d004      	beq.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800443e:	d004      	beq.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8004440:	e04d      	b.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004442:	f7fe fc37 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8004446:	61f8      	str	r0, [r7, #28]
          break;
 8004448:	e04e      	b.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800444a:	4b30      	ldr	r3, [pc, #192]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b02      	cmp	r3, #2
 8004454:	d145      	bne.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004456:	4b2d      	ldr	r3, [pc, #180]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d005      	beq.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8004462:	4b2a      	ldr	r3, [pc, #168]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	091b      	lsrs	r3, r3, #4
 8004468:	f003 030f 	and.w	r3, r3, #15
 800446c:	e005      	b.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 800446e:	4b27      	ldr	r3, [pc, #156]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004470:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004474:	0a1b      	lsrs	r3, r3, #8
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	4a25      	ldr	r2, [pc, #148]	; (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800447c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004480:	61fb      	str	r3, [r7, #28]
          break;
 8004482:	e02e      	b.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004484:	4b21      	ldr	r3, [pc, #132]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004490:	d129      	bne.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004492:	4b1e      	ldr	r3, [pc, #120]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800449a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800449e:	d122      	bne.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80044a0:	4b1a      	ldr	r3, [pc, #104]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	0a1b      	lsrs	r3, r3, #8
 80044a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044aa:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	fb03 f202 	mul.w	r2, r3, r2
 80044b4:	4b15      	ldr	r3, [pc, #84]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	091b      	lsrs	r3, r3, #4
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	3301      	adds	r3, #1
 80044c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80044c6:	4b11      	ldr	r3, [pc, #68]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	0d5b      	lsrs	r3, r3, #21
 80044cc:	f003 0303 	and.w	r3, r3, #3
 80044d0:	3301      	adds	r3, #1
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044da:	61fb      	str	r3, [r7, #28]
          break;
 80044dc:	e003      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 80044de:	bf00      	nop
 80044e0:	e00e      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044e2:	bf00      	nop
 80044e4:	e00c      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044e6:	bf00      	nop
        break;
 80044e8:	e00a      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80044ea:	bf00      	nop
 80044ec:	e008      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80044ee:	bf00      	nop
 80044f0:	e006      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80044f2:	bf00      	nop
 80044f4:	e004      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80044f6:	bf00      	nop
 80044f8:	e002      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80044fa:	bf00      	nop
 80044fc:	e000      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80044fe:	bf00      	nop
    }
  }

  return(frequency);
 8004500:	69fb      	ldr	r3, [r7, #28]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3720      	adds	r7, #32
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40021000 	.word	0x40021000
 8004510:	0800b8c0 	.word	0x0800b8c0

08004514 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004522:	4b72      	ldr	r3, [pc, #456]	; (80046ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00e      	beq.n	800454c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800452e:	4b6f      	ldr	r3, [pc, #444]	; (80046ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f003 0203 	and.w	r2, r3, #3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d103      	bne.n	8004546 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
       ||
 8004542:	2b00      	cmp	r3, #0
 8004544:	d142      	bne.n	80045cc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	73fb      	strb	r3, [r7, #15]
 800454a:	e03f      	b.n	80045cc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b03      	cmp	r3, #3
 8004552:	d018      	beq.n	8004586 <RCCEx_PLLSAI1_Config+0x72>
 8004554:	2b03      	cmp	r3, #3
 8004556:	d825      	bhi.n	80045a4 <RCCEx_PLLSAI1_Config+0x90>
 8004558:	2b01      	cmp	r3, #1
 800455a:	d002      	beq.n	8004562 <RCCEx_PLLSAI1_Config+0x4e>
 800455c:	2b02      	cmp	r3, #2
 800455e:	d009      	beq.n	8004574 <RCCEx_PLLSAI1_Config+0x60>
 8004560:	e020      	b.n	80045a4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004562:	4b62      	ldr	r3, [pc, #392]	; (80046ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d11d      	bne.n	80045aa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004572:	e01a      	b.n	80045aa <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004574:	4b5d      	ldr	r3, [pc, #372]	; (80046ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800457c:	2b00      	cmp	r3, #0
 800457e:	d116      	bne.n	80045ae <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004584:	e013      	b.n	80045ae <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004586:	4b59      	ldr	r3, [pc, #356]	; (80046ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10f      	bne.n	80045b2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004592:	4b56      	ldr	r3, [pc, #344]	; (80046ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d109      	bne.n	80045b2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045a2:	e006      	b.n	80045b2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	73fb      	strb	r3, [r7, #15]
      break;
 80045a8:	e004      	b.n	80045b4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80045aa:	bf00      	nop
 80045ac:	e002      	b.n	80045b4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80045ae:	bf00      	nop
 80045b0:	e000      	b.n	80045b4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80045b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d108      	bne.n	80045cc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80045ba:	4b4c      	ldr	r3, [pc, #304]	; (80046ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f023 0203 	bic.w	r2, r3, #3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4949      	ldr	r1, [pc, #292]	; (80046ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f040 8086 	bne.w	80046e0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045d4:	4b45      	ldr	r3, [pc, #276]	; (80046ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a44      	ldr	r2, [pc, #272]	; (80046ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80045da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e0:	f7fd f870 	bl	80016c4 <HAL_GetTick>
 80045e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045e6:	e009      	b.n	80045fc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045e8:	f7fd f86c 	bl	80016c4 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d902      	bls.n	80045fc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	73fb      	strb	r3, [r7, #15]
        break;
 80045fa:	e005      	b.n	8004608 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045fc:	4b3b      	ldr	r3, [pc, #236]	; (80046ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1ef      	bne.n	80045e8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d168      	bne.n	80046e0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d113      	bne.n	800463c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004614:	4b35      	ldr	r3, [pc, #212]	; (80046ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	4b35      	ldr	r3, [pc, #212]	; (80046f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800461a:	4013      	ands	r3, r2
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6892      	ldr	r2, [r2, #8]
 8004620:	0211      	lsls	r1, r2, #8
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	68d2      	ldr	r2, [r2, #12]
 8004626:	06d2      	lsls	r2, r2, #27
 8004628:	4311      	orrs	r1, r2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6852      	ldr	r2, [r2, #4]
 800462e:	3a01      	subs	r2, #1
 8004630:	0112      	lsls	r2, r2, #4
 8004632:	430a      	orrs	r2, r1
 8004634:	492d      	ldr	r1, [pc, #180]	; (80046ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004636:	4313      	orrs	r3, r2
 8004638:	610b      	str	r3, [r1, #16]
 800463a:	e02d      	b.n	8004698 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d115      	bne.n	800466e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004642:	4b2a      	ldr	r3, [pc, #168]	; (80046ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004644:	691a      	ldr	r2, [r3, #16]
 8004646:	4b2b      	ldr	r3, [pc, #172]	; (80046f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004648:	4013      	ands	r3, r2
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6892      	ldr	r2, [r2, #8]
 800464e:	0211      	lsls	r1, r2, #8
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6912      	ldr	r2, [r2, #16]
 8004654:	0852      	lsrs	r2, r2, #1
 8004656:	3a01      	subs	r2, #1
 8004658:	0552      	lsls	r2, r2, #21
 800465a:	4311      	orrs	r1, r2
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6852      	ldr	r2, [r2, #4]
 8004660:	3a01      	subs	r2, #1
 8004662:	0112      	lsls	r2, r2, #4
 8004664:	430a      	orrs	r2, r1
 8004666:	4921      	ldr	r1, [pc, #132]	; (80046ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004668:	4313      	orrs	r3, r2
 800466a:	610b      	str	r3, [r1, #16]
 800466c:	e014      	b.n	8004698 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800466e:	4b1f      	ldr	r3, [pc, #124]	; (80046ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004670:	691a      	ldr	r2, [r3, #16]
 8004672:	4b21      	ldr	r3, [pc, #132]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004674:	4013      	ands	r3, r2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6892      	ldr	r2, [r2, #8]
 800467a:	0211      	lsls	r1, r2, #8
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6952      	ldr	r2, [r2, #20]
 8004680:	0852      	lsrs	r2, r2, #1
 8004682:	3a01      	subs	r2, #1
 8004684:	0652      	lsls	r2, r2, #25
 8004686:	4311      	orrs	r1, r2
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6852      	ldr	r2, [r2, #4]
 800468c:	3a01      	subs	r2, #1
 800468e:	0112      	lsls	r2, r2, #4
 8004690:	430a      	orrs	r2, r1
 8004692:	4916      	ldr	r1, [pc, #88]	; (80046ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004694:	4313      	orrs	r3, r2
 8004696:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004698:	4b14      	ldr	r3, [pc, #80]	; (80046ec <RCCEx_PLLSAI1_Config+0x1d8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a13      	ldr	r2, [pc, #76]	; (80046ec <RCCEx_PLLSAI1_Config+0x1d8>)
 800469e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a4:	f7fd f80e 	bl	80016c4 <HAL_GetTick>
 80046a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046aa:	e009      	b.n	80046c0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046ac:	f7fd f80a 	bl	80016c4 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d902      	bls.n	80046c0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	73fb      	strb	r3, [r7, #15]
          break;
 80046be:	e005      	b.n	80046cc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046c0:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0ef      	beq.n	80046ac <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80046cc:	7bfb      	ldrb	r3, [r7, #15]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046d2:	4b06      	ldr	r3, [pc, #24]	; (80046ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80046d4:	691a      	ldr	r2, [r3, #16]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	4904      	ldr	r1, [pc, #16]	; (80046ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40021000 	.word	0x40021000
 80046f0:	07ff800f 	.word	0x07ff800f
 80046f4:	ff9f800f 	.word	0xff9f800f
 80046f8:	f9ff800f 	.word	0xf9ff800f

080046fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800470a:	4b72      	ldr	r3, [pc, #456]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00e      	beq.n	8004734 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004716:	4b6f      	ldr	r3, [pc, #444]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f003 0203 	and.w	r2, r3, #3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d103      	bne.n	800472e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
       ||
 800472a:	2b00      	cmp	r3, #0
 800472c:	d142      	bne.n	80047b4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	73fb      	strb	r3, [r7, #15]
 8004732:	e03f      	b.n	80047b4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b03      	cmp	r3, #3
 800473a:	d018      	beq.n	800476e <RCCEx_PLLSAI2_Config+0x72>
 800473c:	2b03      	cmp	r3, #3
 800473e:	d825      	bhi.n	800478c <RCCEx_PLLSAI2_Config+0x90>
 8004740:	2b01      	cmp	r3, #1
 8004742:	d002      	beq.n	800474a <RCCEx_PLLSAI2_Config+0x4e>
 8004744:	2b02      	cmp	r3, #2
 8004746:	d009      	beq.n	800475c <RCCEx_PLLSAI2_Config+0x60>
 8004748:	e020      	b.n	800478c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800474a:	4b62      	ldr	r3, [pc, #392]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d11d      	bne.n	8004792 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800475a:	e01a      	b.n	8004792 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800475c:	4b5d      	ldr	r3, [pc, #372]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004764:	2b00      	cmp	r3, #0
 8004766:	d116      	bne.n	8004796 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800476c:	e013      	b.n	8004796 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800476e:	4b59      	ldr	r3, [pc, #356]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10f      	bne.n	800479a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800477a:	4b56      	ldr	r3, [pc, #344]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d109      	bne.n	800479a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800478a:	e006      	b.n	800479a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	73fb      	strb	r3, [r7, #15]
      break;
 8004790:	e004      	b.n	800479c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004792:	bf00      	nop
 8004794:	e002      	b.n	800479c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004796:	bf00      	nop
 8004798:	e000      	b.n	800479c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800479a:	bf00      	nop
    }

    if(status == HAL_OK)
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d108      	bne.n	80047b4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80047a2:	4b4c      	ldr	r3, [pc, #304]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f023 0203 	bic.w	r2, r3, #3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4949      	ldr	r1, [pc, #292]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f040 8086 	bne.w	80048c8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047bc:	4b45      	ldr	r3, [pc, #276]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a44      	ldr	r2, [pc, #272]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c8:	f7fc ff7c 	bl	80016c4 <HAL_GetTick>
 80047cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047ce:	e009      	b.n	80047e4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047d0:	f7fc ff78 	bl	80016c4 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d902      	bls.n	80047e4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	73fb      	strb	r3, [r7, #15]
        break;
 80047e2:	e005      	b.n	80047f0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047e4:	4b3b      	ldr	r3, [pc, #236]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1ef      	bne.n	80047d0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d168      	bne.n	80048c8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d113      	bne.n	8004824 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047fc:	4b35      	ldr	r3, [pc, #212]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047fe:	695a      	ldr	r2, [r3, #20]
 8004800:	4b35      	ldr	r3, [pc, #212]	; (80048d8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004802:	4013      	ands	r3, r2
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6892      	ldr	r2, [r2, #8]
 8004808:	0211      	lsls	r1, r2, #8
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	68d2      	ldr	r2, [r2, #12]
 800480e:	06d2      	lsls	r2, r2, #27
 8004810:	4311      	orrs	r1, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6852      	ldr	r2, [r2, #4]
 8004816:	3a01      	subs	r2, #1
 8004818:	0112      	lsls	r2, r2, #4
 800481a:	430a      	orrs	r2, r1
 800481c:	492d      	ldr	r1, [pc, #180]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800481e:	4313      	orrs	r3, r2
 8004820:	614b      	str	r3, [r1, #20]
 8004822:	e02d      	b.n	8004880 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d115      	bne.n	8004856 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800482a:	4b2a      	ldr	r3, [pc, #168]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800482c:	695a      	ldr	r2, [r3, #20]
 800482e:	4b2b      	ldr	r3, [pc, #172]	; (80048dc <RCCEx_PLLSAI2_Config+0x1e0>)
 8004830:	4013      	ands	r3, r2
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6892      	ldr	r2, [r2, #8]
 8004836:	0211      	lsls	r1, r2, #8
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6912      	ldr	r2, [r2, #16]
 800483c:	0852      	lsrs	r2, r2, #1
 800483e:	3a01      	subs	r2, #1
 8004840:	0552      	lsls	r2, r2, #21
 8004842:	4311      	orrs	r1, r2
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6852      	ldr	r2, [r2, #4]
 8004848:	3a01      	subs	r2, #1
 800484a:	0112      	lsls	r2, r2, #4
 800484c:	430a      	orrs	r2, r1
 800484e:	4921      	ldr	r1, [pc, #132]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004850:	4313      	orrs	r3, r2
 8004852:	614b      	str	r3, [r1, #20]
 8004854:	e014      	b.n	8004880 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004856:	4b1f      	ldr	r3, [pc, #124]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	4b21      	ldr	r3, [pc, #132]	; (80048e0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800485c:	4013      	ands	r3, r2
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6892      	ldr	r2, [r2, #8]
 8004862:	0211      	lsls	r1, r2, #8
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6952      	ldr	r2, [r2, #20]
 8004868:	0852      	lsrs	r2, r2, #1
 800486a:	3a01      	subs	r2, #1
 800486c:	0652      	lsls	r2, r2, #25
 800486e:	4311      	orrs	r1, r2
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6852      	ldr	r2, [r2, #4]
 8004874:	3a01      	subs	r2, #1
 8004876:	0112      	lsls	r2, r2, #4
 8004878:	430a      	orrs	r2, r1
 800487a:	4916      	ldr	r1, [pc, #88]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800487c:	4313      	orrs	r3, r2
 800487e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004880:	4b14      	ldr	r3, [pc, #80]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a13      	ldr	r2, [pc, #76]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800488a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488c:	f7fc ff1a 	bl	80016c4 <HAL_GetTick>
 8004890:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004892:	e009      	b.n	80048a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004894:	f7fc ff16 	bl	80016c4 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d902      	bls.n	80048a8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	73fb      	strb	r3, [r7, #15]
          break;
 80048a6:	e005      	b.n	80048b4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048a8:	4b0a      	ldr	r3, [pc, #40]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0ef      	beq.n	8004894 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048bc:	695a      	ldr	r2, [r3, #20]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	4904      	ldr	r1, [pc, #16]	; (80048d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40021000 	.word	0x40021000
 80048d8:	07ff800f 	.word	0x07ff800f
 80048dc:	ff9f800f 	.word	0xff9f800f
 80048e0:	f9ff800f 	.word	0xf9ff800f

080048e4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b089      	sub	sp, #36	; 0x24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004900:	d10b      	bne.n	800491a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004902:	4b7e      	ldr	r3, [pc, #504]	; (8004afc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004904:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004908:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800490c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	2b60      	cmp	r3, #96	; 0x60
 8004912:	d112      	bne.n	800493a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004914:	4b7a      	ldr	r3, [pc, #488]	; (8004b00 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004916:	61fb      	str	r3, [r7, #28]
 8004918:	e00f      	b.n	800493a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004920:	d10b      	bne.n	800493a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004922:	4b76      	ldr	r3, [pc, #472]	; (8004afc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004924:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004928:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800492c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004934:	d101      	bne.n	800493a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004936:	4b72      	ldr	r3, [pc, #456]	; (8004b00 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004938:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	2b00      	cmp	r3, #0
 800493e:	f040 80d6 	bne.w	8004aee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	2b40      	cmp	r3, #64	; 0x40
 800494a:	d003      	beq.n	8004954 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004952:	d13b      	bne.n	80049cc <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004954:	4b69      	ldr	r3, [pc, #420]	; (8004afc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004960:	f040 80c4 	bne.w	8004aec <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8004964:	4b65      	ldr	r3, [pc, #404]	; (8004afc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 80bd 	beq.w	8004aec <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004972:	4b62      	ldr	r3, [pc, #392]	; (8004afc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	091b      	lsrs	r3, r3, #4
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	3301      	adds	r3, #1
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	fbb2 f3f3 	udiv	r3, r2, r3
 8004984:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004986:	4b5d      	ldr	r3, [pc, #372]	; (8004afc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	0a1b      	lsrs	r3, r3, #8
 800498c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004990:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004992:	4b5a      	ldr	r3, [pc, #360]	; (8004afc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	0edb      	lsrs	r3, r3, #27
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10a      	bne.n	80049ba <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80049a4:	4b55      	ldr	r3, [pc, #340]	; (8004afc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 80049b0:	2311      	movs	r3, #17
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	e001      	b.n	80049ba <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 80049b6:	2307      	movs	r3, #7
 80049b8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	fb03 f202 	mul.w	r2, r3, r2
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80049ca:	e08f      	b.n	8004aec <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d13a      	bne.n	8004a48 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80049d2:	4b4a      	ldr	r3, [pc, #296]	; (8004afc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049de:	f040 8086 	bne.w	8004aee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80049e2:	4b46      	ldr	r3, [pc, #280]	; (8004afc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d07f      	beq.n	8004aee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80049ee:	4b43      	ldr	r3, [pc, #268]	; (8004afc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	091b      	lsrs	r3, r3, #4
 80049f4:	f003 030f 	and.w	r3, r3, #15
 80049f8:	3301      	adds	r3, #1
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a00:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004a02:	4b3e      	ldr	r3, [pc, #248]	; (8004afc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	0a1b      	lsrs	r3, r3, #8
 8004a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a0c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8004a0e:	4b3b      	ldr	r3, [pc, #236]	; (8004afc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	0edb      	lsrs	r3, r3, #27
 8004a14:	f003 031f 	and.w	r3, r3, #31
 8004a18:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10a      	bne.n	8004a36 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004a20:	4b36      	ldr	r3, [pc, #216]	; (8004afc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8004a2c:	2311      	movs	r3, #17
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	e001      	b.n	8004a36 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8004a32:	2307      	movs	r3, #7
 8004a34:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	fb03 f202 	mul.w	r2, r3, r2
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a44:	61fb      	str	r3, [r7, #28]
 8004a46:	e052      	b.n	8004aee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	2b80      	cmp	r3, #128	; 0x80
 8004a4c:	d003      	beq.n	8004a56 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a54:	d109      	bne.n	8004a6a <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a56:	4b29      	ldr	r3, [pc, #164]	; (8004afc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a62:	d144      	bne.n	8004aee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8004a64:	4b27      	ldr	r3, [pc, #156]	; (8004b04 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8004a66:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a68:	e041      	b.n	8004aee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	2b20      	cmp	r3, #32
 8004a6e:	d003      	beq.n	8004a78 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a76:	d13a      	bne.n	8004aee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004a78:	4b20      	ldr	r3, [pc, #128]	; (8004afc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a84:	d133      	bne.n	8004aee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004a86:	4b1d      	ldr	r3, [pc, #116]	; (8004afc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d02d      	beq.n	8004aee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8004a92:	4b1a      	ldr	r3, [pc, #104]	; (8004afc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	091b      	lsrs	r3, r3, #4
 8004a98:	f003 030f 	and.w	r3, r3, #15
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004aa6:	4b15      	ldr	r3, [pc, #84]	; (8004afc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	0a1b      	lsrs	r3, r3, #8
 8004aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ab0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8004ab2:	4b12      	ldr	r3, [pc, #72]	; (8004afc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	0edb      	lsrs	r3, r3, #27
 8004ab8:	f003 031f 	and.w	r3, r3, #31
 8004abc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10a      	bne.n	8004ada <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004ac4:	4b0d      	ldr	r3, [pc, #52]	; (8004afc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d002      	beq.n	8004ad6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8004ad0:	2311      	movs	r3, #17
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	e001      	b.n	8004ada <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8004ad6:	2307      	movs	r3, #7
 8004ad8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	fb03 f202 	mul.w	r2, r3, r2
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae8:	61fb      	str	r3, [r7, #28]
 8004aea:	e000      	b.n	8004aee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004aec:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004aee:	69fb      	ldr	r3, [r7, #28]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3724      	adds	r7, #36	; 0x24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	40021000 	.word	0x40021000
 8004b00:	001fff68 	.word	0x001fff68
 8004b04:	00f42400 	.word	0x00f42400

08004b08 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08a      	sub	sp, #40	; 0x28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e1c7      	b.n	8004eaa <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d10e      	bne.n	8004b42 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a81      	ldr	r2, [pc, #516]	; (8004d30 <HAL_SAI_Init+0x228>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d107      	bne.n	8004b3e <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d103      	bne.n	8004b3e <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e1b3      	b.n	8004eaa <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d106      	bne.n	8004b5c <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7fc fc34 	bl	80013c4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f9b1 	bl	8004ec4 <SAI_Disable>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e19e      	b.n	8004eaa <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d00c      	beq.n	8004b96 <HAL_SAI_Init+0x8e>
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d80d      	bhi.n	8004b9c <HAL_SAI_Init+0x94>
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <HAL_SAI_Init+0x82>
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d003      	beq.n	8004b90 <HAL_SAI_Init+0x88>
 8004b88:	e008      	b.n	8004b9c <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004b8e:	e008      	b.n	8004ba2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004b90:	2310      	movs	r3, #16
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004b94:	e005      	b.n	8004ba2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004b96:	2320      	movs	r3, #32
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004b9a:	e002      	b.n	8004ba2 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004ba0:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d81d      	bhi.n	8004be6 <HAL_SAI_Init+0xde>
 8004baa:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <HAL_SAI_Init+0xa8>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004bc1 	.word	0x08004bc1
 8004bb4:	08004bc7 	.word	0x08004bc7
 8004bb8:	08004bcf 	.word	0x08004bcf
 8004bbc:	08004bd7 	.word	0x08004bd7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	61fb      	str	r3, [r7, #28]
      break;
 8004bc4:	e012      	b.n	8004bec <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bca:	61fb      	str	r3, [r7, #28]
      break;
 8004bcc:	e00e      	b.n	8004bec <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004bce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bd2:	61fb      	str	r3, [r7, #28]
      break;
 8004bd4:	e00a      	b.n	8004bec <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004bd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bda:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004be4:	e002      	b.n	8004bec <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8004be6:	2300      	movs	r3, #0
 8004be8:	61fb      	str	r3, [r7, #28]
      break;
 8004bea:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a4f      	ldr	r2, [pc, #316]	; (8004d30 <HAL_SAI_Init+0x228>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d004      	beq.n	8004c00 <HAL_SAI_Init+0xf8>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a4e      	ldr	r2, [pc, #312]	; (8004d34 <HAL_SAI_Init+0x22c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d103      	bne.n	8004c08 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8004c00:	4a4d      	ldr	r2, [pc, #308]	; (8004d38 <HAL_SAI_Init+0x230>)
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	e002      	b.n	8004c0e <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004c08:	4a4c      	ldr	r2, [pc, #304]	; (8004d3c <HAL_SAI_Init+0x234>)
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d073      	beq.n	8004cfe <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a45      	ldr	r2, [pc, #276]	; (8004d30 <HAL_SAI_Init+0x228>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d004      	beq.n	8004c2a <HAL_SAI_Init+0x122>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a43      	ldr	r2, [pc, #268]	; (8004d34 <HAL_SAI_Init+0x22c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d105      	bne.n	8004c36 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004c2a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004c2e:	f7fe fd51 	bl	80036d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c32:	61b8      	str	r0, [r7, #24]
 8004c34:	e004      	b.n	8004c40 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004c36:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004c3a:	f7fe fd4b 	bl	80036d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c3e:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c48:	d120      	bne.n	8004c8c <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d102      	bne.n	8004c58 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8004c52:	2340      	movs	r3, #64	; 0x40
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	e00a      	b.n	8004c6e <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d103      	bne.n	8004c68 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8004c60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c64:	613b      	str	r3, [r7, #16]
 8004c66:	e002      	b.n	8004c6e <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c6c:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	4613      	mov	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	4619      	mov	r1, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	fb02 f303 	mul.w	r3, r2, r3
 8004c84:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	e017      	b.n	8004cbc <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c94:	d101      	bne.n	8004c9a <HAL_SAI_Init+0x192>
 8004c96:	2302      	movs	r3, #2
 8004c98:	e000      	b.n	8004c9c <HAL_SAI_Init+0x194>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	4619      	mov	r1, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	fb02 f303 	mul.w	r3, r2, r3
 8004cb4:	021b      	lsls	r3, r3, #8
 8004cb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cba:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	4a20      	ldr	r2, [pc, #128]	; (8004d40 <HAL_SAI_Init+0x238>)
 8004cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc4:	08da      	lsrs	r2, r3, #3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004cca:	6979      	ldr	r1, [r7, #20]
 8004ccc:	4b1c      	ldr	r3, [pc, #112]	; (8004d40 <HAL_SAI_Init+0x238>)
 8004cce:	fba3 2301 	umull	r2, r3, r3, r1
 8004cd2:	08da      	lsrs	r2, r3, #3
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	1aca      	subs	r2, r1, r3
 8004cde:	2a08      	cmp	r2, #8
 8004ce0:	d904      	bls.n	8004cec <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	d104      	bne.n	8004cfe <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	085a      	lsrs	r2, r3, #1
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_SAI_Init+0x206>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d109      	bne.n	8004d22 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d101      	bne.n	8004d1a <HAL_SAI_Init+0x212>
 8004d16:	2300      	movs	r3, #0
 8004d18:	e001      	b.n	8004d1e <HAL_SAI_Init+0x216>
 8004d1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d1e:	623b      	str	r3, [r7, #32]
 8004d20:	e012      	b.n	8004d48 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d10c      	bne.n	8004d44 <HAL_SAI_Init+0x23c>
 8004d2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d2e:	e00a      	b.n	8004d46 <HAL_SAI_Init+0x23e>
 8004d30:	40015404 	.word	0x40015404
 8004d34:	40015424 	.word	0x40015424
 8004d38:	40015400 	.word	0x40015400
 8004d3c:	40015800 	.word	0x40015800
 8004d40:	cccccccd 	.word	0xcccccccd
 8004d44:	2300      	movs	r3, #0
 8004d46:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6819      	ldr	r1, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4b58      	ldr	r3, [pc, #352]	; (8004eb4 <HAL_SAI_Init+0x3ac>)
 8004d54:	400b      	ands	r3, r1
 8004d56:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6819      	ldr	r1, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004d6c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d72:	431a      	orrs	r2, r3
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8004d80:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004d8c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	051b      	lsls	r3, r3, #20
 8004d94:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004d9a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6812      	ldr	r2, [r2, #0]
 8004dae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004db2:	f023 030f 	bic.w	r3, r3, #15
 8004db6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6859      	ldr	r1, [r3, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6899      	ldr	r1, [r3, #8]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	4b35      	ldr	r3, [pc, #212]	; (8004eb8 <HAL_SAI_Init+0x3b0>)
 8004de2:	400b      	ands	r3, r1
 8004de4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6899      	ldr	r1, [r3, #8]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004df6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8004dfc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 8004e02:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004e0c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68d9      	ldr	r1, [r3, #12]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004e24:	400b      	ands	r3, r1
 8004e26:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68d9      	ldr	r1, [r3, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e36:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004e3e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e44:	3b01      	subs	r3, #1
 8004e46:	021b      	lsls	r3, r3, #8
 8004e48:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a19      	ldr	r2, [pc, #100]	; (8004ebc <HAL_SAI_Init+0x3b4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d119      	bne.n	8004e90 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8004e5c:	4b18      	ldr	r3, [pc, #96]	; (8004ec0 <HAL_SAI_Init+0x3b8>)
 8004e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e60:	4a17      	ldr	r2, [pc, #92]	; (8004ec0 <HAL_SAI_Init+0x3b8>)
 8004e62:	f023 0301 	bic.w	r3, r3, #1
 8004e66:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d10e      	bne.n	8004e90 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8004e7e:	4910      	ldr	r1, [pc, #64]	; (8004ec0 <HAL_SAI_Init+0x3b8>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8004e84:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <HAL_SAI_Init+0x3b8>)
 8004e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e88:	4a0d      	ldr	r2, [pc, #52]	; (8004ec0 <HAL_SAI_Init+0x3b8>)
 8004e8a:	f043 0301 	orr.w	r3, r3, #1
 8004e8e:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3728      	adds	r7, #40	; 0x28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	f805c010 	.word	0xf805c010
 8004eb8:	fff88000 	.word	0xfff88000
 8004ebc:	40015404 	.word	0x40015404
 8004ec0:	40015400 	.word	0x40015400

08004ec4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004ecc:	4b18      	ldr	r3, [pc, #96]	; (8004f30 <SAI_Disable+0x6c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a18      	ldr	r2, [pc, #96]	; (8004f34 <SAI_Disable+0x70>)
 8004ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed6:	0b1b      	lsrs	r3, r3, #12
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004edc:	2300      	movs	r3, #0
 8004ede:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004eee:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10a      	bne.n	8004f0c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	72fb      	strb	r3, [r7, #11]
      break;
 8004f0a:	e009      	b.n	8004f20 <SAI_Disable+0x5c>
    }
    count--;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e7      	bne.n	8004ef0 <SAI_Disable+0x2c>

  return status;
 8004f20:	7afb      	ldrb	r3, [r7, #11]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	20000000 	.word	0x20000000
 8004f34:	95cbec1b 	.word	0x95cbec1b

08004f38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e095      	b.n	8005076 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d108      	bne.n	8004f64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f5a:	d009      	beq.n	8004f70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	61da      	str	r2, [r3, #28]
 8004f62:	e005      	b.n	8004f70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fc f86a 	bl	8001064 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fa6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fb0:	d902      	bls.n	8004fb8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	e002      	b.n	8004fbe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fbc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004fc6:	d007      	beq.n	8004fd8 <HAL_SPI_Init+0xa0>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fd0:	d002      	beq.n	8004fd8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005010:	431a      	orrs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501a:	ea42 0103 	orr.w	r1, r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005022:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	0c1b      	lsrs	r3, r3, #16
 8005034:	f003 0204 	and.w	r2, r3, #4
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	f003 0310 	and.w	r3, r3, #16
 8005040:	431a      	orrs	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005054:	ea42 0103 	orr.w	r1, r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b084      	sub	sp, #16
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e038      	b.n	8005106 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d106      	bne.n	80050ae <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f7fc f981 	bl	80013b0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	3308      	adds	r3, #8
 80050b6:	4619      	mov	r1, r3
 80050b8:	4610      	mov	r0, r2
 80050ba:	f000 ff97 	bl	8005fec <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6818      	ldr	r0, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	461a      	mov	r2, r3
 80050c8:	68b9      	ldr	r1, [r7, #8]
 80050ca:	f001 f829 	bl	8006120 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6858      	ldr	r0, [r3, #4]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	f001 f872 	bl	80061c4 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	6892      	ldr	r2, [r2, #8]
 80050e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	6892      	ldr	r2, [r2, #8]
 80050f4:	f041 0101 	orr.w	r1, r1, #1
 80050f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b082      	sub	sp, #8
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e042      	b.n	80051a6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fb fff8 	bl	8001128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2224      	movs	r2, #36	; 0x24
 800513c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0201 	bic.w	r2, r2, #1
 800514e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f997 	bl	8005484 <UART_SetConfig>
 8005156:	4603      	mov	r3, r0
 8005158:	2b01      	cmp	r3, #1
 800515a:	d101      	bne.n	8005160 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e022      	b.n	80051a6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fc87 	bl	8005a7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800517c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800518c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0201 	orr.w	r2, r2, #1
 800519c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fd0e 	bl	8005bc0 <UART_CheckIdleState>
 80051a4:	4603      	mov	r3, r0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b08a      	sub	sp, #40	; 0x28
 80051b2:	af02      	add	r7, sp, #8
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	603b      	str	r3, [r7, #0]
 80051ba:	4613      	mov	r3, r2
 80051bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	f040 8084 	bne.w	80052d2 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <HAL_UART_Transmit+0x28>
 80051d0:	88fb      	ldrh	r3, [r7, #6]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e07c      	b.n	80052d4 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_UART_Transmit+0x3a>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e075      	b.n	80052d4 <HAL_UART_Transmit+0x126>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2221      	movs	r2, #33	; 0x21
 80051fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005200:	f7fc fa60 	bl	80016c4 <HAL_GetTick>
 8005204:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	88fa      	ldrh	r2, [r7, #6]
 800520a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	88fa      	ldrh	r2, [r7, #6]
 8005212:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800521e:	d108      	bne.n	8005232 <HAL_UART_Transmit+0x84>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d104      	bne.n	8005232 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005228:	2300      	movs	r3, #0
 800522a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	61bb      	str	r3, [r7, #24]
 8005230:	e003      	b.n	800523a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005236:	2300      	movs	r3, #0
 8005238:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005242:	e02d      	b.n	80052a0 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2200      	movs	r2, #0
 800524c:	2180      	movs	r1, #128	; 0x80
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 fd01 	bl	8005c56 <UART_WaitOnFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e03a      	b.n	80052d4 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10b      	bne.n	800527c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	881a      	ldrh	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005270:	b292      	uxth	r2, r2
 8005272:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	3302      	adds	r3, #2
 8005278:	61bb      	str	r3, [r7, #24]
 800527a:	e008      	b.n	800528e <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	781a      	ldrb	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	b292      	uxth	r2, r2
 8005286:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	3301      	adds	r3, #1
 800528c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005294:	b29b      	uxth	r3, r3
 8005296:	3b01      	subs	r3, #1
 8005298:	b29a      	uxth	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1cb      	bne.n	8005244 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2200      	movs	r2, #0
 80052b4:	2140      	movs	r1, #64	; 0x40
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 fccd 	bl	8005c56 <UART_WaitOnFlagUntilTimeout>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e006      	b.n	80052d4 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	e000      	b.n	80052d4 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80052d2:	2302      	movs	r3, #2
  }
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3720      	adds	r7, #32
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b08a      	sub	sp, #40	; 0x28
 80052e0:	af02      	add	r7, sp, #8
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	603b      	str	r3, [r7, #0]
 80052e8:	4613      	mov	r3, r2
 80052ea:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f2:	2b20      	cmp	r3, #32
 80052f4:	f040 80c1 	bne.w	800547a <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <HAL_UART_Receive+0x28>
 80052fe:	88fb      	ldrh	r3, [r7, #6]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e0b9      	b.n	800547c <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <HAL_UART_Receive+0x3a>
 8005312:	2302      	movs	r3, #2
 8005314:	e0b2      	b.n	800547c <HAL_UART_Receive+0x1a0>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2222      	movs	r2, #34	; 0x22
 800532a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005334:	f7fc f9c6 	bl	80016c4 <HAL_GetTick>
 8005338:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	88fa      	ldrh	r2, [r7, #6]
 800533e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	88fa      	ldrh	r2, [r7, #6]
 8005346:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005352:	d10e      	bne.n	8005372 <HAL_UART_Receive+0x96>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d105      	bne.n	8005368 <HAL_UART_Receive+0x8c>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005362:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005366:	e02d      	b.n	80053c4 <HAL_UART_Receive+0xe8>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	22ff      	movs	r2, #255	; 0xff
 800536c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005370:	e028      	b.n	80053c4 <HAL_UART_Receive+0xe8>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10d      	bne.n	8005396 <HAL_UART_Receive+0xba>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d104      	bne.n	800538c <HAL_UART_Receive+0xb0>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	22ff      	movs	r2, #255	; 0xff
 8005386:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800538a:	e01b      	b.n	80053c4 <HAL_UART_Receive+0xe8>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	227f      	movs	r2, #127	; 0x7f
 8005390:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005394:	e016      	b.n	80053c4 <HAL_UART_Receive+0xe8>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800539e:	d10d      	bne.n	80053bc <HAL_UART_Receive+0xe0>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d104      	bne.n	80053b2 <HAL_UART_Receive+0xd6>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	227f      	movs	r2, #127	; 0x7f
 80053ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80053b0:	e008      	b.n	80053c4 <HAL_UART_Receive+0xe8>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	223f      	movs	r2, #63	; 0x3f
 80053b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80053ba:	e003      	b.n	80053c4 <HAL_UART_Receive+0xe8>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80053ca:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053d4:	d108      	bne.n	80053e8 <HAL_UART_Receive+0x10c>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d104      	bne.n	80053e8 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	61bb      	str	r3, [r7, #24]
 80053e6:	e003      	b.n	80053f0 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053ec:	2300      	movs	r3, #0
 80053ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80053f8:	e033      	b.n	8005462 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2200      	movs	r2, #0
 8005402:	2120      	movs	r1, #32
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 fc26 	bl	8005c56 <UART_WaitOnFlagUntilTimeout>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e033      	b.n	800547c <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10c      	bne.n	8005434 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005420:	b29a      	uxth	r2, r3
 8005422:	8a7b      	ldrh	r3, [r7, #18]
 8005424:	4013      	ands	r3, r2
 8005426:	b29a      	uxth	r2, r3
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	3302      	adds	r3, #2
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	e00d      	b.n	8005450 <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800543a:	b29b      	uxth	r3, r3
 800543c:	b2da      	uxtb	r2, r3
 800543e:	8a7b      	ldrh	r3, [r7, #18]
 8005440:	b2db      	uxtb	r3, r3
 8005442:	4013      	ands	r3, r2
 8005444:	b2da      	uxtb	r2, r3
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	3301      	adds	r3, #1
 800544e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005456:	b29b      	uxth	r3, r3
 8005458:	3b01      	subs	r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005468:	b29b      	uxth	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1c5      	bne.n	80053fa <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2220      	movs	r2, #32
 8005472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	e000      	b.n	800547c <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 800547a:	2302      	movs	r3, #2
  }
}
 800547c:	4618      	mov	r0, r3
 800547e:	3720      	adds	r7, #32
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005488:	b08c      	sub	sp, #48	; 0x30
 800548a:	af00      	add	r7, sp, #0
 800548c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	431a      	orrs	r2, r3
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	4baa      	ldr	r3, [pc, #680]	; (800575c <UART_SetConfig+0x2d8>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	6812      	ldr	r2, [r2, #0]
 80054ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054bc:	430b      	orrs	r3, r1
 80054be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a9f      	ldr	r2, [pc, #636]	; (8005760 <UART_SetConfig+0x2dc>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d004      	beq.n	80054f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ec:	4313      	orrs	r3, r2
 80054ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80054fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	6812      	ldr	r2, [r2, #0]
 8005502:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005504:	430b      	orrs	r3, r1
 8005506:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550e:	f023 010f 	bic.w	r1, r3, #15
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a90      	ldr	r2, [pc, #576]	; (8005764 <UART_SetConfig+0x2e0>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d125      	bne.n	8005574 <UART_SetConfig+0xf0>
 8005528:	4b8f      	ldr	r3, [pc, #572]	; (8005768 <UART_SetConfig+0x2e4>)
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552e:	f003 0303 	and.w	r3, r3, #3
 8005532:	2b03      	cmp	r3, #3
 8005534:	d81a      	bhi.n	800556c <UART_SetConfig+0xe8>
 8005536:	a201      	add	r2, pc, #4	; (adr r2, 800553c <UART_SetConfig+0xb8>)
 8005538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553c:	0800554d 	.word	0x0800554d
 8005540:	0800555d 	.word	0x0800555d
 8005544:	08005555 	.word	0x08005555
 8005548:	08005565 	.word	0x08005565
 800554c:	2301      	movs	r3, #1
 800554e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005552:	e116      	b.n	8005782 <UART_SetConfig+0x2fe>
 8005554:	2302      	movs	r3, #2
 8005556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800555a:	e112      	b.n	8005782 <UART_SetConfig+0x2fe>
 800555c:	2304      	movs	r3, #4
 800555e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005562:	e10e      	b.n	8005782 <UART_SetConfig+0x2fe>
 8005564:	2308      	movs	r3, #8
 8005566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800556a:	e10a      	b.n	8005782 <UART_SetConfig+0x2fe>
 800556c:	2310      	movs	r3, #16
 800556e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005572:	e106      	b.n	8005782 <UART_SetConfig+0x2fe>
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a7c      	ldr	r2, [pc, #496]	; (800576c <UART_SetConfig+0x2e8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d138      	bne.n	80055f0 <UART_SetConfig+0x16c>
 800557e:	4b7a      	ldr	r3, [pc, #488]	; (8005768 <UART_SetConfig+0x2e4>)
 8005580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005584:	f003 030c 	and.w	r3, r3, #12
 8005588:	2b0c      	cmp	r3, #12
 800558a:	d82d      	bhi.n	80055e8 <UART_SetConfig+0x164>
 800558c:	a201      	add	r2, pc, #4	; (adr r2, 8005594 <UART_SetConfig+0x110>)
 800558e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005592:	bf00      	nop
 8005594:	080055c9 	.word	0x080055c9
 8005598:	080055e9 	.word	0x080055e9
 800559c:	080055e9 	.word	0x080055e9
 80055a0:	080055e9 	.word	0x080055e9
 80055a4:	080055d9 	.word	0x080055d9
 80055a8:	080055e9 	.word	0x080055e9
 80055ac:	080055e9 	.word	0x080055e9
 80055b0:	080055e9 	.word	0x080055e9
 80055b4:	080055d1 	.word	0x080055d1
 80055b8:	080055e9 	.word	0x080055e9
 80055bc:	080055e9 	.word	0x080055e9
 80055c0:	080055e9 	.word	0x080055e9
 80055c4:	080055e1 	.word	0x080055e1
 80055c8:	2300      	movs	r3, #0
 80055ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ce:	e0d8      	b.n	8005782 <UART_SetConfig+0x2fe>
 80055d0:	2302      	movs	r3, #2
 80055d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055d6:	e0d4      	b.n	8005782 <UART_SetConfig+0x2fe>
 80055d8:	2304      	movs	r3, #4
 80055da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055de:	e0d0      	b.n	8005782 <UART_SetConfig+0x2fe>
 80055e0:	2308      	movs	r3, #8
 80055e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055e6:	e0cc      	b.n	8005782 <UART_SetConfig+0x2fe>
 80055e8:	2310      	movs	r3, #16
 80055ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ee:	e0c8      	b.n	8005782 <UART_SetConfig+0x2fe>
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a5e      	ldr	r2, [pc, #376]	; (8005770 <UART_SetConfig+0x2ec>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d125      	bne.n	8005646 <UART_SetConfig+0x1c2>
 80055fa:	4b5b      	ldr	r3, [pc, #364]	; (8005768 <UART_SetConfig+0x2e4>)
 80055fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005600:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005604:	2b30      	cmp	r3, #48	; 0x30
 8005606:	d016      	beq.n	8005636 <UART_SetConfig+0x1b2>
 8005608:	2b30      	cmp	r3, #48	; 0x30
 800560a:	d818      	bhi.n	800563e <UART_SetConfig+0x1ba>
 800560c:	2b20      	cmp	r3, #32
 800560e:	d00a      	beq.n	8005626 <UART_SetConfig+0x1a2>
 8005610:	2b20      	cmp	r3, #32
 8005612:	d814      	bhi.n	800563e <UART_SetConfig+0x1ba>
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <UART_SetConfig+0x19a>
 8005618:	2b10      	cmp	r3, #16
 800561a:	d008      	beq.n	800562e <UART_SetConfig+0x1aa>
 800561c:	e00f      	b.n	800563e <UART_SetConfig+0x1ba>
 800561e:	2300      	movs	r3, #0
 8005620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005624:	e0ad      	b.n	8005782 <UART_SetConfig+0x2fe>
 8005626:	2302      	movs	r3, #2
 8005628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800562c:	e0a9      	b.n	8005782 <UART_SetConfig+0x2fe>
 800562e:	2304      	movs	r3, #4
 8005630:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005634:	e0a5      	b.n	8005782 <UART_SetConfig+0x2fe>
 8005636:	2308      	movs	r3, #8
 8005638:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800563c:	e0a1      	b.n	8005782 <UART_SetConfig+0x2fe>
 800563e:	2310      	movs	r3, #16
 8005640:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005644:	e09d      	b.n	8005782 <UART_SetConfig+0x2fe>
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a4a      	ldr	r2, [pc, #296]	; (8005774 <UART_SetConfig+0x2f0>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d125      	bne.n	800569c <UART_SetConfig+0x218>
 8005650:	4b45      	ldr	r3, [pc, #276]	; (8005768 <UART_SetConfig+0x2e4>)
 8005652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005656:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800565a:	2bc0      	cmp	r3, #192	; 0xc0
 800565c:	d016      	beq.n	800568c <UART_SetConfig+0x208>
 800565e:	2bc0      	cmp	r3, #192	; 0xc0
 8005660:	d818      	bhi.n	8005694 <UART_SetConfig+0x210>
 8005662:	2b80      	cmp	r3, #128	; 0x80
 8005664:	d00a      	beq.n	800567c <UART_SetConfig+0x1f8>
 8005666:	2b80      	cmp	r3, #128	; 0x80
 8005668:	d814      	bhi.n	8005694 <UART_SetConfig+0x210>
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <UART_SetConfig+0x1f0>
 800566e:	2b40      	cmp	r3, #64	; 0x40
 8005670:	d008      	beq.n	8005684 <UART_SetConfig+0x200>
 8005672:	e00f      	b.n	8005694 <UART_SetConfig+0x210>
 8005674:	2300      	movs	r3, #0
 8005676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800567a:	e082      	b.n	8005782 <UART_SetConfig+0x2fe>
 800567c:	2302      	movs	r3, #2
 800567e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005682:	e07e      	b.n	8005782 <UART_SetConfig+0x2fe>
 8005684:	2304      	movs	r3, #4
 8005686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800568a:	e07a      	b.n	8005782 <UART_SetConfig+0x2fe>
 800568c:	2308      	movs	r3, #8
 800568e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005692:	e076      	b.n	8005782 <UART_SetConfig+0x2fe>
 8005694:	2310      	movs	r3, #16
 8005696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800569a:	e072      	b.n	8005782 <UART_SetConfig+0x2fe>
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a35      	ldr	r2, [pc, #212]	; (8005778 <UART_SetConfig+0x2f4>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d12a      	bne.n	80056fc <UART_SetConfig+0x278>
 80056a6:	4b30      	ldr	r3, [pc, #192]	; (8005768 <UART_SetConfig+0x2e4>)
 80056a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056b4:	d01a      	beq.n	80056ec <UART_SetConfig+0x268>
 80056b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056ba:	d81b      	bhi.n	80056f4 <UART_SetConfig+0x270>
 80056bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056c0:	d00c      	beq.n	80056dc <UART_SetConfig+0x258>
 80056c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056c6:	d815      	bhi.n	80056f4 <UART_SetConfig+0x270>
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <UART_SetConfig+0x250>
 80056cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056d0:	d008      	beq.n	80056e4 <UART_SetConfig+0x260>
 80056d2:	e00f      	b.n	80056f4 <UART_SetConfig+0x270>
 80056d4:	2300      	movs	r3, #0
 80056d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056da:	e052      	b.n	8005782 <UART_SetConfig+0x2fe>
 80056dc:	2302      	movs	r3, #2
 80056de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056e2:	e04e      	b.n	8005782 <UART_SetConfig+0x2fe>
 80056e4:	2304      	movs	r3, #4
 80056e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ea:	e04a      	b.n	8005782 <UART_SetConfig+0x2fe>
 80056ec:	2308      	movs	r3, #8
 80056ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056f2:	e046      	b.n	8005782 <UART_SetConfig+0x2fe>
 80056f4:	2310      	movs	r3, #16
 80056f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056fa:	e042      	b.n	8005782 <UART_SetConfig+0x2fe>
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a17      	ldr	r2, [pc, #92]	; (8005760 <UART_SetConfig+0x2dc>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d13a      	bne.n	800577c <UART_SetConfig+0x2f8>
 8005706:	4b18      	ldr	r3, [pc, #96]	; (8005768 <UART_SetConfig+0x2e4>)
 8005708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800570c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005710:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005714:	d01a      	beq.n	800574c <UART_SetConfig+0x2c8>
 8005716:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800571a:	d81b      	bhi.n	8005754 <UART_SetConfig+0x2d0>
 800571c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005720:	d00c      	beq.n	800573c <UART_SetConfig+0x2b8>
 8005722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005726:	d815      	bhi.n	8005754 <UART_SetConfig+0x2d0>
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <UART_SetConfig+0x2b0>
 800572c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005730:	d008      	beq.n	8005744 <UART_SetConfig+0x2c0>
 8005732:	e00f      	b.n	8005754 <UART_SetConfig+0x2d0>
 8005734:	2300      	movs	r3, #0
 8005736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800573a:	e022      	b.n	8005782 <UART_SetConfig+0x2fe>
 800573c:	2302      	movs	r3, #2
 800573e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005742:	e01e      	b.n	8005782 <UART_SetConfig+0x2fe>
 8005744:	2304      	movs	r3, #4
 8005746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800574a:	e01a      	b.n	8005782 <UART_SetConfig+0x2fe>
 800574c:	2308      	movs	r3, #8
 800574e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005752:	e016      	b.n	8005782 <UART_SetConfig+0x2fe>
 8005754:	2310      	movs	r3, #16
 8005756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800575a:	e012      	b.n	8005782 <UART_SetConfig+0x2fe>
 800575c:	cfff69f3 	.word	0xcfff69f3
 8005760:	40008000 	.word	0x40008000
 8005764:	40013800 	.word	0x40013800
 8005768:	40021000 	.word	0x40021000
 800576c:	40004400 	.word	0x40004400
 8005770:	40004800 	.word	0x40004800
 8005774:	40004c00 	.word	0x40004c00
 8005778:	40005000 	.word	0x40005000
 800577c:	2310      	movs	r3, #16
 800577e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4aae      	ldr	r2, [pc, #696]	; (8005a40 <UART_SetConfig+0x5bc>)
 8005788:	4293      	cmp	r3, r2
 800578a:	f040 8097 	bne.w	80058bc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800578e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005792:	2b08      	cmp	r3, #8
 8005794:	d823      	bhi.n	80057de <UART_SetConfig+0x35a>
 8005796:	a201      	add	r2, pc, #4	; (adr r2, 800579c <UART_SetConfig+0x318>)
 8005798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579c:	080057c1 	.word	0x080057c1
 80057a0:	080057df 	.word	0x080057df
 80057a4:	080057c9 	.word	0x080057c9
 80057a8:	080057df 	.word	0x080057df
 80057ac:	080057cf 	.word	0x080057cf
 80057b0:	080057df 	.word	0x080057df
 80057b4:	080057df 	.word	0x080057df
 80057b8:	080057df 	.word	0x080057df
 80057bc:	080057d7 	.word	0x080057d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057c0:	f7fd fb0e 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 80057c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057c6:	e010      	b.n	80057ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057c8:	4b9e      	ldr	r3, [pc, #632]	; (8005a44 <UART_SetConfig+0x5c0>)
 80057ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057cc:	e00d      	b.n	80057ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ce:	f7fd fa71 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 80057d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057d4:	e009      	b.n	80057ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057dc:	e005      	b.n	80057ea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80057e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 8130 	beq.w	8005a52 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	4a94      	ldr	r2, [pc, #592]	; (8005a48 <UART_SetConfig+0x5c4>)
 80057f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057fc:	461a      	mov	r2, r3
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	fbb3 f3f2 	udiv	r3, r3, r2
 8005804:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	4613      	mov	r3, r2
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	4413      	add	r3, r2
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	429a      	cmp	r2, r3
 8005814:	d305      	bcc.n	8005822 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	429a      	cmp	r2, r3
 8005820:	d903      	bls.n	800582a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005828:	e113      	b.n	8005a52 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	2200      	movs	r2, #0
 800582e:	60bb      	str	r3, [r7, #8]
 8005830:	60fa      	str	r2, [r7, #12]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005836:	4a84      	ldr	r2, [pc, #528]	; (8005a48 <UART_SetConfig+0x5c4>)
 8005838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800583c:	b29b      	uxth	r3, r3
 800583e:	2200      	movs	r2, #0
 8005840:	603b      	str	r3, [r7, #0]
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005848:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800584c:	f7fa fd28 	bl	80002a0 <__aeabi_uldivmod>
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	4610      	mov	r0, r2
 8005856:	4619      	mov	r1, r3
 8005858:	f04f 0200 	mov.w	r2, #0
 800585c:	f04f 0300 	mov.w	r3, #0
 8005860:	020b      	lsls	r3, r1, #8
 8005862:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005866:	0202      	lsls	r2, r0, #8
 8005868:	6979      	ldr	r1, [r7, #20]
 800586a:	6849      	ldr	r1, [r1, #4]
 800586c:	0849      	lsrs	r1, r1, #1
 800586e:	2000      	movs	r0, #0
 8005870:	460c      	mov	r4, r1
 8005872:	4605      	mov	r5, r0
 8005874:	eb12 0804 	adds.w	r8, r2, r4
 8005878:	eb43 0905 	adc.w	r9, r3, r5
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	469a      	mov	sl, r3
 8005884:	4693      	mov	fp, r2
 8005886:	4652      	mov	r2, sl
 8005888:	465b      	mov	r3, fp
 800588a:	4640      	mov	r0, r8
 800588c:	4649      	mov	r1, r9
 800588e:	f7fa fd07 	bl	80002a0 <__aeabi_uldivmod>
 8005892:	4602      	mov	r2, r0
 8005894:	460b      	mov	r3, r1
 8005896:	4613      	mov	r3, r2
 8005898:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058a0:	d308      	bcc.n	80058b4 <UART_SetConfig+0x430>
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058a8:	d204      	bcs.n	80058b4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6a3a      	ldr	r2, [r7, #32]
 80058b0:	60da      	str	r2, [r3, #12]
 80058b2:	e0ce      	b.n	8005a52 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80058ba:	e0ca      	b.n	8005a52 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	69db      	ldr	r3, [r3, #28]
 80058c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058c4:	d166      	bne.n	8005994 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80058c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058ca:	2b08      	cmp	r3, #8
 80058cc:	d827      	bhi.n	800591e <UART_SetConfig+0x49a>
 80058ce:	a201      	add	r2, pc, #4	; (adr r2, 80058d4 <UART_SetConfig+0x450>)
 80058d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d4:	080058f9 	.word	0x080058f9
 80058d8:	08005901 	.word	0x08005901
 80058dc:	08005909 	.word	0x08005909
 80058e0:	0800591f 	.word	0x0800591f
 80058e4:	0800590f 	.word	0x0800590f
 80058e8:	0800591f 	.word	0x0800591f
 80058ec:	0800591f 	.word	0x0800591f
 80058f0:	0800591f 	.word	0x0800591f
 80058f4:	08005917 	.word	0x08005917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058f8:	f7fd fa72 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 80058fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058fe:	e014      	b.n	800592a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005900:	f7fd fa84 	bl	8002e0c <HAL_RCC_GetPCLK2Freq>
 8005904:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005906:	e010      	b.n	800592a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005908:	4b4e      	ldr	r3, [pc, #312]	; (8005a44 <UART_SetConfig+0x5c0>)
 800590a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800590c:	e00d      	b.n	800592a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800590e:	f7fd f9d1 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8005912:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005914:	e009      	b.n	800592a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800591a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800591c:	e005      	b.n	800592a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800591e:	2300      	movs	r3, #0
 8005920:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005928:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 8090 	beq.w	8005a52 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	4a44      	ldr	r2, [pc, #272]	; (8005a48 <UART_SetConfig+0x5c4>)
 8005938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800593c:	461a      	mov	r2, r3
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	fbb3 f3f2 	udiv	r3, r3, r2
 8005944:	005a      	lsls	r2, r3, #1
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	085b      	lsrs	r3, r3, #1
 800594c:	441a      	add	r2, r3
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	fbb2 f3f3 	udiv	r3, r2, r3
 8005956:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	2b0f      	cmp	r3, #15
 800595c:	d916      	bls.n	800598c <UART_SetConfig+0x508>
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005964:	d212      	bcs.n	800598c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	b29b      	uxth	r3, r3
 800596a:	f023 030f 	bic.w	r3, r3, #15
 800596e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	085b      	lsrs	r3, r3, #1
 8005974:	b29b      	uxth	r3, r3
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	b29a      	uxth	r2, r3
 800597c:	8bfb      	ldrh	r3, [r7, #30]
 800597e:	4313      	orrs	r3, r2
 8005980:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	8bfa      	ldrh	r2, [r7, #30]
 8005988:	60da      	str	r2, [r3, #12]
 800598a:	e062      	b.n	8005a52 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005992:	e05e      	b.n	8005a52 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005994:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005998:	2b08      	cmp	r3, #8
 800599a:	d828      	bhi.n	80059ee <UART_SetConfig+0x56a>
 800599c:	a201      	add	r2, pc, #4	; (adr r2, 80059a4 <UART_SetConfig+0x520>)
 800599e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a2:	bf00      	nop
 80059a4:	080059c9 	.word	0x080059c9
 80059a8:	080059d1 	.word	0x080059d1
 80059ac:	080059d9 	.word	0x080059d9
 80059b0:	080059ef 	.word	0x080059ef
 80059b4:	080059df 	.word	0x080059df
 80059b8:	080059ef 	.word	0x080059ef
 80059bc:	080059ef 	.word	0x080059ef
 80059c0:	080059ef 	.word	0x080059ef
 80059c4:	080059e7 	.word	0x080059e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059c8:	f7fd fa0a 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 80059cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059ce:	e014      	b.n	80059fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059d0:	f7fd fa1c 	bl	8002e0c <HAL_RCC_GetPCLK2Freq>
 80059d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059d6:	e010      	b.n	80059fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059d8:	4b1a      	ldr	r3, [pc, #104]	; (8005a44 <UART_SetConfig+0x5c0>)
 80059da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059dc:	e00d      	b.n	80059fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059de:	f7fd f969 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 80059e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059e4:	e009      	b.n	80059fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059ec:	e005      	b.n	80059fa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80059f8:	bf00      	nop
    }

    if (pclk != 0U)
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d028      	beq.n	8005a52 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	4a10      	ldr	r2, [pc, #64]	; (8005a48 <UART_SetConfig+0x5c4>)
 8005a06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	085b      	lsrs	r3, r3, #1
 8005a18:	441a      	add	r2, r3
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a22:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	2b0f      	cmp	r3, #15
 8005a28:	d910      	bls.n	8005a4c <UART_SetConfig+0x5c8>
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a30:	d20c      	bcs.n	8005a4c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	60da      	str	r2, [r3, #12]
 8005a3c:	e009      	b.n	8005a52 <UART_SetConfig+0x5ce>
 8005a3e:	bf00      	nop
 8005a40:	40008000 	.word	0x40008000
 8005a44:	00f42400 	.word	0x00f42400
 8005a48:	0800b8f0 	.word	0x0800b8f0
      }
      else
      {
        ret = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2200      	movs	r2, #0
 8005a66:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005a6e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3730      	adds	r7, #48	; 0x30
 8005a76:	46bd      	mov	sp, r7
 8005a78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005a7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00a      	beq.n	8005aa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00a      	beq.n	8005ac8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005acc:	f003 0304 	and.w	r3, r3, #4
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00a      	beq.n	8005aea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aee:	f003 0308 	and.w	r3, r3, #8
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00a      	beq.n	8005b0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b10:	f003 0310 	and.w	r3, r3, #16
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00a      	beq.n	8005b2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b32:	f003 0320 	and.w	r3, r3, #32
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00a      	beq.n	8005b50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d01a      	beq.n	8005b92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b7a:	d10a      	bne.n	8005b92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00a      	beq.n	8005bb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	605a      	str	r2, [r3, #4]
  }
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af02      	add	r7, sp, #8
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bd0:	f7fb fd78 	bl	80016c4 <HAL_GetTick>
 8005bd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0308 	and.w	r3, r3, #8
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d10e      	bne.n	8005c02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005be4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f82f 	bl	8005c56 <UART_WaitOnFlagUntilTimeout>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e025      	b.n	8005c4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d10e      	bne.n	8005c2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f819 	bl	8005c56 <UART_WaitOnFlagUntilTimeout>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e00f      	b.n	8005c4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b09c      	sub	sp, #112	; 0x70
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	603b      	str	r3, [r7, #0]
 8005c62:	4613      	mov	r3, r2
 8005c64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c66:	e0a9      	b.n	8005dbc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6e:	f000 80a5 	beq.w	8005dbc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c72:	f7fb fd27 	bl	80016c4 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d302      	bcc.n	8005c88 <UART_WaitOnFlagUntilTimeout+0x32>
 8005c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d140      	bne.n	8005d0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c9c:	667b      	str	r3, [r7, #100]	; 0x64
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ca8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005caa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005cac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005cae:	e841 2300 	strex	r3, r2, [r1]
 8005cb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1e6      	bne.n	8005c88 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ccc:	f023 0301 	bic.w	r3, r3, #1
 8005cd0:	663b      	str	r3, [r7, #96]	; 0x60
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3308      	adds	r3, #8
 8005cd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cda:	64ba      	str	r2, [r7, #72]	; 0x48
 8005cdc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ce0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e5      	bne.n	8005cba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e069      	b.n	8005dde <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d051      	beq.n	8005dbc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d26:	d149      	bne.n	8005dbc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3a:	e853 3f00 	ldrex	r3, [r3]
 8005d3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d50:	637b      	str	r3, [r7, #52]	; 0x34
 8005d52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d58:	e841 2300 	strex	r3, r2, [r1]
 8005d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e6      	bne.n	8005d32 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3308      	adds	r3, #8
 8005d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	e853 3f00 	ldrex	r3, [r3]
 8005d72:	613b      	str	r3, [r7, #16]
   return(result);
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f023 0301 	bic.w	r3, r3, #1
 8005d7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3308      	adds	r3, #8
 8005d82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d84:	623a      	str	r2, [r7, #32]
 8005d86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	69f9      	ldr	r1, [r7, #28]
 8005d8a:	6a3a      	ldr	r2, [r7, #32]
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e5      	bne.n	8005d64 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e010      	b.n	8005dde <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	69da      	ldr	r2, [r3, #28]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	bf0c      	ite	eq
 8005dcc:	2301      	moveq	r3, #1
 8005dce:	2300      	movne	r3, #0
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	f43f af46 	beq.w	8005c68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3770      	adds	r7, #112	; 0x70
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b085      	sub	sp, #20
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d101      	bne.n	8005dfc <HAL_UARTEx_DisableFifoMode+0x16>
 8005df8:	2302      	movs	r3, #2
 8005dfa:	e027      	b.n	8005e4c <HAL_UARTEx_DisableFifoMode+0x66>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2224      	movs	r2, #36	; 0x24
 8005e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0201 	bic.w	r2, r2, #1
 8005e22:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e2a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d101      	bne.n	8005e70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e02d      	b.n	8005ecc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2224      	movs	r2, #36	; 0x24
 8005e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0201 	bic.w	r2, r2, #1
 8005e96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f84f 	bl	8005f50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d101      	bne.n	8005eec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	e02d      	b.n	8005f48 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2224      	movs	r2, #36	; 0x24
 8005ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 0201 	bic.w	r2, r2, #1
 8005f12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	430a      	orrs	r2, r1
 8005f26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f811 	bl	8005f50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d108      	bne.n	8005f72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f70:	e031      	b.n	8005fd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f72:	2308      	movs	r3, #8
 8005f74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f76:	2308      	movs	r3, #8
 8005f78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	0e5b      	lsrs	r3, r3, #25
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	0f5b      	lsrs	r3, r3, #29
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	f003 0307 	and.w	r3, r3, #7
 8005f98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f9a:	7bbb      	ldrb	r3, [r7, #14]
 8005f9c:	7b3a      	ldrb	r2, [r7, #12]
 8005f9e:	4911      	ldr	r1, [pc, #68]	; (8005fe4 <UARTEx_SetNbDataToProcess+0x94>)
 8005fa0:	5c8a      	ldrb	r2, [r1, r2]
 8005fa2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fa6:	7b3a      	ldrb	r2, [r7, #12]
 8005fa8:	490f      	ldr	r1, [pc, #60]	; (8005fe8 <UARTEx_SetNbDataToProcess+0x98>)
 8005faa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fac:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	7b7a      	ldrb	r2, [r7, #13]
 8005fbc:	4909      	ldr	r1, [pc, #36]	; (8005fe4 <UARTEx_SetNbDataToProcess+0x94>)
 8005fbe:	5c8a      	ldrb	r2, [r1, r2]
 8005fc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005fc4:	7b7a      	ldrb	r2, [r7, #13]
 8005fc6:	4908      	ldr	r1, [pc, #32]	; (8005fe8 <UARTEx_SetNbDataToProcess+0x98>)
 8005fc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fca:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005fd6:	bf00      	nop
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	0800b908 	.word	0x0800b908
 8005fe8:	0800b910 	.word	0x0800b910

08005fec <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	6812      	ldr	r2, [r2, #0]
 8006004:	f023 0101 	bic.w	r1, r3, #1
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	2b08      	cmp	r3, #8
 8006014:	d102      	bne.n	800601c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006016:	2340      	movs	r3, #64	; 0x40
 8006018:	617b      	str	r3, [r7, #20]
 800601a:	e001      	b.n	8006020 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800601c:	2300      	movs	r3, #0
 800601e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800602c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006032:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006038:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800603e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8006044:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800604a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8006050:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8006056:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800605c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8006062:	4313      	orrs	r3, r2
 8006064:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	4313      	orrs	r3, r2
 800606e:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	4313      	orrs	r3, r2
 8006078:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	4313      	orrs	r3, r2
 8006082:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800608e:	4b23      	ldr	r3, [pc, #140]	; (800611c <FMC_NORSRAM_Init+0x130>)
 8006090:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006098:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060a0:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80060a8:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80060b0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	43db      	mvns	r3, r3
 80060c0:	ea02 0103 	and.w	r1, r2, r3
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	4319      	orrs	r1, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060da:	d10c      	bne.n	80060f6 <FMC_NORSRAM_Init+0x10a>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d008      	beq.n	80060f6 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f0:	431a      	orrs	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d006      	beq.n	800610c <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006106:	431a      	orrs	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	371c      	adds	r7, #28
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	0008fb7f 	.word	0x0008fb7f

08006120 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006120:	b480      	push	{r7}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	1c5a      	adds	r2, r3, #1
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	431a      	orrs	r2, r3
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	021b      	lsls	r3, r3, #8
 8006148:	431a      	orrs	r2, r3
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	079b      	lsls	r3, r3, #30
 8006150:	431a      	orrs	r2, r3
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	041b      	lsls	r3, r3, #16
 8006158:	431a      	orrs	r2, r3
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	3b01      	subs	r3, #1
 8006160:	051b      	lsls	r3, r3, #20
 8006162:	431a      	orrs	r2, r3
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	3b02      	subs	r3, #2
 800616a:	061b      	lsls	r3, r3, #24
 800616c:	ea42 0103 	orr.w	r1, r2, r3
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	69db      	ldr	r3, [r3, #28]
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	3201      	adds	r2, #1
 8006178:	4319      	orrs	r1, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006188:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800618c:	d113      	bne.n	80061b6 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006196:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	3b01      	subs	r3, #1
 800619e:	051b      	lsls	r3, r3, #20
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	431a      	orrs	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	371c      	adds	r7, #28
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061d8:	d121      	bne.n	800621e <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e2:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	6819      	ldr	r1, [r3, #0]
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	4319      	orrs	r1, r3
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	021b      	lsls	r3, r3, #8
 80061f8:	4319      	orrs	r1, r3
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	079b      	lsls	r3, r3, #30
 8006200:	4319      	orrs	r1, r3
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	4319      	orrs	r1, r3
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	041b      	lsls	r3, r3, #16
 800620e:	430b      	orrs	r3, r1
 8006210:	ea42 0103 	orr.w	r1, r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800621c:	e005      	b.n	800622a <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d009      	beq.n	800625c <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8006248:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800624a:	461a      	mov	r2, r3
        err.type, err.code);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8006252:	6839      	ldr	r1, [r7, #0]
 8006254:	4806      	ldr	r0, [pc, #24]	; (8006270 <ai_log_err+0x38>)
 8006256:	f004 f9f1 	bl	800a63c <iprintf>
 800625a:	e008      	b.n	800626e <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800625c:	793b      	ldrb	r3, [r7, #4]
 800625e:	4619      	mov	r1, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8006266:	461a      	mov	r2, r3
 8006268:	4802      	ldr	r0, [pc, #8]	; (8006274 <ai_log_err+0x3c>)
 800626a:	f004 f9e7 	bl	800a63c <iprintf>

  do {} while (1);
 800626e:	e7fe      	b.n	800626e <ai_log_err+0x36>
 8006270:	0800b780 	.word	0x0800b780
 8006274:	0800b7b4 	.word	0x0800b7b4

08006278 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_saline_network_create_and_init(&saline_network, act_addr, NULL);
 8006280:	2200      	movs	r2, #0
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	4828      	ldr	r0, [pc, #160]	; (8006328 <ai_boostrap+0xb0>)
 8006286:	f000 fc77 	bl	8006b78 <ai_saline_network_create_and_init>
 800628a:	4603      	mov	r3, r0
 800628c:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 800628e:	7b3b      	ldrb	r3, [r7, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d006      	beq.n	80062a2 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_saline_network_create_and_init");
 8006294:	4925      	ldr	r1, [pc, #148]	; (800632c <ai_boostrap+0xb4>)
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f7ff ffce 	bl	8006238 <ai_log_err>
    return -1;
 800629c:	f04f 33ff 	mov.w	r3, #4294967295
 80062a0:	e03e      	b.n	8006320 <ai_boostrap+0xa8>
  }

  ai_input = ai_saline_network_inputs_get(saline_network, NULL);
 80062a2:	4b21      	ldr	r3, [pc, #132]	; (8006328 <ai_boostrap+0xb0>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2100      	movs	r1, #0
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 fcd9 	bl	8006c60 <ai_saline_network_inputs_get>
 80062ae:	4603      	mov	r3, r0
 80062b0:	4a1f      	ldr	r2, [pc, #124]	; (8006330 <ai_boostrap+0xb8>)
 80062b2:	6013      	str	r3, [r2, #0]
  ai_output = ai_saline_network_outputs_get(saline_network, NULL);
 80062b4:	4b1c      	ldr	r3, [pc, #112]	; (8006328 <ai_boostrap+0xb0>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2100      	movs	r1, #0
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 fcea 	bl	8006c94 <ai_saline_network_outputs_get>
 80062c0:	4603      	mov	r3, r0
 80062c2:	4a1c      	ldr	r2, [pc, #112]	; (8006334 <ai_boostrap+0xbc>)
 80062c4:	6013      	str	r3, [r2, #0]

#if defined(AI_SALINE_NETWORK_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_SALINE_NETWORK_IN_NUM; idx++) {
 80062c6:	2300      	movs	r3, #0
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	e00f      	b.n	80062ec <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 80062cc:	4b18      	ldr	r3, [pc, #96]	; (8006330 <ai_boostrap+0xb8>)
 80062ce:	6819      	ldr	r1, [r3, #0]
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	4613      	mov	r3, r2
 80062d4:	00db      	lsls	r3, r3, #3
 80062d6:	1a9b      	subs	r3, r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	440b      	add	r3, r1
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	4916      	ldr	r1, [pc, #88]	; (8006338 <ai_boostrap+0xc0>)
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_SALINE_NETWORK_IN_NUM; idx++) {
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	3301      	adds	r3, #1
 80062ea:	617b      	str	r3, [r7, #20]
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	ddec      	ble.n	80062cc <ai_boostrap+0x54>

#if defined(AI_SALINE_NETWORK_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_SALINE_NETWORK_OUT_NUM; idx++) {
 80062f2:	2300      	movs	r3, #0
 80062f4:	613b      	str	r3, [r7, #16]
 80062f6:	e00f      	b.n	8006318 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 80062f8:	4b0e      	ldr	r3, [pc, #56]	; (8006334 <ai_boostrap+0xbc>)
 80062fa:	6819      	ldr	r1, [r3, #0]
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	4613      	mov	r3, r2
 8006300:	00db      	lsls	r3, r3, #3
 8006302:	1a9b      	subs	r3, r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	440b      	add	r3, r1
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	490c      	ldr	r1, [pc, #48]	; (800633c <ai_boostrap+0xc4>)
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_SALINE_NETWORK_OUT_NUM; idx++) {
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	3301      	adds	r3, #1
 8006316:	613b      	str	r3, [r7, #16]
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	ddec      	ble.n	80062f8 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_SALINE_NETWORK_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3718      	adds	r7, #24
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	20028640 	.word	0x20028640
 800632c:	0800b7e4 	.word	0x0800b7e4
 8006330:	20028644 	.word	0x20028644
 8006334:	20028648 	.word	0x20028648
 8006338:	2000102c 	.word	0x2000102c
 800633c:	20001030 	.word	0x20001030

08006340 <ai_run>:

static int ai_run(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_saline_network_run(saline_network, ai_input, ai_output);
 8006346:	4b0f      	ldr	r3, [pc, #60]	; (8006384 <ai_run+0x44>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a0f      	ldr	r2, [pc, #60]	; (8006388 <ai_run+0x48>)
 800634c:	6811      	ldr	r1, [r2, #0]
 800634e:	4a0f      	ldr	r2, [pc, #60]	; (800638c <ai_run+0x4c>)
 8006350:	6812      	ldr	r2, [r2, #0]
 8006352:	4618      	mov	r0, r3
 8006354:	f000 fcf4 	bl	8006d40 <ai_saline_network_run>
 8006358:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d00c      	beq.n	800637a <ai_run+0x3a>
    ai_log_err(ai_saline_network_get_error(saline_network),
 8006360:	4b08      	ldr	r3, [pc, #32]	; (8006384 <ai_run+0x44>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4618      	mov	r0, r3
 8006366:	f000 fbe5 	bl	8006b34 <ai_saline_network_get_error>
 800636a:	4603      	mov	r3, r0
 800636c:	4908      	ldr	r1, [pc, #32]	; (8006390 <ai_run+0x50>)
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff ff62 	bl	8006238 <ai_log_err>
        "ai_saline_network_run");
    return -1;
 8006374:	f04f 33ff 	mov.w	r3, #4294967295
 8006378:	e000      	b.n	800637c <ai_run+0x3c>
  }

  return 0;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	20028640 	.word	0x20028640
 8006388:	20028644 	.word	0x20028644
 800638c:	20028648 	.word	0x20028648
 8006390:	0800b808 	.word	0x0800b808

08006394 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 8006394:	b590      	push	{r4, r7, lr}
 8006396:	f5ad 4d40 	sub.w	sp, sp, #49152	; 0xc000
 800639a:	b089      	sub	sp, #36	; 0x24
 800639c:	af00      	add	r7, sp, #0
 800639e:	f107 0320 	add.w	r3, r7, #32
 80063a2:	f843 0c1c 	str.w	r0, [r3, #-28]
  */

	/*MNIST EXAMPLE*/
	//////////////////

	 uint8_t tmp[4] = {0};
 80063a6:	2300      	movs	r3, #0
 80063a8:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 80063ac:	f102 020c 	add.w	r2, r2, #12
 80063b0:	6013      	str	r3, [r2, #0]
	 //uint8_t test_data[12288] = {0};
	float input[64][64][3] = {0};
 80063b2:	f107 0320 	add.w	r3, r7, #32
 80063b6:	3b14      	subs	r3, #20
 80063b8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80063bc:	2100      	movs	r1, #0
 80063be:	4618      	mov	r0, r3
 80063c0:	f004 f854 	bl	800a46c <memset>

	int i,j,k,z;
	// process RGB image
	for (z=0; z<3;z++){
 80063c4:	2300      	movs	r3, #0
 80063c6:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 80063ca:	f102 0210 	add.w	r2, r2, #16
 80063ce:	6013      	str	r3, [r2, #0]
 80063d0:	e0b6      	b.n	8006540 <acquire_and_process_data+0x1ac>
		for (i = 0; i < 64; i++){
 80063d2:	2300      	movs	r3, #0
 80063d4:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 80063d8:	f102 021c 	add.w	r2, r2, #28
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	e09c      	b.n	800651a <acquire_and_process_data+0x186>
			for (j = 0; j < 64; j++){
 80063e0:	2300      	movs	r3, #0
 80063e2:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 80063e6:	f102 0218 	add.w	r2, r2, #24
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	e082      	b.n	80064f4 <acquire_and_process_data+0x160>
				HAL_UART_Receive(&huart2, (uint8_t *) tmp, sizeof(tmp), 100);
 80063ee:	f507 4140 	add.w	r1, r7, #49152	; 0xc000
 80063f2:	f101 010c 	add.w	r1, r1, #12
 80063f6:	2364      	movs	r3, #100	; 0x64
 80063f8:	2204      	movs	r2, #4
 80063fa:	4859      	ldr	r0, [pc, #356]	; (8006560 <acquire_and_process_data+0x1cc>)
 80063fc:	f7fe ff6e 	bl	80052dc <HAL_UART_Receive>
				input[i][j][z] = *(float*) &tmp;
 8006400:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8006404:	f103 030c 	add.w	r3, r3, #12
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	f107 0320 	add.w	r3, r7, #32
 800640e:	461c      	mov	r4, r3
 8006410:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8006414:	f103 0318 	add.w	r3, r3, #24
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 800641e:	f102 021c 	add.w	r2, r2, #28
 8006422:	6811      	ldr	r1, [r2, #0]
 8006424:	461a      	mov	r2, r3
 8006426:	0052      	lsls	r2, r2, #1
 8006428:	441a      	add	r2, r3
 800642a:	460b      	mov	r3, r1
 800642c:	005b      	lsls	r3, r3, #1
 800642e:	440b      	add	r3, r1
 8006430:	019b      	lsls	r3, r3, #6
 8006432:	441a      	add	r2, r3
 8006434:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8006438:	f103 0310 	add.w	r3, r3, #16
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4413      	add	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4423      	add	r3, r4
 8006444:	3b14      	subs	r3, #20
 8006446:	6018      	str	r0, [r3, #0]
				for ( k = 0; k < 4; k++){
 8006448:	2300      	movs	r3, #0
 800644a:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 800644e:	f102 0214 	add.w	r2, r2, #20
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	e03c      	b.n	80064d0 <acquire_and_process_data+0x13c>
					// Linearise the image and divid it in a 8bit buffer.
					((uint8_t *) data)[((i*192+j*3+z)*4)+k] = tmp[k];
 8006456:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 800645a:	f103 031c 	add.w	r3, r3, #28
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	4613      	mov	r3, r2
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	4413      	add	r3, r2
 8006466:	019b      	lsls	r3, r3, #6
 8006468:	4619      	mov	r1, r3
 800646a:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 800646e:	f103 0318 	add.w	r3, r3, #24
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	4613      	mov	r3, r2
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	4413      	add	r3, r2
 800647a:	18ca      	adds	r2, r1, r3
 800647c:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8006480:	f103 0310 	add.w	r3, r3, #16
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4413      	add	r3, r2
 8006488:	009a      	lsls	r2, r3, #2
 800648a:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 800648e:	f103 0314 	add.w	r3, r3, #20
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4413      	add	r3, r2
 8006496:	461a      	mov	r2, r3
 8006498:	f107 0320 	add.w	r3, r7, #32
 800649c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80064a0:	4413      	add	r3, r2
 80064a2:	f507 4140 	add.w	r1, r7, #49152	; 0xc000
 80064a6:	f101 010c 	add.w	r1, r1, #12
 80064aa:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 80064ae:	f102 0214 	add.w	r2, r2, #20
 80064b2:	6812      	ldr	r2, [r2, #0]
 80064b4:	440a      	add	r2, r1
 80064b6:	7812      	ldrb	r2, [r2, #0]
 80064b8:	701a      	strb	r2, [r3, #0]
				for ( k = 0; k < 4; k++){
 80064ba:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 80064be:	f103 0314 	add.w	r3, r3, #20
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3301      	adds	r3, #1
 80064c6:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 80064ca:	f102 0214 	add.w	r2, r2, #20
 80064ce:	6013      	str	r3, [r2, #0]
 80064d0:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 80064d4:	f103 0314 	add.w	r3, r3, #20
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b03      	cmp	r3, #3
 80064dc:	ddbb      	ble.n	8006456 <acquire_and_process_data+0xc2>
			for (j = 0; j < 64; j++){
 80064de:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 80064e2:	f103 0318 	add.w	r3, r3, #24
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3301      	adds	r3, #1
 80064ea:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 80064ee:	f102 0218 	add.w	r2, r2, #24
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 80064f8:	f103 0318 	add.w	r3, r3, #24
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b3f      	cmp	r3, #63	; 0x3f
 8006500:	f77f af75 	ble.w	80063ee <acquire_and_process_data+0x5a>
		for (i = 0; i < 64; i++){
 8006504:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8006508:	f103 031c 	add.w	r3, r3, #28
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	3301      	adds	r3, #1
 8006510:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8006514:	f102 021c 	add.w	r2, r2, #28
 8006518:	6013      	str	r3, [r2, #0]
 800651a:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 800651e:	f103 031c 	add.w	r3, r3, #28
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b3f      	cmp	r3, #63	; 0x3f
 8006526:	f77f af5b 	ble.w	80063e0 <acquire_and_process_data+0x4c>
	for (z=0; z<3;z++){
 800652a:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 800652e:	f103 0310 	add.w	r3, r3, #16
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3301      	adds	r3, #1
 8006536:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 800653a:	f102 0210 	add.w	r2, r2, #16
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8006544:	f103 0310 	add.w	r3, r3, #16
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b02      	cmp	r3, #2
 800654c:	f77f af41 	ble.w	80063d2 <acquire_and_process_data+0x3e>
				HAL_UART_Transmit(&huart2, (uint8_t *) tmp, sizeof(tmp), 100);
			}
		}
	#endif

  return 0;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	f507 4740 	add.w	r7, r7, #49152	; 0xc000
 8006558:	3724      	adds	r7, #36	; 0x24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd90      	pop	{r4, r7, pc}
 800655e:	bf00      	nop
 8006560:	20000eac 	.word	0x20000eac

08006564 <post_process>:

int post_process(ai_i8* data[])
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b08c      	sub	sp, #48	; 0x30
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  */

	/*MNIST EXAMPLE*/
	//////////////////

	unsigned char output_to_be_tx[3] = "010";
 800656c:	4a38      	ldr	r2, [pc, #224]	; (8006650 <post_process+0xec>)
 800656e:	f107 0320 	add.w	r3, r7, #32
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	4611      	mov	r1, r2
 8006576:	8019      	strh	r1, [r3, #0]
 8006578:	3302      	adds	r3, #2
 800657a:	0c12      	lsrs	r2, r2, #16
 800657c:	701a      	strb	r2, [r3, #0]
	uint8_t *output = data; // don't care about the signed value of ai_i8...
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	627b      	str	r3, [r7, #36]	; 0x24

	float prob_classes[4] = {0};
 8006582:	f107 0310 	add.w	r3, r7, #16
 8006586:	2200      	movs	r2, #0
 8006588:	601a      	str	r2, [r3, #0]
 800658a:	605a      	str	r2, [r3, #4]
 800658c:	609a      	str	r2, [r3, #8]
 800658e:	60da      	str	r2, [r3, #12]
	int i,j;
	for (i = 0; i < 4; i++){
 8006590:	2300      	movs	r3, #0
 8006592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006594:	e024      	b.n	80065e0 <post_process+0x7c>
		uint8_t tmp[4] = {0};
 8006596:	2300      	movs	r3, #0
 8006598:	60fb      	str	r3, [r7, #12]
		for (j=0; j < 4; j++){
 800659a:	2300      	movs	r3, #0
 800659c:	62bb      	str	r3, [r7, #40]	; 0x28
 800659e:	e010      	b.n	80065c2 <post_process+0x5e>
			tmp[j] = output[i*4+j];
 80065a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a2:	009a      	lsls	r2, r3, #2
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	4413      	add	r3, r2
 80065a8:	461a      	mov	r2, r3
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	4413      	add	r3, r2
 80065ae:	7819      	ldrb	r1, [r3, #0]
 80065b0:	f107 020c 	add.w	r2, r7, #12
 80065b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b6:	4413      	add	r3, r2
 80065b8:	460a      	mov	r2, r1
 80065ba:	701a      	strb	r2, [r3, #0]
		for (j=0; j < 4; j++){
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	3301      	adds	r3, #1
 80065c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80065c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c4:	2b03      	cmp	r3, #3
 80065c6:	ddeb      	ble.n	80065a0 <post_process+0x3c>
		}
		prob_classes[i] = *(float*) &tmp;
 80065c8:	f107 030c 	add.w	r3, r7, #12
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	3330      	adds	r3, #48	; 0x30
 80065d4:	443b      	add	r3, r7
 80065d6:	3b20      	subs	r3, #32
 80065d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 4; i++){
 80065da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065dc:	3301      	adds	r3, #1
 80065de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	ddd7      	ble.n	8006596 <post_process+0x32>
	}

	HAL_UART_Transmit(&huart2, (uint8_t *) output_to_be_tx, sizeof(output_to_be_tx),100);
 80065e6:	f107 0120 	add.w	r1, r7, #32
 80065ea:	2364      	movs	r3, #100	; 0x64
 80065ec:	2203      	movs	r2, #3
 80065ee:	4819      	ldr	r0, [pc, #100]	; (8006654 <post_process+0xf0>)
 80065f0:	f7fe fddd 	bl	80051ae <HAL_UART_Transmit>
	for(i = 0; i < 4; i++){
 80065f4:	2300      	movs	r3, #0
 80065f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065f8:	e022      	b.n	8006640 <post_process+0xdc>
		uint8_t tmp[4] = {0};
 80065fa:	2300      	movs	r3, #0
 80065fc:	60bb      	str	r3, [r7, #8]
		for (j=0; j < 4; j++){
 80065fe:	2300      	movs	r3, #0
 8006600:	62bb      	str	r3, [r7, #40]	; 0x28
 8006602:	e010      	b.n	8006626 <post_process+0xc2>
			tmp[j] = output[i*4+j];
 8006604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006606:	009a      	lsls	r2, r3, #2
 8006608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660a:	4413      	add	r3, r2
 800660c:	461a      	mov	r2, r3
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	4413      	add	r3, r2
 8006612:	7819      	ldrb	r1, [r3, #0]
 8006614:	f107 0208 	add.w	r2, r7, #8
 8006618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661a:	4413      	add	r3, r2
 800661c:	460a      	mov	r2, r1
 800661e:	701a      	strb	r2, [r3, #0]
		for (j=0; j < 4; j++){
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	3301      	adds	r3, #1
 8006624:	62bb      	str	r3, [r7, #40]	; 0x28
 8006626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006628:	2b03      	cmp	r3, #3
 800662a:	ddeb      	ble.n	8006604 <post_process+0xa0>
		}
		HAL_UART_Transmit(&huart2, (uint8_t *) tmp, sizeof(tmp), 100);
 800662c:	f107 0108 	add.w	r1, r7, #8
 8006630:	2364      	movs	r3, #100	; 0x64
 8006632:	2204      	movs	r2, #4
 8006634:	4807      	ldr	r0, [pc, #28]	; (8006654 <post_process+0xf0>)
 8006636:	f7fe fdba 	bl	80051ae <HAL_UART_Transmit>
	for(i = 0; i < 4; i++){
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	3301      	adds	r3, #1
 800663e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006642:	2b03      	cmp	r3, #3
 8006644:	ddd9      	ble.n	80065fa <post_process+0x96>
	}

  return 0;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3730      	adds	r7, #48	; 0x30
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	0800b820 	.word	0x0800b820
 8006654:	20000eac 	.word	0x20000eac

08006658 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 800665c:	4803      	ldr	r0, [pc, #12]	; (800666c <MX_X_CUBE_AI_Init+0x14>)
 800665e:	f004 f873 	bl	800a748 <puts>

  ai_boostrap(data_activations0);
 8006662:	4803      	ldr	r0, [pc, #12]	; (8006670 <MX_X_CUBE_AI_Init+0x18>)
 8006664:	f7ff fe08 	bl	8006278 <ai_boostrap>
    /* USER CODE END 5 */
}
 8006668:	bf00      	nop
 800666a:	bd80      	pop	{r7, pc}
 800666c:	0800b824 	.word	0x0800b824
 8006670:	2000000c 	.word	0x2000000c

08006674 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b088      	sub	sp, #32
 8006678:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 800667a:	f04f 33ff 	mov.w	r3, #4294967295
 800667e:	61fb      	str	r3, [r7, #28]
  uint8_t *in_data = NULL;
 8006680:	2300      	movs	r3, #0
 8006682:	617b      	str	r3, [r7, #20]
  uint8_t *out_data = NULL;
 8006684:	2300      	movs	r3, #0
 8006686:	613b      	str	r3, [r7, #16]


  printf("TEMPLATE - run - main loop\r\n");
 8006688:	4836      	ldr	r0, [pc, #216]	; (8006764 <MX_X_CUBE_AI_Process+0xf0>)
 800668a:	f004 f85d 	bl	800a748 <puts>

  if (saline_network) {
 800668e:	4b36      	ldr	r3, [pc, #216]	; (8006768 <MX_X_CUBE_AI_Process+0xf4>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d054      	beq.n	8006740 <MX_X_CUBE_AI_Process+0xcc>

	#if defined(AI_SALINE_NETWORK_INPUTS_IN_ACTIVATIONS)
		in_data = ai_input[0].data;
 8006696:	4b35      	ldr	r3, [pc, #212]	; (800676c <MX_X_CUBE_AI_Process+0xf8>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	617b      	str	r3, [r7, #20]
	#else
		in_data = in_data_s;
	#endif

	#if defined(AI_SALINE_NETWORK_OUTPUTS_IN_ACTIVATIONS)
		out_data = ai_output[0].data;
 800669e:	4b34      	ldr	r3, [pc, #208]	; (8006770 <MX_X_CUBE_AI_Process+0xfc>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	613b      	str	r3, [r7, #16]
		out_data = out_data_s;
	#endif
    do {
      /* 0 - Synchronisation with Python Script */

	  unsigned char ack[4] = "0000";
 80066a6:	f04f 3330 	mov.w	r3, #808464432	; 0x30303030
 80066aa:	60fb      	str	r3, [r7, #12]
	  unsigned char return_ack[3] = "101";
 80066ac:	4a31      	ldr	r2, [pc, #196]	; (8006774 <MX_X_CUBE_AI_Process+0x100>)
 80066ae:	f107 0308 	add.w	r3, r7, #8
 80066b2:	6812      	ldr	r2, [r2, #0]
 80066b4:	4611      	mov	r1, r2
 80066b6:	8019      	strh	r1, [r3, #0]
 80066b8:	3302      	adds	r3, #2
 80066ba:	0c12      	lsrs	r2, r2, #16
 80066bc:	701a      	strb	r2, [r3, #0]
	  uint8_t sync = 0;
 80066be:	2300      	movs	r3, #0
 80066c0:	76fb      	strb	r3, [r7, #27]
	  uint8_t ack_received = 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	76bb      	strb	r3, [r7, #26]

	  // Synchronisation loop
	  while(sync == 0){
 80066c6:	e020      	b.n	800670a <MX_X_CUBE_AI_Process+0x96>
		  while(ack_received != 1){
			  HAL_UART_Receive(&huart2, (uint8_t *) ack, sizeof(ack), 100);
 80066c8:	f107 010c 	add.w	r1, r7, #12
 80066cc:	2364      	movs	r3, #100	; 0x64
 80066ce:	2204      	movs	r2, #4
 80066d0:	4829      	ldr	r0, [pc, #164]	; (8006778 <MX_X_CUBE_AI_Process+0x104>)
 80066d2:	f7fe fe03 	bl	80052dc <HAL_UART_Receive>
			  if ((ack[0] == 's') && (ack[1] == 'y') && (ack[2] == 'n') && (ack[3] == 'c')){
 80066d6:	7b3b      	ldrb	r3, [r7, #12]
 80066d8:	2b73      	cmp	r3, #115	; 0x73
 80066da:	d113      	bne.n	8006704 <MX_X_CUBE_AI_Process+0x90>
 80066dc:	7b7b      	ldrb	r3, [r7, #13]
 80066de:	2b79      	cmp	r3, #121	; 0x79
 80066e0:	d110      	bne.n	8006704 <MX_X_CUBE_AI_Process+0x90>
 80066e2:	7bbb      	ldrb	r3, [r7, #14]
 80066e4:	2b6e      	cmp	r3, #110	; 0x6e
 80066e6:	d10d      	bne.n	8006704 <MX_X_CUBE_AI_Process+0x90>
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
 80066ea:	2b63      	cmp	r3, #99	; 0x63
 80066ec:	d10a      	bne.n	8006704 <MX_X_CUBE_AI_Process+0x90>
				  ack_received = 1;
 80066ee:	2301      	movs	r3, #1
 80066f0:	76bb      	strb	r3, [r7, #26]
				  HAL_UART_Transmit(&huart2, (uint8_t *) return_ack, sizeof(return_ack), 100);
 80066f2:	f107 0108 	add.w	r1, r7, #8
 80066f6:	2364      	movs	r3, #100	; 0x64
 80066f8:	2203      	movs	r2, #3
 80066fa:	481f      	ldr	r0, [pc, #124]	; (8006778 <MX_X_CUBE_AI_Process+0x104>)
 80066fc:	f7fe fd57 	bl	80051ae <HAL_UART_Transmit>
				  sync = 1;
 8006700:	2301      	movs	r3, #1
 8006702:	76fb      	strb	r3, [r7, #27]
		  while(ack_received != 1){
 8006704:	7ebb      	ldrb	r3, [r7, #26]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d1de      	bne.n	80066c8 <MX_X_CUBE_AI_Process+0x54>
	  while(sync == 0){
 800670a:	7efb      	ldrb	r3, [r7, #27]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d0f9      	beq.n	8006704 <MX_X_CUBE_AI_Process+0x90>

		  }
	  }

      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(in_data);//data_ins);
 8006710:	6978      	ldr	r0, [r7, #20]
 8006712:	f7ff fe3f 	bl	8006394 <acquire_and_process_data>
 8006716:	61f8      	str	r0, [r7, #28]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d102      	bne.n	8006724 <MX_X_CUBE_AI_Process+0xb0>
        res = ai_run();
 800671e:	f7ff fe0f 	bl	8006340 <ai_run>
 8006722:	61f8      	str	r0, [r7, #28]
      /* 3- post-process the predictions */
      if (res == 0)
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d103      	bne.n	8006732 <MX_X_CUBE_AI_Process+0xbe>
        res = post_process(out_data);//data_outs);
 800672a:	6938      	ldr	r0, [r7, #16]
 800672c:	f7ff ff1a 	bl	8006564 <post_process>
 8006730:	61f8      	str	r0, [r7, #28]
      HAL_Delay(500);
 8006732:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006736:	f7fa ffd1 	bl	80016dc <HAL_Delay>
    } while (res==0);
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0b2      	beq.n	80066a6 <MX_X_CUBE_AI_Process+0x32>
  }

  if (res) {
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00a      	beq.n	800675c <MX_X_CUBE_AI_Process+0xe8>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8006746:	2311      	movs	r3, #17
 8006748:	713b      	strb	r3, [r7, #4]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2210      	movs	r2, #16
 800674e:	f362 231f 	bfi	r3, r2, #8, #24
 8006752:	607b      	str	r3, [r7, #4]
    ai_log_err(err, "Process has FAILED");
 8006754:	4909      	ldr	r1, [pc, #36]	; (800677c <MX_X_CUBE_AI_Process+0x108>)
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7ff fd6e 	bl	8006238 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 800675c:	bf00      	nop
 800675e:	3720      	adds	r7, #32
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	0800b844 	.word	0x0800b844
 8006768:	20028640 	.word	0x20028640
 800676c:	20028644 	.word	0x20028644
 8006770:	20028648 	.word	0x20028648
 8006774:	0800b874 	.word	0x0800b874
 8006778:	20000eac 	.word	0x20000eac
 800677c:	0800b860 	.word	0x0800b860

08006780 <saline_network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool saline_network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_saline_network_activations_map, 1, params)) {
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	2101      	movs	r1, #1
 800678e:	484c      	ldr	r0, [pc, #304]	; (80068c0 <saline_network_configure_activations+0x140>)
 8006790:	f000 fbb4 	bl	8006efc <ai_platform_get_activations_map>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	f000 8088 	beq.w	80068ac <saline_network_configure_activations+0x12c>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_saline_network_activations_map[0] + 95744);
 800679c:	4b48      	ldr	r3, [pc, #288]	; (80068c0 <saline_network_configure_activations+0x140>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80067a4:	4a47      	ldr	r2, [pc, #284]	; (80068c4 <saline_network_configure_activations+0x144>)
 80067a6:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_saline_network_activations_map[0] + 95744);
 80067a8:	4b45      	ldr	r3, [pc, #276]	; (80068c0 <saline_network_configure_activations+0x140>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80067b0:	4a44      	ldr	r2, [pc, #272]	; (80068c4 <saline_network_configure_activations+0x144>)
 80067b2:	60d3      	str	r3, [r2, #12]
    
    conv2d_4_conv2d_scratch0_array.data = AI_PTR(g_saline_network_activations_map[0] + 144896);
 80067b4:	4b42      	ldr	r3, [pc, #264]	; (80068c0 <saline_network_configure_activations+0x140>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 80067bc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80067c0:	4a41      	ldr	r2, [pc, #260]	; (80068c8 <saline_network_configure_activations+0x148>)
 80067c2:	6093      	str	r3, [r2, #8]
    conv2d_4_conv2d_scratch0_array.data_start = AI_PTR(g_saline_network_activations_map[0] + 144896);
 80067c4:	4b3e      	ldr	r3, [pc, #248]	; (80068c0 <saline_network_configure_activations+0x140>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 80067cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80067d0:	4a3d      	ldr	r2, [pc, #244]	; (80068c8 <saline_network_configure_activations+0x148>)
 80067d2:	60d3      	str	r3, [r2, #12]
    
    conv2d_4_conv2d_output_array.data = AI_PTR(g_saline_network_activations_map[0] + 1920);
 80067d4:	4b3a      	ldr	r3, [pc, #232]	; (80068c0 <saline_network_configure_activations+0x140>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 80067dc:	4a3b      	ldr	r2, [pc, #236]	; (80068cc <saline_network_configure_activations+0x14c>)
 80067de:	6093      	str	r3, [r2, #8]
    conv2d_4_conv2d_output_array.data_start = AI_PTR(g_saline_network_activations_map[0] + 1920);
 80067e0:	4b37      	ldr	r3, [pc, #220]	; (80068c0 <saline_network_configure_activations+0x140>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 80067e8:	4a38      	ldr	r2, [pc, #224]	; (80068cc <saline_network_configure_activations+0x14c>)
 80067ea:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_conv2d_scratch0_array.data = AI_PTR(g_saline_network_activations_map[0] + 132992);
 80067ec:	4b34      	ldr	r3, [pc, #208]	; (80068c0 <saline_network_configure_activations+0x140>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 80067f4:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80067f8:	4a35      	ldr	r2, [pc, #212]	; (80068d0 <saline_network_configure_activations+0x150>)
 80067fa:	6093      	str	r3, [r2, #8]
    conv2d_5_conv2d_scratch0_array.data_start = AI_PTR(g_saline_network_activations_map[0] + 132992);
 80067fc:	4b30      	ldr	r3, [pc, #192]	; (80068c0 <saline_network_configure_activations+0x140>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8006804:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8006808:	4a31      	ldr	r2, [pc, #196]	; (80068d0 <saline_network_configure_activations+0x150>)
 800680a:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_conv2d_output_array.data = AI_PTR(g_saline_network_activations_map[0] + 0);
 800680c:	4b2c      	ldr	r3, [pc, #176]	; (80068c0 <saline_network_configure_activations+0x140>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a30      	ldr	r2, [pc, #192]	; (80068d4 <saline_network_configure_activations+0x154>)
 8006812:	6093      	str	r3, [r2, #8]
    conv2d_5_conv2d_output_array.data_start = AI_PTR(g_saline_network_activations_map[0] + 0);
 8006814:	4b2a      	ldr	r3, [pc, #168]	; (80068c0 <saline_network_configure_activations+0x140>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a2e      	ldr	r2, [pc, #184]	; (80068d4 <saline_network_configure_activations+0x154>)
 800681a:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_conv2d_output_array.data = AI_PTR(g_saline_network_activations_map[0] + 28800);
 800681c:	4b28      	ldr	r3, [pc, #160]	; (80068c0 <saline_network_configure_activations+0x140>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f503 43e1 	add.w	r3, r3, #28800	; 0x7080
 8006824:	4a2c      	ldr	r2, [pc, #176]	; (80068d8 <saline_network_configure_activations+0x158>)
 8006826:	6093      	str	r3, [r2, #8]
    conv2d_6_conv2d_output_array.data_start = AI_PTR(g_saline_network_activations_map[0] + 28800);
 8006828:	4b25      	ldr	r3, [pc, #148]	; (80068c0 <saline_network_configure_activations+0x140>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f503 43e1 	add.w	r3, r3, #28800	; 0x7080
 8006830:	4a29      	ldr	r2, [pc, #164]	; (80068d8 <saline_network_configure_activations+0x158>)
 8006832:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_conv2d_scratch0_array.data = AI_PTR(g_saline_network_activations_map[0] + 0);
 8006834:	4b22      	ldr	r3, [pc, #136]	; (80068c0 <saline_network_configure_activations+0x140>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a28      	ldr	r2, [pc, #160]	; (80068dc <saline_network_configure_activations+0x15c>)
 800683a:	6093      	str	r3, [r2, #8]
    conv2d_7_conv2d_scratch0_array.data_start = AI_PTR(g_saline_network_activations_map[0] + 0);
 800683c:	4b20      	ldr	r3, [pc, #128]	; (80068c0 <saline_network_configure_activations+0x140>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a26      	ldr	r2, [pc, #152]	; (80068dc <saline_network_configure_activations+0x15c>)
 8006842:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_conv2d_output_array.data = AI_PTR(g_saline_network_activations_map[0] + 7680);
 8006844:	4b1e      	ldr	r3, [pc, #120]	; (80068c0 <saline_network_configure_activations+0x140>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800684c:	4a24      	ldr	r2, [pc, #144]	; (80068e0 <saline_network_configure_activations+0x160>)
 800684e:	6093      	str	r3, [r2, #8]
    conv2d_7_conv2d_output_array.data_start = AI_PTR(g_saline_network_activations_map[0] + 7680);
 8006850:	4b1b      	ldr	r3, [pc, #108]	; (80068c0 <saline_network_configure_activations+0x140>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8006858:	4a21      	ldr	r2, [pc, #132]	; (80068e0 <saline_network_configure_activations+0x160>)
 800685a:	60d3      	str	r3, [r2, #12]
    
    dense_2_dense_output_array.data = AI_PTR(g_saline_network_activations_map[0] + 0);
 800685c:	4b18      	ldr	r3, [pc, #96]	; (80068c0 <saline_network_configure_activations+0x140>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a20      	ldr	r2, [pc, #128]	; (80068e4 <saline_network_configure_activations+0x164>)
 8006862:	6093      	str	r3, [r2, #8]
    dense_2_dense_output_array.data_start = AI_PTR(g_saline_network_activations_map[0] + 0);
 8006864:	4b16      	ldr	r3, [pc, #88]	; (80068c0 <saline_network_configure_activations+0x140>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a1e      	ldr	r2, [pc, #120]	; (80068e4 <saline_network_configure_activations+0x164>)
 800686a:	60d3      	str	r3, [r2, #12]
    
    dense_2_output_array.data = AI_PTR(g_saline_network_activations_map[0] + 512);
 800686c:	4b14      	ldr	r3, [pc, #80]	; (80068c0 <saline_network_configure_activations+0x140>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006874:	4a1c      	ldr	r2, [pc, #112]	; (80068e8 <saline_network_configure_activations+0x168>)
 8006876:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(g_saline_network_activations_map[0] + 512);
 8006878:	4b11      	ldr	r3, [pc, #68]	; (80068c0 <saline_network_configure_activations+0x140>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006880:	4a19      	ldr	r2, [pc, #100]	; (80068e8 <saline_network_configure_activations+0x168>)
 8006882:	60d3      	str	r3, [r2, #12]
    
    dense_3_dense_output_array.data = AI_PTR(g_saline_network_activations_map[0] + 0);
 8006884:	4b0e      	ldr	r3, [pc, #56]	; (80068c0 <saline_network_configure_activations+0x140>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a18      	ldr	r2, [pc, #96]	; (80068ec <saline_network_configure_activations+0x16c>)
 800688a:	6093      	str	r3, [r2, #8]
    dense_3_dense_output_array.data_start = AI_PTR(g_saline_network_activations_map[0] + 0);
 800688c:	4b0c      	ldr	r3, [pc, #48]	; (80068c0 <saline_network_configure_activations+0x140>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a16      	ldr	r2, [pc, #88]	; (80068ec <saline_network_configure_activations+0x16c>)
 8006892:	60d3      	str	r3, [r2, #12]
    
    dense_3_output_array.data = AI_PTR(g_saline_network_activations_map[0] + 16);
 8006894:	4b0a      	ldr	r3, [pc, #40]	; (80068c0 <saline_network_configure_activations+0x140>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3310      	adds	r3, #16
 800689a:	4a15      	ldr	r2, [pc, #84]	; (80068f0 <saline_network_configure_activations+0x170>)
 800689c:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(g_saline_network_activations_map[0] + 16);
 800689e:	4b08      	ldr	r3, [pc, #32]	; (80068c0 <saline_network_configure_activations+0x140>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	3310      	adds	r3, #16
 80068a4:	4a12      	ldr	r2, [pc, #72]	; (80068f0 <saline_network_configure_activations+0x170>)
 80068a6:	60d3      	str	r3, [r2, #12]
    
    return true;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e005      	b.n	80068b8 <saline_network_configure_activations+0x138>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80068ac:	2213      	movs	r2, #19
 80068ae:	2130      	movs	r1, #48	; 0x30
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fc13 	bl	80070dc <ai_platform_network_set_error>
  return false;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	2002864c 	.word	0x2002864c
 80068c4:	20000010 	.word	0x20000010
 80068c8:	20000160 	.word	0x20000160
 80068cc:	20000020 	.word	0x20000020
 80068d0:	20000170 	.word	0x20000170
 80068d4:	20000030 	.word	0x20000030
 80068d8:	20000040 	.word	0x20000040
 80068dc:	20000180 	.word	0x20000180
 80068e0:	20000050 	.word	0x20000050
 80068e4:	20000060 	.word	0x20000060
 80068e8:	20000070 	.word	0x20000070
 80068ec:	20000080 	.word	0x20000080
 80068f0:	20000090 	.word	0x20000090

080068f4 <saline_network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool saline_network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_saline_network_weights_map, 1, params)) {
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	2101      	movs	r1, #1
 8006902:	487f      	ldr	r0, [pc, #508]	; (8006b00 <saline_network_configure_weights+0x20c>)
 8006904:	f000 faa6 	bl	8006e54 <ai_platform_get_weights_map>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 80ee 	beq.w	8006aec <saline_network_configure_weights+0x1f8>
    /* Updating weights (byte) offsets */
    
    conv2d_4_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8006910:	4b7c      	ldr	r3, [pc, #496]	; (8006b04 <saline_network_configure_weights+0x210>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006918:	4a7a      	ldr	r2, [pc, #488]	; (8006b04 <saline_network_configure_weights+0x210>)
 800691a:	6013      	str	r3, [r2, #0]
    conv2d_4_conv2d_weights_array.data = AI_PTR(g_saline_network_weights_map[0] + 0);
 800691c:	4b78      	ldr	r3, [pc, #480]	; (8006b00 <saline_network_configure_weights+0x20c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a78      	ldr	r2, [pc, #480]	; (8006b04 <saline_network_configure_weights+0x210>)
 8006922:	6093      	str	r3, [r2, #8]
    conv2d_4_conv2d_weights_array.data_start = AI_PTR(g_saline_network_weights_map[0] + 0);
 8006924:	4b76      	ldr	r3, [pc, #472]	; (8006b00 <saline_network_configure_weights+0x20c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a76      	ldr	r2, [pc, #472]	; (8006b04 <saline_network_configure_weights+0x210>)
 800692a:	60d3      	str	r3, [r2, #12]
    
    conv2d_4_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800692c:	4b76      	ldr	r3, [pc, #472]	; (8006b08 <saline_network_configure_weights+0x214>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006934:	4a74      	ldr	r2, [pc, #464]	; (8006b08 <saline_network_configure_weights+0x214>)
 8006936:	6013      	str	r3, [r2, #0]
    conv2d_4_conv2d_bias_array.data = AI_PTR(g_saline_network_weights_map[0] + 3456);
 8006938:	4b71      	ldr	r3, [pc, #452]	; (8006b00 <saline_network_configure_weights+0x20c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 8006940:	4a71      	ldr	r2, [pc, #452]	; (8006b08 <saline_network_configure_weights+0x214>)
 8006942:	6093      	str	r3, [r2, #8]
    conv2d_4_conv2d_bias_array.data_start = AI_PTR(g_saline_network_weights_map[0] + 3456);
 8006944:	4b6e      	ldr	r3, [pc, #440]	; (8006b00 <saline_network_configure_weights+0x20c>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 800694c:	4a6e      	ldr	r2, [pc, #440]	; (8006b08 <saline_network_configure_weights+0x214>)
 800694e:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8006950:	4b6e      	ldr	r3, [pc, #440]	; (8006b0c <saline_network_configure_weights+0x218>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006958:	4a6c      	ldr	r2, [pc, #432]	; (8006b0c <saline_network_configure_weights+0x218>)
 800695a:	6013      	str	r3, [r2, #0]
    conv2d_5_conv2d_weights_array.data = AI_PTR(g_saline_network_weights_map[0] + 3584);
 800695c:	4b68      	ldr	r3, [pc, #416]	; (8006b00 <saline_network_configure_weights+0x20c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006964:	4a69      	ldr	r2, [pc, #420]	; (8006b0c <saline_network_configure_weights+0x218>)
 8006966:	6093      	str	r3, [r2, #8]
    conv2d_5_conv2d_weights_array.data_start = AI_PTR(g_saline_network_weights_map[0] + 3584);
 8006968:	4b65      	ldr	r3, [pc, #404]	; (8006b00 <saline_network_configure_weights+0x20c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006970:	4a66      	ldr	r2, [pc, #408]	; (8006b0c <saline_network_configure_weights+0x218>)
 8006972:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8006974:	4b66      	ldr	r3, [pc, #408]	; (8006b10 <saline_network_configure_weights+0x21c>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800697c:	4a64      	ldr	r2, [pc, #400]	; (8006b10 <saline_network_configure_weights+0x21c>)
 800697e:	6013      	str	r3, [r2, #0]
    conv2d_5_conv2d_bias_array.data = AI_PTR(g_saline_network_weights_map[0] + 40448);
 8006980:	4b5f      	ldr	r3, [pc, #380]	; (8006b00 <saline_network_configure_weights+0x20c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8006988:	4a61      	ldr	r2, [pc, #388]	; (8006b10 <saline_network_configure_weights+0x21c>)
 800698a:	6093      	str	r3, [r2, #8]
    conv2d_5_conv2d_bias_array.data_start = AI_PTR(g_saline_network_weights_map[0] + 40448);
 800698c:	4b5c      	ldr	r3, [pc, #368]	; (8006b00 <saline_network_configure_weights+0x20c>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 8006994:	4a5e      	ldr	r2, [pc, #376]	; (8006b10 <saline_network_configure_weights+0x21c>)
 8006996:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8006998:	4b5e      	ldr	r3, [pc, #376]	; (8006b14 <saline_network_configure_weights+0x220>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069a0:	4a5c      	ldr	r2, [pc, #368]	; (8006b14 <saline_network_configure_weights+0x220>)
 80069a2:	6013      	str	r3, [r2, #0]
    conv2d_6_conv2d_weights_array.data = AI_PTR(g_saline_network_weights_map[0] + 40576);
 80069a4:	4b56      	ldr	r3, [pc, #344]	; (8006b00 <saline_network_configure_weights+0x20c>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 80069ac:	3380      	adds	r3, #128	; 0x80
 80069ae:	4a59      	ldr	r2, [pc, #356]	; (8006b14 <saline_network_configure_weights+0x220>)
 80069b0:	6093      	str	r3, [r2, #8]
    conv2d_6_conv2d_weights_array.data_start = AI_PTR(g_saline_network_weights_map[0] + 40576);
 80069b2:	4b53      	ldr	r3, [pc, #332]	; (8006b00 <saline_network_configure_weights+0x20c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 80069ba:	3380      	adds	r3, #128	; 0x80
 80069bc:	4a55      	ldr	r2, [pc, #340]	; (8006b14 <saline_network_configure_weights+0x220>)
 80069be:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80069c0:	4b55      	ldr	r3, [pc, #340]	; (8006b18 <saline_network_configure_weights+0x224>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069c8:	4a53      	ldr	r2, [pc, #332]	; (8006b18 <saline_network_configure_weights+0x224>)
 80069ca:	6013      	str	r3, [r2, #0]
    conv2d_6_conv2d_bias_array.data = AI_PTR(g_saline_network_weights_map[0] + 114304);
 80069cc:	4b4c      	ldr	r3, [pc, #304]	; (8006b00 <saline_network_configure_weights+0x20c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f503 33df 	add.w	r3, r3, #114176	; 0x1be00
 80069d4:	3380      	adds	r3, #128	; 0x80
 80069d6:	4a50      	ldr	r2, [pc, #320]	; (8006b18 <saline_network_configure_weights+0x224>)
 80069d8:	6093      	str	r3, [r2, #8]
    conv2d_6_conv2d_bias_array.data_start = AI_PTR(g_saline_network_weights_map[0] + 114304);
 80069da:	4b49      	ldr	r3, [pc, #292]	; (8006b00 <saline_network_configure_weights+0x20c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f503 33df 	add.w	r3, r3, #114176	; 0x1be00
 80069e2:	3380      	adds	r3, #128	; 0x80
 80069e4:	4a4c      	ldr	r2, [pc, #304]	; (8006b18 <saline_network_configure_weights+0x224>)
 80069e6:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80069e8:	4b4c      	ldr	r3, [pc, #304]	; (8006b1c <saline_network_configure_weights+0x228>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069f0:	4a4a      	ldr	r2, [pc, #296]	; (8006b1c <saline_network_configure_weights+0x228>)
 80069f2:	6013      	str	r3, [r2, #0]
    conv2d_7_conv2d_weights_array.data = AI_PTR(g_saline_network_weights_map[0] + 114560);
 80069f4:	4b42      	ldr	r3, [pc, #264]	; (8006b00 <saline_network_configure_weights+0x20c>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f503 33df 	add.w	r3, r3, #114176	; 0x1be00
 80069fc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006a00:	4a46      	ldr	r2, [pc, #280]	; (8006b1c <saline_network_configure_weights+0x228>)
 8006a02:	6093      	str	r3, [r2, #8]
    conv2d_7_conv2d_weights_array.data_start = AI_PTR(g_saline_network_weights_map[0] + 114560);
 8006a04:	4b3e      	ldr	r3, [pc, #248]	; (8006b00 <saline_network_configure_weights+0x20c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f503 33df 	add.w	r3, r3, #114176	; 0x1be00
 8006a0c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006a10:	4a42      	ldr	r2, [pc, #264]	; (8006b1c <saline_network_configure_weights+0x228>)
 8006a12:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8006a14:	4b42      	ldr	r3, [pc, #264]	; (8006b20 <saline_network_configure_weights+0x22c>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a1c:	4a40      	ldr	r2, [pc, #256]	; (8006b20 <saline_network_configure_weights+0x22c>)
 8006a1e:	6013      	str	r3, [r2, #0]
    conv2d_7_conv2d_bias_array.data = AI_PTR(g_saline_network_weights_map[0] + 262016);
 8006a20:	4b37      	ldr	r3, [pc, #220]	; (8006b00 <saline_network_configure_weights+0x20c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8006a28:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8006a2c:	4a3c      	ldr	r2, [pc, #240]	; (8006b20 <saline_network_configure_weights+0x22c>)
 8006a2e:	6093      	str	r3, [r2, #8]
    conv2d_7_conv2d_bias_array.data_start = AI_PTR(g_saline_network_weights_map[0] + 262016);
 8006a30:	4b33      	ldr	r3, [pc, #204]	; (8006b00 <saline_network_configure_weights+0x20c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8006a38:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8006a3c:	4a38      	ldr	r2, [pc, #224]	; (8006b20 <saline_network_configure_weights+0x22c>)
 8006a3e:	60d3      	str	r3, [r2, #12]
    
    dense_2_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006a40:	4b38      	ldr	r3, [pc, #224]	; (8006b24 <saline_network_configure_weights+0x230>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a48:	4a36      	ldr	r2, [pc, #216]	; (8006b24 <saline_network_configure_weights+0x230>)
 8006a4a:	6013      	str	r3, [r2, #0]
    dense_2_dense_weights_array.data = AI_PTR(g_saline_network_weights_map[0] + 262272);
 8006a4c:	4b2c      	ldr	r3, [pc, #176]	; (8006b00 <saline_network_configure_weights+0x20c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8006a54:	3380      	adds	r3, #128	; 0x80
 8006a56:	4a33      	ldr	r2, [pc, #204]	; (8006b24 <saline_network_configure_weights+0x230>)
 8006a58:	6093      	str	r3, [r2, #8]
    dense_2_dense_weights_array.data_start = AI_PTR(g_saline_network_weights_map[0] + 262272);
 8006a5a:	4b29      	ldr	r3, [pc, #164]	; (8006b00 <saline_network_configure_weights+0x20c>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8006a62:	3380      	adds	r3, #128	; 0x80
 8006a64:	4a2f      	ldr	r2, [pc, #188]	; (8006b24 <saline_network_configure_weights+0x230>)
 8006a66:	60d3      	str	r3, [r2, #12]
    
    dense_2_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006a68:	4b2f      	ldr	r3, [pc, #188]	; (8006b28 <saline_network_configure_weights+0x234>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a70:	4a2d      	ldr	r2, [pc, #180]	; (8006b28 <saline_network_configure_weights+0x234>)
 8006a72:	6013      	str	r3, [r2, #0]
    dense_2_dense_bias_array.data = AI_PTR(g_saline_network_weights_map[0] + 1867904);
 8006a74:	4b22      	ldr	r3, [pc, #136]	; (8006b00 <saline_network_configure_weights+0x20c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f503 13e4 	add.w	r3, r3, #1867776	; 0x1c8000
 8006a7c:	3380      	adds	r3, #128	; 0x80
 8006a7e:	4a2a      	ldr	r2, [pc, #168]	; (8006b28 <saline_network_configure_weights+0x234>)
 8006a80:	6093      	str	r3, [r2, #8]
    dense_2_dense_bias_array.data_start = AI_PTR(g_saline_network_weights_map[0] + 1867904);
 8006a82:	4b1f      	ldr	r3, [pc, #124]	; (8006b00 <saline_network_configure_weights+0x20c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f503 13e4 	add.w	r3, r3, #1867776	; 0x1c8000
 8006a8a:	3380      	adds	r3, #128	; 0x80
 8006a8c:	4a26      	ldr	r2, [pc, #152]	; (8006b28 <saline_network_configure_weights+0x234>)
 8006a8e:	60d3      	str	r3, [r2, #12]
    
    dense_3_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006a90:	4b26      	ldr	r3, [pc, #152]	; (8006b2c <saline_network_configure_weights+0x238>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a98:	4a24      	ldr	r2, [pc, #144]	; (8006b2c <saline_network_configure_weights+0x238>)
 8006a9a:	6013      	str	r3, [r2, #0]
    dense_3_dense_weights_array.data = AI_PTR(g_saline_network_weights_map[0] + 1868416);
 8006a9c:	4b18      	ldr	r3, [pc, #96]	; (8006b00 <saline_network_configure_weights+0x20c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f503 13e4 	add.w	r3, r3, #1867776	; 0x1c8000
 8006aa4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006aa8:	4a20      	ldr	r2, [pc, #128]	; (8006b2c <saline_network_configure_weights+0x238>)
 8006aaa:	6093      	str	r3, [r2, #8]
    dense_3_dense_weights_array.data_start = AI_PTR(g_saline_network_weights_map[0] + 1868416);
 8006aac:	4b14      	ldr	r3, [pc, #80]	; (8006b00 <saline_network_configure_weights+0x20c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f503 13e4 	add.w	r3, r3, #1867776	; 0x1c8000
 8006ab4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006ab8:	4a1c      	ldr	r2, [pc, #112]	; (8006b2c <saline_network_configure_weights+0x238>)
 8006aba:	60d3      	str	r3, [r2, #12]
    
    dense_3_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006abc:	4b1c      	ldr	r3, [pc, #112]	; (8006b30 <saline_network_configure_weights+0x23c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ac4:	4a1a      	ldr	r2, [pc, #104]	; (8006b30 <saline_network_configure_weights+0x23c>)
 8006ac6:	6013      	str	r3, [r2, #0]
    dense_3_dense_bias_array.data = AI_PTR(g_saline_network_weights_map[0] + 1870464);
 8006ac8:	4b0d      	ldr	r3, [pc, #52]	; (8006b00 <saline_network_configure_weights+0x20c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f503 13e4 	add.w	r3, r3, #1867776	; 0x1c8000
 8006ad0:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 8006ad4:	4a16      	ldr	r2, [pc, #88]	; (8006b30 <saline_network_configure_weights+0x23c>)
 8006ad6:	6093      	str	r3, [r2, #8]
    dense_3_dense_bias_array.data_start = AI_PTR(g_saline_network_weights_map[0] + 1870464);
 8006ad8:	4b09      	ldr	r3, [pc, #36]	; (8006b00 <saline_network_configure_weights+0x20c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f503 13e4 	add.w	r3, r3, #1867776	; 0x1c8000
 8006ae0:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 8006ae4:	4a12      	ldr	r2, [pc, #72]	; (8006b30 <saline_network_configure_weights+0x23c>)
 8006ae6:	60d3      	str	r3, [r2, #12]
    
    return true;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e005      	b.n	8006af8 <saline_network_configure_weights+0x204>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8006aec:	2212      	movs	r2, #18
 8006aee:	2130      	movs	r1, #48	; 0x30
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 faf3 	bl	80070dc <ai_platform_network_set_error>
  return false;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	20028650 	.word	0x20028650
 8006b04:	200000a0 	.word	0x200000a0
 8006b08:	200000b0 	.word	0x200000b0
 8006b0c:	200000c0 	.word	0x200000c0
 8006b10:	200000d0 	.word	0x200000d0
 8006b14:	200000e0 	.word	0x200000e0
 8006b18:	200000f0 	.word	0x200000f0
 8006b1c:	20000100 	.word	0x20000100
 8006b20:	20000110 	.word	0x20000110
 8006b24:	20000120 	.word	0x20000120
 8006b28:	20000130 	.word	0x20000130
 8006b2c:	20000140 	.word	0x20000140
 8006b30:	20000150 	.word	0x20000150

08006b34 <ai_saline_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_saline_network_get_error(ai_handle network)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fa53 	bl	8006fe8 <ai_platform_network_get_error>
 8006b42:	4603      	mov	r3, r0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <ai_saline_network_create>:

AI_API_ENTRY
ai_error ai_saline_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af02      	add	r7, sp, #8
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8006b56:	2300      	movs	r3, #0
 8006b58:	9301      	str	r3, [sp, #4]
 8006b5a:	2305      	movs	r3, #5
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	2301      	movs	r3, #1
 8006b60:	4a04      	ldr	r2, [pc, #16]	; (8006b74 <ai_saline_network_create+0x28>)
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fc83 	bl	8007470 <ai_platform_network_create>
 8006b6a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	20000c04 	.word	0x20000c04

08006b78 <ai_saline_network_create_and_init>:

AI_API_ENTRY
ai_error ai_saline_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b096      	sub	sp, #88	; 0x58
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_saline_network_create(network, AI_SALINE_NETWORK_DATA_CONFIG);
 8006b84:	2100      	movs	r1, #0
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f7ff ffe0 	bl	8006b4c <ai_saline_network_create>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8006b90:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <ai_saline_network_create_and_init+0x24>
        return err;
 8006b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b9a:	e05d      	b.n	8006c58 <ai_saline_network_create_and_init+0xe0>
    if (ai_saline_network_data_params_get(&params) != true) {
 8006b9c:	f107 0314 	add.w	r3, r7, #20
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f000 f8dd 	bl	8006d60 <ai_saline_network_data_params_get>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	f083 0301 	eor.w	r3, r3, #1
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d008      	beq.n	8006bc4 <ai_saline_network_create_and_init+0x4c>
        err = ai_saline_network_get_error(*network);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7ff ffbc 	bl	8006b34 <ai_saline_network_get_error>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8006bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc2:	e049      	b.n	8006c58 <ai_saline_network_create_and_init+0xe0>
    }
#if defined(AI_SALINE_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d016      	beq.n	8006bf8 <ai_saline_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8006bca:	2300      	movs	r3, #0
 8006bcc:	657b      	str	r3, [r7, #84]	; 0x54
 8006bce:	e00e      	b.n	8006bee <ai_saline_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8006bd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	4413      	add	r3, r2
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	f107 0314 	add.w	r3, r7, #20
 8006be0:	330c      	adds	r3, #12
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 f922 	bl	8006e2c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8006be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bea:	3301      	adds	r3, #1
 8006bec:	657b      	str	r3, [r7, #84]	; 0x54
 8006bee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	dbeb      	blt.n	8006bd0 <ai_saline_network_create_and_init+0x58>
    }
#endif
#if defined(AI_SALINE_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d016      	beq.n	8006c2c <ai_saline_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8006bfe:	2300      	movs	r3, #0
 8006c00:	653b      	str	r3, [r7, #80]	; 0x50
 8006c02:	e00e      	b.n	8006c22 <ai_saline_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8006c04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	f107 0314 	add.w	r3, r7, #20
 8006c14:	3304      	adds	r3, #4
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 f908 	bl	8006e2c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8006c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c1e:	3301      	adds	r3, #1
 8006c20:	653b      	str	r3, [r7, #80]	; 0x50
 8006c22:	8b7b      	ldrh	r3, [r7, #26]
 8006c24:	461a      	mov	r2, r3
 8006c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	dbeb      	blt.n	8006c04 <ai_saline_network_create_and_init+0x8c>
    }
#endif
    if (ai_saline_network_init(*network, &params) != true) {
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f107 0214 	add.w	r2, r7, #20
 8006c34:	4611      	mov	r1, r2
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 f846 	bl	8006cc8 <ai_saline_network_init>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	f083 0301 	eor.w	r3, r3, #1
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d006      	beq.n	8006c56 <ai_saline_network_create_and_init+0xde>
        err = ai_saline_network_get_error(*network);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff ff71 	bl	8006b34 <ai_saline_network_get_error>
 8006c52:	4603      	mov	r3, r0
 8006c54:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8006c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3758      	adds	r7, #88	; 0x58
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <ai_saline_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_saline_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d104      	bne.n	8006c7a <ai_saline_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8006c70:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <ai_saline_network_inputs_get+0x2c>)
 8006c72:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a06      	ldr	r2, [pc, #24]	; (8006c90 <ai_saline_network_inputs_get+0x30>)
 8006c78:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fa33 	bl	80070e8 <ai_platform_inputs_get>
 8006c82:	4603      	mov	r3, r0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	20000c04 	.word	0x20000c04
 8006c90:	a1c00100 	.word	0xa1c00100

08006c94 <ai_saline_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_saline_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d104      	bne.n	8006cae <ai_saline_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8006ca4:	4b06      	ldr	r3, [pc, #24]	; (8006cc0 <ai_saline_network_outputs_get+0x2c>)
 8006ca6:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a06      	ldr	r2, [pc, #24]	; (8006cc4 <ai_saline_network_outputs_get+0x30>)
 8006cac:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fafd 	bl	80072b0 <ai_platform_outputs_get>
 8006cb6:	4603      	mov	r3, r0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	20000c04 	.word	0x20000c04
 8006cc4:	a1c00100 	.word	0xa1c00100

08006cc8 <ai_saline_network_init>:
}

AI_API_ENTRY
ai_bool ai_saline_network_init(
  ai_handle network, const ai_network_params* params)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fcad 	bl	8007634 <ai_platform_network_init>
 8006cda:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <ai_saline_network_init+0x1e>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	e028      	b.n	8006d38 <ai_saline_network_init+0x70>

  ai_bool ok = true;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	72fb      	strb	r3, [r7, #11]
  ok &= saline_network_configure_weights(net_ctx, params);
 8006cea:	6839      	ldr	r1, [r7, #0]
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f7ff fe01 	bl	80068f4 <saline_network_configure_weights>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	7afb      	ldrb	r3, [r7, #11]
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	bf14      	ite	ne
 8006cfe:	2301      	movne	r3, #1
 8006d00:	2300      	moveq	r3, #0
 8006d02:	72fb      	strb	r3, [r7, #11]
  ok &= saline_network_configure_activations(net_ctx, params);
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f7ff fd3a 	bl	8006780 <saline_network_configure_activations>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	461a      	mov	r2, r3
 8006d10:	7afb      	ldrb	r3, [r7, #11]
 8006d12:	4013      	ands	r3, r2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	bf14      	ite	ne
 8006d18:	2301      	movne	r3, #1
 8006d1a:	2300      	moveq	r3, #0
 8006d1c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fd82 	bl	8007828 <ai_platform_network_post_init>
 8006d24:	4603      	mov	r3, r0
 8006d26:	461a      	mov	r2, r3
 8006d28:	7afb      	ldrb	r3, [r7, #11]
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	bf14      	ite	ne
 8006d30:	2301      	movne	r3, #1
 8006d32:	2300      	moveq	r3, #0
 8006d34:	72fb      	strb	r3, [r7, #11]

  return ok;
 8006d36:	7afb      	ldrb	r3, [r7, #11]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <ai_saline_network_run>:


AI_API_ENTRY
ai_i32 ai_saline_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	68b9      	ldr	r1, [r7, #8]
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 fdfd 	bl	8007950 <ai_platform_network_process>
 8006d56:	4603      	mov	r3, r0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <ai_saline_network_data_params_get>:
 * @ingroup saline_network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_saline_network_data_params_get(ai_network_params* params)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <ai_saline_network_data_params_get+0x12>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	e016      	b.n	8006da0 <ai_saline_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8006d72:	4a0d      	ldr	r2, [pc, #52]	; (8006da8 <ai_saline_network_data_params_get+0x48>)
 8006d74:	f107 0310 	add.w	r3, r7, #16
 8006d78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d7c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_SALINE_NETWORK_DATA_ACTIVATIONS_COUNT, g_saline_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8006d80:	4a0a      	ldr	r2, [pc, #40]	; (8006dac <ai_saline_network_data_params_get+0x4c>)
 8006d82:	f107 0308 	add.w	r3, r7, #8
 8006d86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d8a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_SALINE_NETWORK_DATA_WEIGHTS_COUNT, g_saline_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8006d8e:	f107 0210 	add.w	r2, r7, #16
 8006d92:	f107 0308 	add.w	r3, r7, #8
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f903 	bl	8006fa4 <ai_platform_bind_network_params>
 8006d9e:	4603      	mov	r3, r0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3718      	adds	r7, #24
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	0800b898 	.word	0x0800b898
 8006dac:	0800b8a0 	.word	0x0800b8a0

08006db0 <ai_buffer_get_size>:
 8006db0:	b378      	cbz	r0, 8006e12 <ai_buffer_get_size+0x62>
 8006db2:	b410      	push	{r4}
 8006db4:	6803      	ldr	r3, [r0, #0]
 8006db6:	4a17      	ldr	r2, [pc, #92]	; (8006e14 <ai_buffer_get_size+0x64>)
 8006db8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006dbc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d01e      	beq.n	8006e02 <ai_buffer_get_size+0x52>
 8006dc4:	6984      	ldr	r4, [r0, #24]
 8006dc6:	6862      	ldr	r2, [r4, #4]
 8006dc8:	7d03      	ldrb	r3, [r0, #20]
 8006dca:	6941      	ldr	r1, [r0, #20]
 8006dcc:	f1a3 0301 	sub.w	r3, r3, #1
 8006dd0:	fab3 f383 	clz	r3, r3
 8006dd4:	095b      	lsrs	r3, r3, #5
 8006dd6:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8006dda:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8006dde:	da0b      	bge.n	8006df8 <ai_buffer_get_size+0x48>
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d102      	bne.n	8006dea <ai_buffer_get_size+0x3a>
 8006de4:	2802      	cmp	r0, #2
 8006de6:	d007      	beq.n	8006df8 <ai_buffer_get_size+0x48>
 8006de8:	2302      	movs	r3, #2
 8006dea:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8006dee:	3301      	adds	r3, #1
 8006df0:	4298      	cmp	r0, r3
 8006df2:	fb01 f202 	mul.w	r2, r1, r2
 8006df6:	d1f3      	bne.n	8006de0 <ai_buffer_get_size+0x30>
 8006df8:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8006dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	2900      	cmp	r1, #0
 8006e04:	d0de      	beq.n	8006dc4 <ai_buffer_get_size+0x14>
 8006e06:	6984      	ldr	r4, [r0, #24]
 8006e08:	6863      	ldr	r3, [r4, #4]
 8006e0a:	331f      	adds	r3, #31
 8006e0c:	f023 021f 	bic.w	r2, r3, #31
 8006e10:	e7da      	b.n	8006dc8 <ai_buffer_get_size+0x18>
 8006e12:	4770      	bx	lr
 8006e14:	000400c0 	.word	0x000400c0

08006e18 <ai_buffer_array_sane>:
 8006e18:	b138      	cbz	r0, 8006e2a <ai_buffer_array_sane+0x12>
 8006e1a:	6843      	ldr	r3, [r0, #4]
 8006e1c:	b123      	cbz	r3, 8006e28 <ai_buffer_array_sane+0x10>
 8006e1e:	8840      	ldrh	r0, [r0, #2]
 8006e20:	3800      	subs	r0, #0
 8006e22:	bf18      	it	ne
 8006e24:	2001      	movne	r0, #1
 8006e26:	4770      	bx	lr
 8006e28:	4618      	mov	r0, r3
 8006e2a:	4770      	bx	lr

08006e2c <ai_buffer_array_item_set_address>:
 8006e2c:	b150      	cbz	r0, 8006e44 <ai_buffer_array_item_set_address+0x18>
 8006e2e:	6843      	ldr	r3, [r0, #4]
 8006e30:	b14b      	cbz	r3, 8006e46 <ai_buffer_array_item_set_address+0x1a>
 8006e32:	8840      	ldrh	r0, [r0, #2]
 8006e34:	b900      	cbnz	r0, 8006e38 <ai_buffer_array_item_set_address+0xc>
 8006e36:	4770      	bx	lr
 8006e38:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006e3c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006e40:	2001      	movs	r0, #1
 8006e42:	604a      	str	r2, [r1, #4]
 8006e44:	4770      	bx	lr
 8006e46:	4618      	mov	r0, r3
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop

08006e4c <_ai_platform_acquire_crc>:
 8006e4c:	2001      	movs	r0, #1
 8006e4e:	4770      	bx	lr

08006e50 <_ai_platform_release_crc>:
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop

08006e54 <ai_platform_get_weights_map>:
 8006e54:	2a00      	cmp	r2, #0
 8006e56:	d037      	beq.n	8006ec8 <ai_platform_get_weights_map+0x74>
 8006e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	b1a0      	cbz	r0, 8006e88 <ai_platform_get_weights_map+0x34>
 8006e5e:	460f      	mov	r7, r1
 8006e60:	b191      	cbz	r1, 8006e88 <ai_platform_get_weights_map+0x34>
 8006e62:	4b25      	ldr	r3, [pc, #148]	; (8006ef8 <ai_platform_get_weights_map+0xa4>)
 8006e64:	6810      	ldr	r0, [r2, #0]
 8006e66:	4298      	cmp	r0, r3
 8006e68:	4615      	mov	r5, r2
 8006e6a:	d00f      	beq.n	8006e8c <ai_platform_get_weights_map+0x38>
 8006e6c:	6855      	ldr	r5, [r2, #4]
 8006e6e:	b15d      	cbz	r5, 8006e88 <ai_platform_get_weights_map+0x34>
 8006e70:	682e      	ldr	r6, [r5, #0]
 8006e72:	429e      	cmp	r6, r3
 8006e74:	d02a      	beq.n	8006ecc <ai_platform_get_weights_map+0x78>
 8006e76:	f1a1 0001 	sub.w	r0, r1, #1
 8006e7a:	6025      	str	r5, [r4, #0]
 8006e7c:	fab0 f080 	clz	r0, r0
 8006e80:	0940      	lsrs	r0, r0, #5
 8006e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e84:	42a7      	cmp	r7, r4
 8006e86:	d034      	beq.n	8006ef2 <ai_platform_get_weights_map+0x9e>
 8006e88:	2000      	movs	r0, #0
 8006e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e8c:	1d10      	adds	r0, r2, #4
 8006e8e:	f7ff ffc3 	bl	8006e18 <ai_buffer_array_sane>
 8006e92:	2800      	cmp	r0, #0
 8006e94:	d0f8      	beq.n	8006e88 <ai_platform_get_weights_map+0x34>
 8006e96:	88eb      	ldrh	r3, [r5, #6]
 8006e98:	429f      	cmp	r7, r3
 8006e9a:	d1f5      	bne.n	8006e88 <ai_platform_get_weights_map+0x34>
 8006e9c:	f04f 0e00 	mov.w	lr, #0
 8006ea0:	1f23      	subs	r3, r4, #4
 8006ea2:	4670      	mov	r0, lr
 8006ea4:	68aa      	ldr	r2, [r5, #8]
 8006ea6:	eb02 0c0e 	add.w	ip, r2, lr
 8006eaa:	f10e 0e1c 	add.w	lr, lr, #28
 8006eae:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8006eb2:	b124      	cbz	r4, 8006ebe <ai_platform_get_weights_map+0x6a>
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	4287      	cmp	r7, r0
 8006eb8:	f843 4f04 	str.w	r4, [r3, #4]!
 8006ebc:	d1f2      	bne.n	8006ea4 <ai_platform_get_weights_map+0x50>
 8006ebe:	1a38      	subs	r0, r7, r0
 8006ec0:	fab0 f080 	clz	r0, r0
 8006ec4:	0940      	lsrs	r0, r0, #5
 8006ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ec8:	2000      	movs	r0, #0
 8006eca:	4770      	bx	lr
 8006ecc:	1f23      	subs	r3, r4, #4
 8006ece:	4628      	mov	r0, r5
 8006ed0:	2400      	movs	r4, #0
 8006ed2:	e000      	b.n	8006ed6 <ai_platform_get_weights_map+0x82>
 8006ed4:	4614      	mov	r4, r2
 8006ed6:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8006eda:	42b2      	cmp	r2, r6
 8006edc:	d0d2      	beq.n	8006e84 <ai_platform_get_weights_map+0x30>
 8006ede:	f843 2f04 	str.w	r2, [r3, #4]!
 8006ee2:	1c62      	adds	r2, r4, #1
 8006ee4:	4297      	cmp	r7, r2
 8006ee6:	d1f5      	bne.n	8006ed4 <ai_platform_get_weights_map+0x80>
 8006ee8:	3402      	adds	r4, #2
 8006eea:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8006eee:	42b3      	cmp	r3, r6
 8006ef0:	d1ca      	bne.n	8006e88 <ai_platform_get_weights_map+0x34>
 8006ef2:	2001      	movs	r0, #1
 8006ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	a1facade 	.word	0xa1facade

08006efc <ai_platform_get_activations_map>:
 8006efc:	2a00      	cmp	r2, #0
 8006efe:	d038      	beq.n	8006f72 <ai_platform_get_activations_map+0x76>
 8006f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f02:	4604      	mov	r4, r0
 8006f04:	b1a0      	cbz	r0, 8006f30 <ai_platform_get_activations_map+0x34>
 8006f06:	460f      	mov	r7, r1
 8006f08:	b191      	cbz	r1, 8006f30 <ai_platform_get_activations_map+0x34>
 8006f0a:	4b25      	ldr	r3, [pc, #148]	; (8006fa0 <ai_platform_get_activations_map+0xa4>)
 8006f0c:	6810      	ldr	r0, [r2, #0]
 8006f0e:	4298      	cmp	r0, r3
 8006f10:	4615      	mov	r5, r2
 8006f12:	d00f      	beq.n	8006f34 <ai_platform_get_activations_map+0x38>
 8006f14:	6a15      	ldr	r5, [r2, #32]
 8006f16:	b15d      	cbz	r5, 8006f30 <ai_platform_get_activations_map+0x34>
 8006f18:	682e      	ldr	r6, [r5, #0]
 8006f1a:	429e      	cmp	r6, r3
 8006f1c:	d02b      	beq.n	8006f76 <ai_platform_get_activations_map+0x7a>
 8006f1e:	f1a1 0001 	sub.w	r0, r1, #1
 8006f22:	6025      	str	r5, [r4, #0]
 8006f24:	fab0 f080 	clz	r0, r0
 8006f28:	0940      	lsrs	r0, r0, #5
 8006f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f2c:	42a7      	cmp	r7, r4
 8006f2e:	d035      	beq.n	8006f9c <ai_platform_get_activations_map+0xa0>
 8006f30:	2000      	movs	r0, #0
 8006f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f34:	f102 000c 	add.w	r0, r2, #12
 8006f38:	f7ff ff6e 	bl	8006e18 <ai_buffer_array_sane>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	d0f7      	beq.n	8006f30 <ai_platform_get_activations_map+0x34>
 8006f40:	89eb      	ldrh	r3, [r5, #14]
 8006f42:	429f      	cmp	r7, r3
 8006f44:	d1f4      	bne.n	8006f30 <ai_platform_get_activations_map+0x34>
 8006f46:	f04f 0e00 	mov.w	lr, #0
 8006f4a:	1f23      	subs	r3, r4, #4
 8006f4c:	4670      	mov	r0, lr
 8006f4e:	692a      	ldr	r2, [r5, #16]
 8006f50:	eb02 0c0e 	add.w	ip, r2, lr
 8006f54:	f10e 0e1c 	add.w	lr, lr, #28
 8006f58:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8006f5c:	b124      	cbz	r4, 8006f68 <ai_platform_get_activations_map+0x6c>
 8006f5e:	3001      	adds	r0, #1
 8006f60:	4287      	cmp	r7, r0
 8006f62:	f843 4f04 	str.w	r4, [r3, #4]!
 8006f66:	d1f2      	bne.n	8006f4e <ai_platform_get_activations_map+0x52>
 8006f68:	1a38      	subs	r0, r7, r0
 8006f6a:	fab0 f080 	clz	r0, r0
 8006f6e:	0940      	lsrs	r0, r0, #5
 8006f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f72:	2000      	movs	r0, #0
 8006f74:	4770      	bx	lr
 8006f76:	1f23      	subs	r3, r4, #4
 8006f78:	4628      	mov	r0, r5
 8006f7a:	2400      	movs	r4, #0
 8006f7c:	e000      	b.n	8006f80 <ai_platform_get_activations_map+0x84>
 8006f7e:	4614      	mov	r4, r2
 8006f80:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8006f84:	42b2      	cmp	r2, r6
 8006f86:	d0d1      	beq.n	8006f2c <ai_platform_get_activations_map+0x30>
 8006f88:	f843 2f04 	str.w	r2, [r3, #4]!
 8006f8c:	1c62      	adds	r2, r4, #1
 8006f8e:	4297      	cmp	r7, r2
 8006f90:	d1f5      	bne.n	8006f7e <ai_platform_get_activations_map+0x82>
 8006f92:	3402      	adds	r4, #2
 8006f94:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8006f98:	42b3      	cmp	r3, r6
 8006f9a:	d1c9      	bne.n	8006f30 <ai_platform_get_activations_map+0x34>
 8006f9c:	2001      	movs	r0, #1
 8006f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fa0:	a1facade 	.word	0xa1facade

08006fa4 <ai_platform_bind_network_params>:
 8006fa4:	b1a0      	cbz	r0, 8006fd0 <ai_platform_bind_network_params+0x2c>
 8006fa6:	b1b1      	cbz	r1, 8006fd6 <ai_platform_bind_network_params+0x32>
 8006fa8:	b1c2      	cbz	r2, 8006fdc <ai_platform_bind_network_params+0x38>
 8006faa:	b410      	push	{r4}
 8006fac:	4603      	mov	r3, r0
 8006fae:	4c0d      	ldr	r4, [pc, #52]	; (8006fe4 <ai_platform_bind_network_params+0x40>)
 8006fb0:	f843 4b04 	str.w	r4, [r3], #4
 8006fb4:	f100 0c0c 	add.w	ip, r0, #12
 8006fb8:	c903      	ldmia	r1, {r0, r1}
 8006fba:	e883 0003 	stmia.w	r3, {r0, r1}
 8006fbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006fc2:	e88c 0003 	stmia.w	ip, {r0, r1}
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fce:	4770      	bx	lr
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	4770      	bx	lr
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	4618      	mov	r0, r3
 8006fda:	4770      	bx	lr
 8006fdc:	4613      	mov	r3, r2
 8006fde:	4618      	mov	r0, r3
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	a1facade 	.word	0xa1facade

08006fe8 <ai_platform_network_get_error>:
 8006fe8:	b510      	push	{r4, lr}
 8006fea:	b318      	cbz	r0, 8007034 <ai_platform_network_get_error+0x4c>
 8006fec:	4b34      	ldr	r3, [pc, #208]	; (80070c0 <ai_platform_network_get_error+0xd8>)
 8006fee:	6802      	ldr	r2, [r0, #0]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	d11e      	bne.n	8007034 <ai_platform_network_get_error+0x4c>
 8006ff6:	4a33      	ldr	r2, [pc, #204]	; (80070c4 <ai_platform_network_get_error+0xdc>)
 8006ff8:	6813      	ldr	r3, [r2, #0]
 8006ffa:	f023 0301 	bic.w	r3, r3, #1
 8006ffe:	6013      	str	r3, [r2, #0]
 8007000:	f7ff ff24 	bl	8006e4c <_ai_platform_acquire_crc>
 8007004:	4b30      	ldr	r3, [pc, #192]	; (80070c8 <ai_platform_network_get_error+0xe0>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800700c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007010:	d041      	beq.n	8007096 <ai_platform_network_get_error+0xae>
 8007012:	4a2e      	ldr	r2, [pc, #184]	; (80070cc <ai_platform_network_get_error+0xe4>)
 8007014:	2301      	movs	r3, #1
 8007016:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800701a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1fb      	bne.n	800701a <ai_platform_network_get_error+0x32>
 8007022:	4b2b      	ldr	r3, [pc, #172]	; (80070d0 <ai_platform_network_get_error+0xe8>)
 8007024:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007028:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800702c:	4b29      	ldr	r3, [pc, #164]	; (80070d4 <ai_platform_network_get_error+0xec>)
 800702e:	429a      	cmp	r2, r3
 8007030:	d03d      	beq.n	80070ae <ai_platform_network_get_error+0xc6>
 8007032:	e7fe      	b.n	8007032 <ai_platform_network_get_error+0x4a>
 8007034:	4a23      	ldr	r2, [pc, #140]	; (80070c4 <ai_platform_network_get_error+0xdc>)
 8007036:	6813      	ldr	r3, [r2, #0]
 8007038:	f023 0301 	bic.w	r3, r3, #1
 800703c:	6013      	str	r3, [r2, #0]
 800703e:	f7ff ff05 	bl	8006e4c <_ai_platform_acquire_crc>
 8007042:	4b21      	ldr	r3, [pc, #132]	; (80070c8 <ai_platform_network_get_error+0xe0>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800704a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800704e:	d010      	beq.n	8007072 <ai_platform_network_get_error+0x8a>
 8007050:	4a1e      	ldr	r2, [pc, #120]	; (80070cc <ai_platform_network_get_error+0xe4>)
 8007052:	2301      	movs	r3, #1
 8007054:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007058:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1fb      	bne.n	8007058 <ai_platform_network_get_error+0x70>
 8007060:	4b1b      	ldr	r3, [pc, #108]	; (80070d0 <ai_platform_network_get_error+0xe8>)
 8007062:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007066:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800706a:	4b1a      	ldr	r3, [pc, #104]	; (80070d4 <ai_platform_network_get_error+0xec>)
 800706c:	429a      	cmp	r2, r3
 800706e:	d00d      	beq.n	800708c <ai_platform_network_get_error+0xa4>
 8007070:	e7fe      	b.n	8007070 <ai_platform_network_get_error+0x88>
 8007072:	4a19      	ldr	r2, [pc, #100]	; (80070d8 <ai_platform_network_get_error+0xf0>)
 8007074:	2301      	movs	r3, #1
 8007076:	6093      	str	r3, [r2, #8]
 8007078:	6893      	ldr	r3, [r2, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1fc      	bne.n	8007078 <ai_platform_network_get_error+0x90>
 800707e:	4b14      	ldr	r3, [pc, #80]	; (80070d0 <ai_platform_network_get_error+0xe8>)
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	6812      	ldr	r2, [r2, #0]
 8007084:	4b13      	ldr	r3, [pc, #76]	; (80070d4 <ai_platform_network_get_error+0xec>)
 8007086:	429a      	cmp	r2, r3
 8007088:	d000      	beq.n	800708c <ai_platform_network_get_error+0xa4>
 800708a:	e7fe      	b.n	800708a <ai_platform_network_get_error+0xa2>
 800708c:	f7ff fee0 	bl	8006e50 <_ai_platform_release_crc>
 8007090:	f241 0010 	movw	r0, #4112	; 0x1010
 8007094:	bd10      	pop	{r4, pc}
 8007096:	4a10      	ldr	r2, [pc, #64]	; (80070d8 <ai_platform_network_get_error+0xf0>)
 8007098:	2301      	movs	r3, #1
 800709a:	6093      	str	r3, [r2, #8]
 800709c:	6893      	ldr	r3, [r2, #8]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1fc      	bne.n	800709c <ai_platform_network_get_error+0xb4>
 80070a2:	4b0b      	ldr	r3, [pc, #44]	; (80070d0 <ai_platform_network_get_error+0xe8>)
 80070a4:	6013      	str	r3, [r2, #0]
 80070a6:	6812      	ldr	r2, [r2, #0]
 80070a8:	4b0a      	ldr	r3, [pc, #40]	; (80070d4 <ai_platform_network_get_error+0xec>)
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d107      	bne.n	80070be <ai_platform_network_get_error+0xd6>
 80070ae:	f7ff fecf 	bl	8006e50 <_ai_platform_release_crc>
 80070b2:	f104 0010 	add.w	r0, r4, #16
 80070b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ba:	f000 bed7 	b.w	8007e6c <core_get_error>
 80070be:	e7fe      	b.n	80070be <ai_platform_network_get_error+0xd6>
 80070c0:	a1c00100 	.word	0xa1c00100
 80070c4:	e0002000 	.word	0xe0002000
 80070c8:	e0042000 	.word	0xe0042000
 80070cc:	58024000 	.word	0x58024000
 80070d0:	f407a5c2 	.word	0xf407a5c2
 80070d4:	b5e8b5cd 	.word	0xb5e8b5cd
 80070d8:	40023000 	.word	0x40023000

080070dc <ai_platform_network_set_error>:
 80070dc:	b110      	cbz	r0, 80070e4 <ai_platform_network_set_error+0x8>
 80070de:	3010      	adds	r0, #16
 80070e0:	f000 beca 	b.w	8007e78 <core_set_error>
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop

080070e8 <ai_platform_inputs_get>:
 80070e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ec:	b085      	sub	sp, #20
 80070ee:	9102      	str	r1, [sp, #8]
 80070f0:	b318      	cbz	r0, 800713a <ai_platform_inputs_get+0x52>
 80070f2:	4b68      	ldr	r3, [pc, #416]	; (8007294 <ai_platform_inputs_get+0x1ac>)
 80070f4:	6802      	ldr	r2, [r0, #0]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	4607      	mov	r7, r0
 80070fa:	d11e      	bne.n	800713a <ai_platform_inputs_get+0x52>
 80070fc:	4a66      	ldr	r2, [pc, #408]	; (8007298 <ai_platform_inputs_get+0x1b0>)
 80070fe:	6813      	ldr	r3, [r2, #0]
 8007100:	f023 0301 	bic.w	r3, r3, #1
 8007104:	6013      	str	r3, [r2, #0]
 8007106:	f7ff fea1 	bl	8006e4c <_ai_platform_acquire_crc>
 800710a:	4b64      	ldr	r3, [pc, #400]	; (800729c <ai_platform_inputs_get+0x1b4>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007116:	d042      	beq.n	800719e <ai_platform_inputs_get+0xb6>
 8007118:	4a61      	ldr	r2, [pc, #388]	; (80072a0 <ai_platform_inputs_get+0x1b8>)
 800711a:	2301      	movs	r3, #1
 800711c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007120:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1fb      	bne.n	8007120 <ai_platform_inputs_get+0x38>
 8007128:	4b5e      	ldr	r3, [pc, #376]	; (80072a4 <ai_platform_inputs_get+0x1bc>)
 800712a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800712e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007132:	4b5d      	ldr	r3, [pc, #372]	; (80072a8 <ai_platform_inputs_get+0x1c0>)
 8007134:	429a      	cmp	r2, r3
 8007136:	d03e      	beq.n	80071b6 <ai_platform_inputs_get+0xce>
 8007138:	e7fe      	b.n	8007138 <ai_platform_inputs_get+0x50>
 800713a:	4a57      	ldr	r2, [pc, #348]	; (8007298 <ai_platform_inputs_get+0x1b0>)
 800713c:	6813      	ldr	r3, [r2, #0]
 800713e:	f023 0301 	bic.w	r3, r3, #1
 8007142:	6013      	str	r3, [r2, #0]
 8007144:	f7ff fe82 	bl	8006e4c <_ai_platform_acquire_crc>
 8007148:	4b54      	ldr	r3, [pc, #336]	; (800729c <ai_platform_inputs_get+0x1b4>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007154:	d010      	beq.n	8007178 <ai_platform_inputs_get+0x90>
 8007156:	4a52      	ldr	r2, [pc, #328]	; (80072a0 <ai_platform_inputs_get+0x1b8>)
 8007158:	2301      	movs	r3, #1
 800715a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800715e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1fb      	bne.n	800715e <ai_platform_inputs_get+0x76>
 8007166:	4b4f      	ldr	r3, [pc, #316]	; (80072a4 <ai_platform_inputs_get+0x1bc>)
 8007168:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800716c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007170:	4b4d      	ldr	r3, [pc, #308]	; (80072a8 <ai_platform_inputs_get+0x1c0>)
 8007172:	429a      	cmp	r2, r3
 8007174:	d00d      	beq.n	8007192 <ai_platform_inputs_get+0xaa>
 8007176:	e7fe      	b.n	8007176 <ai_platform_inputs_get+0x8e>
 8007178:	4a4c      	ldr	r2, [pc, #304]	; (80072ac <ai_platform_inputs_get+0x1c4>)
 800717a:	2301      	movs	r3, #1
 800717c:	6093      	str	r3, [r2, #8]
 800717e:	6893      	ldr	r3, [r2, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1fc      	bne.n	800717e <ai_platform_inputs_get+0x96>
 8007184:	4b47      	ldr	r3, [pc, #284]	; (80072a4 <ai_platform_inputs_get+0x1bc>)
 8007186:	6013      	str	r3, [r2, #0]
 8007188:	6812      	ldr	r2, [r2, #0]
 800718a:	4b47      	ldr	r3, [pc, #284]	; (80072a8 <ai_platform_inputs_get+0x1c0>)
 800718c:	429a      	cmp	r2, r3
 800718e:	d000      	beq.n	8007192 <ai_platform_inputs_get+0xaa>
 8007190:	e7fe      	b.n	8007190 <ai_platform_inputs_get+0xa8>
 8007192:	f7ff fe5d 	bl	8006e50 <_ai_platform_release_crc>
 8007196:	2000      	movs	r0, #0
 8007198:	b005      	add	sp, #20
 800719a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800719e:	4a43      	ldr	r2, [pc, #268]	; (80072ac <ai_platform_inputs_get+0x1c4>)
 80071a0:	2301      	movs	r3, #1
 80071a2:	6093      	str	r3, [r2, #8]
 80071a4:	6893      	ldr	r3, [r2, #8]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1fc      	bne.n	80071a4 <ai_platform_inputs_get+0xbc>
 80071aa:	4b3e      	ldr	r3, [pc, #248]	; (80072a4 <ai_platform_inputs_get+0x1bc>)
 80071ac:	6013      	str	r3, [r2, #0]
 80071ae:	6812      	ldr	r2, [r2, #0]
 80071b0:	4b3d      	ldr	r3, [pc, #244]	; (80072a8 <ai_platform_inputs_get+0x1c0>)
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d157      	bne.n	8007266 <ai_platform_inputs_get+0x17e>
 80071b6:	f7ff fe4b 	bl	8006e50 <_ai_platform_release_crc>
 80071ba:	9a02      	ldr	r2, [sp, #8]
 80071bc:	b10a      	cbz	r2, 80071c2 <ai_platform_inputs_get+0xda>
 80071be:	2300      	movs	r3, #0
 80071c0:	8013      	strh	r3, [r2, #0]
 80071c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d04f      	beq.n	8007268 <ai_platform_inputs_get+0x180>
 80071c8:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80071cc:	f1ba 0f00 	cmp.w	sl, #0
 80071d0:	d04a      	beq.n	8007268 <ai_platform_inputs_get+0x180>
 80071d2:	f04f 0b00 	mov.w	fp, #0
 80071d6:	465d      	mov	r5, fp
 80071d8:	9703      	str	r7, [sp, #12]
 80071da:	e016      	b.n	800720a <ai_platform_inputs_get+0x122>
 80071dc:	9901      	ldr	r1, [sp, #4]
 80071de:	2301      	movs	r3, #1
 80071e0:	507b      	str	r3, [r7, r1]
 80071e2:	69b1      	ldr	r1, [r6, #24]
 80071e4:	6849      	ldr	r1, [r1, #4]
 80071e6:	6121      	str	r1, [r4, #16]
 80071e8:	f04f 0301 	mov.w	r3, #1
 80071ec:	7523      	strb	r3, [r4, #20]
 80071ee:	e9c4 c200 	strd	ip, r2, [r4]
 80071f2:	6962      	ldr	r2, [r4, #20]
 80071f4:	60a0      	str	r0, [r4, #8]
 80071f6:	2300      	movs	r3, #0
 80071f8:	f369 221f 	bfi	r2, r9, #8, #24
 80071fc:	f8c4 8018 	str.w	r8, [r4, #24]
 8007200:	60e3      	str	r3, [r4, #12]
 8007202:	3501      	adds	r5, #1
 8007204:	f10b 0b1c 	add.w	fp, fp, #28
 8007208:	6162      	str	r2, [r4, #20]
 800720a:	f8ba 3000 	ldrh.w	r3, [sl]
 800720e:	42ab      	cmp	r3, r5
 8007210:	b2aa      	uxth	r2, r5
 8007212:	d931      	bls.n	8007278 <ai_platform_inputs_get+0x190>
 8007214:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007218:	00e9      	lsls	r1, r5, #3
 800721a:	9101      	str	r1, [sp, #4]
 800721c:	b363      	cbz	r3, 8007278 <ai_platform_inputs_get+0x190>
 800721e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8007222:	b34e      	cbz	r6, 8007278 <ai_platform_inputs_get+0x190>
 8007224:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007228:	69b2      	ldr	r2, [r6, #24]
 800722a:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800722e:	6810      	ldr	r0, [r2, #0]
 8007230:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8007234:	68b3      	ldr	r3, [r6, #8]
 8007236:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800723a:	f003 f839 	bl	800a2b0 <ai_array_to_buffer_fmt>
 800723e:	69b1      	ldr	r1, [r6, #24]
 8007240:	4684      	mov	ip, r0
 8007242:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8007246:	688a      	ldr	r2, [r1, #8]
 8007248:	445c      	add	r4, fp
 800724a:	2800      	cmp	r0, #0
 800724c:	d0ca      	beq.n	80071e4 <ai_platform_inputs_get+0xfc>
 800724e:	2100      	movs	r1, #0
 8007250:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8007254:	6831      	ldr	r1, [r6, #0]
 8007256:	6041      	str	r1, [r0, #4]
 8007258:	b111      	cbz	r1, 8007260 <ai_platform_inputs_get+0x178>
 800725a:	8849      	ldrh	r1, [r1, #2]
 800725c:	2900      	cmp	r1, #0
 800725e:	d1bd      	bne.n	80071dc <ai_platform_inputs_get+0xf4>
 8007260:	69b1      	ldr	r1, [r6, #24]
 8007262:	2000      	movs	r0, #0
 8007264:	e7be      	b.n	80071e4 <ai_platform_inputs_get+0xfc>
 8007266:	e7fe      	b.n	8007266 <ai_platform_inputs_get+0x17e>
 8007268:	2218      	movs	r2, #24
 800726a:	2111      	movs	r1, #17
 800726c:	f107 0010 	add.w	r0, r7, #16
 8007270:	f000 fe02 	bl	8007e78 <core_set_error>
 8007274:	2000      	movs	r0, #0
 8007276:	e78f      	b.n	8007198 <ai_platform_inputs_get+0xb0>
 8007278:	9f03      	ldr	r7, [sp, #12]
 800727a:	2a00      	cmp	r2, #0
 800727c:	d0f4      	beq.n	8007268 <ai_platform_inputs_get+0x180>
 800727e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007282:	6858      	ldr	r0, [r3, #4]
 8007284:	9b02      	ldr	r3, [sp, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d086      	beq.n	8007198 <ai_platform_inputs_get+0xb0>
 800728a:	801a      	strh	r2, [r3, #0]
 800728c:	b005      	add	sp, #20
 800728e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007292:	bf00      	nop
 8007294:	a1c00100 	.word	0xa1c00100
 8007298:	e0002000 	.word	0xe0002000
 800729c:	e0042000 	.word	0xe0042000
 80072a0:	58024000 	.word	0x58024000
 80072a4:	f407a5c2 	.word	0xf407a5c2
 80072a8:	b5e8b5cd 	.word	0xb5e8b5cd
 80072ac:	40023000 	.word	0x40023000

080072b0 <ai_platform_outputs_get>:
 80072b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b4:	b085      	sub	sp, #20
 80072b6:	9102      	str	r1, [sp, #8]
 80072b8:	b318      	cbz	r0, 8007302 <ai_platform_outputs_get+0x52>
 80072ba:	4b66      	ldr	r3, [pc, #408]	; (8007454 <ai_platform_outputs_get+0x1a4>)
 80072bc:	6802      	ldr	r2, [r0, #0]
 80072be:	429a      	cmp	r2, r3
 80072c0:	4607      	mov	r7, r0
 80072c2:	d11e      	bne.n	8007302 <ai_platform_outputs_get+0x52>
 80072c4:	4a64      	ldr	r2, [pc, #400]	; (8007458 <ai_platform_outputs_get+0x1a8>)
 80072c6:	6813      	ldr	r3, [r2, #0]
 80072c8:	f023 0301 	bic.w	r3, r3, #1
 80072cc:	6013      	str	r3, [r2, #0]
 80072ce:	f7ff fdbd 	bl	8006e4c <_ai_platform_acquire_crc>
 80072d2:	4b62      	ldr	r3, [pc, #392]	; (800745c <ai_platform_outputs_get+0x1ac>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072de:	d042      	beq.n	8007366 <ai_platform_outputs_get+0xb6>
 80072e0:	4a5f      	ldr	r2, [pc, #380]	; (8007460 <ai_platform_outputs_get+0x1b0>)
 80072e2:	2301      	movs	r3, #1
 80072e4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80072e8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1fb      	bne.n	80072e8 <ai_platform_outputs_get+0x38>
 80072f0:	4b5c      	ldr	r3, [pc, #368]	; (8007464 <ai_platform_outputs_get+0x1b4>)
 80072f2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80072f6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80072fa:	4b5b      	ldr	r3, [pc, #364]	; (8007468 <ai_platform_outputs_get+0x1b8>)
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d03e      	beq.n	800737e <ai_platform_outputs_get+0xce>
 8007300:	e7fe      	b.n	8007300 <ai_platform_outputs_get+0x50>
 8007302:	4a55      	ldr	r2, [pc, #340]	; (8007458 <ai_platform_outputs_get+0x1a8>)
 8007304:	6813      	ldr	r3, [r2, #0]
 8007306:	f023 0301 	bic.w	r3, r3, #1
 800730a:	6013      	str	r3, [r2, #0]
 800730c:	f7ff fd9e 	bl	8006e4c <_ai_platform_acquire_crc>
 8007310:	4b52      	ldr	r3, [pc, #328]	; (800745c <ai_platform_outputs_get+0x1ac>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800731c:	d010      	beq.n	8007340 <ai_platform_outputs_get+0x90>
 800731e:	4a50      	ldr	r2, [pc, #320]	; (8007460 <ai_platform_outputs_get+0x1b0>)
 8007320:	2301      	movs	r3, #1
 8007322:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007326:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1fb      	bne.n	8007326 <ai_platform_outputs_get+0x76>
 800732e:	4b4d      	ldr	r3, [pc, #308]	; (8007464 <ai_platform_outputs_get+0x1b4>)
 8007330:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007334:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007338:	4b4b      	ldr	r3, [pc, #300]	; (8007468 <ai_platform_outputs_get+0x1b8>)
 800733a:	429a      	cmp	r2, r3
 800733c:	d00d      	beq.n	800735a <ai_platform_outputs_get+0xaa>
 800733e:	e7fe      	b.n	800733e <ai_platform_outputs_get+0x8e>
 8007340:	4a4a      	ldr	r2, [pc, #296]	; (800746c <ai_platform_outputs_get+0x1bc>)
 8007342:	2301      	movs	r3, #1
 8007344:	6093      	str	r3, [r2, #8]
 8007346:	6893      	ldr	r3, [r2, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1fc      	bne.n	8007346 <ai_platform_outputs_get+0x96>
 800734c:	4b45      	ldr	r3, [pc, #276]	; (8007464 <ai_platform_outputs_get+0x1b4>)
 800734e:	6013      	str	r3, [r2, #0]
 8007350:	6812      	ldr	r2, [r2, #0]
 8007352:	4b45      	ldr	r3, [pc, #276]	; (8007468 <ai_platform_outputs_get+0x1b8>)
 8007354:	429a      	cmp	r2, r3
 8007356:	d000      	beq.n	800735a <ai_platform_outputs_get+0xaa>
 8007358:	e7fe      	b.n	8007358 <ai_platform_outputs_get+0xa8>
 800735a:	f7ff fd79 	bl	8006e50 <_ai_platform_release_crc>
 800735e:	2000      	movs	r0, #0
 8007360:	b005      	add	sp, #20
 8007362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007366:	4a41      	ldr	r2, [pc, #260]	; (800746c <ai_platform_outputs_get+0x1bc>)
 8007368:	2301      	movs	r3, #1
 800736a:	6093      	str	r3, [r2, #8]
 800736c:	6893      	ldr	r3, [r2, #8]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1fc      	bne.n	800736c <ai_platform_outputs_get+0xbc>
 8007372:	4b3c      	ldr	r3, [pc, #240]	; (8007464 <ai_platform_outputs_get+0x1b4>)
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	6812      	ldr	r2, [r2, #0]
 8007378:	4b3b      	ldr	r3, [pc, #236]	; (8007468 <ai_platform_outputs_get+0x1b8>)
 800737a:	429a      	cmp	r2, r3
 800737c:	d154      	bne.n	8007428 <ai_platform_outputs_get+0x178>
 800737e:	f7ff fd67 	bl	8006e50 <_ai_platform_release_crc>
 8007382:	9a02      	ldr	r2, [sp, #8]
 8007384:	b10a      	cbz	r2, 800738a <ai_platform_outputs_get+0xda>
 8007386:	2300      	movs	r3, #0
 8007388:	8013      	strh	r3, [r2, #0]
 800738a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800738c:	2b01      	cmp	r3, #1
 800738e:	d958      	bls.n	8007442 <ai_platform_outputs_get+0x192>
 8007390:	f04f 0b00 	mov.w	fp, #0
 8007394:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8007398:	9703      	str	r7, [sp, #12]
 800739a:	465d      	mov	r5, fp
 800739c:	e016      	b.n	80073cc <ai_platform_outputs_get+0x11c>
 800739e:	9901      	ldr	r1, [sp, #4]
 80073a0:	2301      	movs	r3, #1
 80073a2:	507b      	str	r3, [r7, r1]
 80073a4:	69b1      	ldr	r1, [r6, #24]
 80073a6:	6849      	ldr	r1, [r1, #4]
 80073a8:	6121      	str	r1, [r4, #16]
 80073aa:	f04f 0301 	mov.w	r3, #1
 80073ae:	7523      	strb	r3, [r4, #20]
 80073b0:	e9c4 c200 	strd	ip, r2, [r4]
 80073b4:	6962      	ldr	r2, [r4, #20]
 80073b6:	60a0      	str	r0, [r4, #8]
 80073b8:	2300      	movs	r3, #0
 80073ba:	f369 221f 	bfi	r2, r9, #8, #24
 80073be:	f8c4 8018 	str.w	r8, [r4, #24]
 80073c2:	60e3      	str	r3, [r4, #12]
 80073c4:	3501      	adds	r5, #1
 80073c6:	f10b 0b1c 	add.w	fp, fp, #28
 80073ca:	6162      	str	r2, [r4, #20]
 80073cc:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80073d0:	42ab      	cmp	r3, r5
 80073d2:	b2aa      	uxth	r2, r5
 80073d4:	d929      	bls.n	800742a <ai_platform_outputs_get+0x17a>
 80073d6:	f8da 3010 	ldr.w	r3, [sl, #16]
 80073da:	00e9      	lsls	r1, r5, #3
 80073dc:	9101      	str	r1, [sp, #4]
 80073de:	b323      	cbz	r3, 800742a <ai_platform_outputs_get+0x17a>
 80073e0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80073e4:	b30e      	cbz	r6, 800742a <ai_platform_outputs_get+0x17a>
 80073e6:	f8da 3014 	ldr.w	r3, [sl, #20]
 80073ea:	69b2      	ldr	r2, [r6, #24]
 80073ec:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80073f0:	6810      	ldr	r0, [r2, #0]
 80073f2:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80073f6:	68b3      	ldr	r3, [r6, #8]
 80073f8:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80073fc:	f002 ff58 	bl	800a2b0 <ai_array_to_buffer_fmt>
 8007400:	69b1      	ldr	r1, [r6, #24]
 8007402:	4684      	mov	ip, r0
 8007404:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8007408:	688a      	ldr	r2, [r1, #8]
 800740a:	445c      	add	r4, fp
 800740c:	2800      	cmp	r0, #0
 800740e:	d0ca      	beq.n	80073a6 <ai_platform_outputs_get+0xf6>
 8007410:	2100      	movs	r1, #0
 8007412:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8007416:	6831      	ldr	r1, [r6, #0]
 8007418:	6041      	str	r1, [r0, #4]
 800741a:	b111      	cbz	r1, 8007422 <ai_platform_outputs_get+0x172>
 800741c:	8849      	ldrh	r1, [r1, #2]
 800741e:	2900      	cmp	r1, #0
 8007420:	d1bd      	bne.n	800739e <ai_platform_outputs_get+0xee>
 8007422:	69b1      	ldr	r1, [r6, #24]
 8007424:	2000      	movs	r0, #0
 8007426:	e7be      	b.n	80073a6 <ai_platform_outputs_get+0xf6>
 8007428:	e7fe      	b.n	8007428 <ai_platform_outputs_get+0x178>
 800742a:	9f03      	ldr	r7, [sp, #12]
 800742c:	b14a      	cbz	r2, 8007442 <ai_platform_outputs_get+0x192>
 800742e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8007432:	6858      	ldr	r0, [r3, #4]
 8007434:	9b02      	ldr	r3, [sp, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d092      	beq.n	8007360 <ai_platform_outputs_get+0xb0>
 800743a:	801a      	strh	r2, [r3, #0]
 800743c:	b005      	add	sp, #20
 800743e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007442:	2218      	movs	r2, #24
 8007444:	2111      	movs	r1, #17
 8007446:	f107 0010 	add.w	r0, r7, #16
 800744a:	f000 fd15 	bl	8007e78 <core_set_error>
 800744e:	2000      	movs	r0, #0
 8007450:	e786      	b.n	8007360 <ai_platform_outputs_get+0xb0>
 8007452:	bf00      	nop
 8007454:	a1c00100 	.word	0xa1c00100
 8007458:	e0002000 	.word	0xe0002000
 800745c:	e0042000 	.word	0xe0042000
 8007460:	58024000 	.word	0x58024000
 8007464:	f407a5c2 	.word	0xf407a5c2
 8007468:	b5e8b5cd 	.word	0xb5e8b5cd
 800746c:	40023000 	.word	0x40023000

08007470 <ai_platform_network_create>:
 8007470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007474:	b083      	sub	sp, #12
 8007476:	4606      	mov	r6, r0
 8007478:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 800747c:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8007480:	4615      	mov	r5, r2
 8007482:	461f      	mov	r7, r3
 8007484:	f7ff fce2 	bl	8006e4c <_ai_platform_acquire_crc>
 8007488:	b188      	cbz	r0, 80074ae <ai_platform_network_create+0x3e>
 800748a:	4a62      	ldr	r2, [pc, #392]	; (8007614 <ai_platform_network_create+0x1a4>)
 800748c:	6812      	ldr	r2, [r2, #0]
 800748e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007492:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007496:	4603      	mov	r3, r0
 8007498:	d00e      	beq.n	80074b8 <ai_platform_network_create+0x48>
 800749a:	4a5f      	ldr	r2, [pc, #380]	; (8007618 <ai_platform_network_create+0x1a8>)
 800749c:	2118      	movs	r1, #24
 800749e:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80074a2:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80074a6:	2918      	cmp	r1, #24
 80074a8:	d018      	beq.n	80074dc <ai_platform_network_create+0x6c>
 80074aa:	f7ff fcd1 	bl	8006e50 <_ai_platform_release_crc>
 80074ae:	f244 1033 	movw	r0, #16691	; 0x4133
 80074b2:	b003      	add	sp, #12
 80074b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074b8:	4a58      	ldr	r2, [pc, #352]	; (800761c <ai_platform_network_create+0x1ac>)
 80074ba:	2101      	movs	r1, #1
 80074bc:	6091      	str	r1, [r2, #8]
 80074be:	2114      	movs	r1, #20
 80074c0:	e001      	b.n	80074c6 <ai_platform_network_create+0x56>
 80074c2:	3901      	subs	r1, #1
 80074c4:	d002      	beq.n	80074cc <ai_platform_network_create+0x5c>
 80074c6:	6894      	ldr	r4, [r2, #8]
 80074c8:	2c00      	cmp	r4, #0
 80074ca:	d1fa      	bne.n	80074c2 <ai_platform_network_create+0x52>
 80074cc:	4a53      	ldr	r2, [pc, #332]	; (800761c <ai_platform_network_create+0x1ac>)
 80074ce:	6891      	ldr	r1, [r2, #8]
 80074d0:	b911      	cbnz	r1, 80074d8 <ai_platform_network_create+0x68>
 80074d2:	6812      	ldr	r2, [r2, #0]
 80074d4:	3201      	adds	r2, #1
 80074d6:	d008      	beq.n	80074ea <ai_platform_network_create+0x7a>
 80074d8:	4618      	mov	r0, r3
 80074da:	e7e6      	b.n	80074aa <ai_platform_network_create+0x3a>
 80074dc:	2101      	movs	r1, #1
 80074de:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80074e2:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80074e6:	2900      	cmp	r1, #0
 80074e8:	d1fb      	bne.n	80074e2 <ai_platform_network_create+0x72>
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7ff fcb0 	bl	8006e50 <_ai_platform_release_crc>
 80074f0:	4a4b      	ldr	r2, [pc, #300]	; (8007620 <ai_platform_network_create+0x1b0>)
 80074f2:	6813      	ldr	r3, [r2, #0]
 80074f4:	f023 0301 	bic.w	r3, r3, #1
 80074f8:	6013      	str	r3, [r2, #0]
 80074fa:	f7ff fca7 	bl	8006e4c <_ai_platform_acquire_crc>
 80074fe:	4b45      	ldr	r3, [pc, #276]	; (8007614 <ai_platform_network_create+0x1a4>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800750a:	d010      	beq.n	800752e <ai_platform_network_create+0xbe>
 800750c:	4b42      	ldr	r3, [pc, #264]	; (8007618 <ai_platform_network_create+0x1a8>)
 800750e:	2201      	movs	r2, #1
 8007510:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8007514:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8007518:	2900      	cmp	r1, #0
 800751a:	d1fb      	bne.n	8007514 <ai_platform_network_create+0xa4>
 800751c:	4a41      	ldr	r2, [pc, #260]	; (8007624 <ai_platform_network_create+0x1b4>)
 800751e:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8007522:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8007526:	4b40      	ldr	r3, [pc, #256]	; (8007628 <ai_platform_network_create+0x1b8>)
 8007528:	429a      	cmp	r2, r3
 800752a:	d00c      	beq.n	8007546 <ai_platform_network_create+0xd6>
 800752c:	e7fe      	b.n	800752c <ai_platform_network_create+0xbc>
 800752e:	4a3b      	ldr	r2, [pc, #236]	; (800761c <ai_platform_network_create+0x1ac>)
 8007530:	2301      	movs	r3, #1
 8007532:	6093      	str	r3, [r2, #8]
 8007534:	6893      	ldr	r3, [r2, #8]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1fc      	bne.n	8007534 <ai_platform_network_create+0xc4>
 800753a:	4b3a      	ldr	r3, [pc, #232]	; (8007624 <ai_platform_network_create+0x1b4>)
 800753c:	6013      	str	r3, [r2, #0]
 800753e:	6812      	ldr	r2, [r2, #0]
 8007540:	4b39      	ldr	r3, [pc, #228]	; (8007628 <ai_platform_network_create+0x1b8>)
 8007542:	429a      	cmp	r2, r3
 8007544:	d128      	bne.n	8007598 <ai_platform_network_create+0x128>
 8007546:	f7ff fc83 	bl	8006e50 <_ai_platform_release_crc>
 800754a:	2e00      	cmp	r6, #0
 800754c:	d036      	beq.n	80075bc <ai_platform_network_create+0x14c>
 800754e:	4b37      	ldr	r3, [pc, #220]	; (800762c <ai_platform_network_create+0x1bc>)
 8007550:	602b      	str	r3, [r5, #0]
 8007552:	6035      	str	r5, [r6, #0]
 8007554:	f000 fc88 	bl	8007e68 <core_init>
 8007558:	b1f8      	cbz	r0, 800759a <ai_platform_network_create+0x12a>
 800755a:	4a31      	ldr	r2, [pc, #196]	; (8007620 <ai_platform_network_create+0x1b0>)
 800755c:	6813      	ldr	r3, [r2, #0]
 800755e:	f023 0301 	bic.w	r3, r3, #1
 8007562:	6013      	str	r3, [r2, #0]
 8007564:	f7ff fc72 	bl	8006e4c <_ai_platform_acquire_crc>
 8007568:	4b2a      	ldr	r3, [pc, #168]	; (8007614 <ai_platform_network_create+0x1a4>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007574:	d025      	beq.n	80075c2 <ai_platform_network_create+0x152>
 8007576:	4a28      	ldr	r2, [pc, #160]	; (8007618 <ai_platform_network_create+0x1a8>)
 8007578:	2301      	movs	r3, #1
 800757a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800757e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1fb      	bne.n	800757e <ai_platform_network_create+0x10e>
 8007586:	4b27      	ldr	r3, [pc, #156]	; (8007624 <ai_platform_network_create+0x1b4>)
 8007588:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800758c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007590:	4b25      	ldr	r3, [pc, #148]	; (8007628 <ai_platform_network_create+0x1b8>)
 8007592:	429a      	cmp	r2, r3
 8007594:	d022      	beq.n	80075dc <ai_platform_network_create+0x16c>
 8007596:	e7fe      	b.n	8007596 <ai_platform_network_create+0x126>
 8007598:	e7fe      	b.n	8007598 <ai_platform_network_create+0x128>
 800759a:	2430      	movs	r4, #48	; 0x30
 800759c:	2300      	movs	r3, #0
 800759e:	6033      	str	r3, [r6, #0]
 80075a0:	2610      	movs	r6, #16
 80075a2:	464a      	mov	r2, r9
 80075a4:	4641      	mov	r1, r8
 80075a6:	4638      	mov	r0, r7
 80075a8:	f002 fe64 	bl	800a274 <ai_version_get>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2000      	movs	r0, #0
 80075b0:	f364 0007 	bfi	r0, r4, #0, #8
 80075b4:	64ab      	str	r3, [r5, #72]	; 0x48
 80075b6:	f366 201f 	bfi	r0, r6, #8, #24
 80075ba:	e77a      	b.n	80074b2 <ai_platform_network_create+0x42>
 80075bc:	f241 0010 	movw	r0, #4112	; 0x1010
 80075c0:	e777      	b.n	80074b2 <ai_platform_network_create+0x42>
 80075c2:	4a16      	ldr	r2, [pc, #88]	; (800761c <ai_platform_network_create+0x1ac>)
 80075c4:	2301      	movs	r3, #1
 80075c6:	6093      	str	r3, [r2, #8]
 80075c8:	6893      	ldr	r3, [r2, #8]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1fc      	bne.n	80075c8 <ai_platform_network_create+0x158>
 80075ce:	4b15      	ldr	r3, [pc, #84]	; (8007624 <ai_platform_network_create+0x1b4>)
 80075d0:	6013      	str	r3, [r2, #0]
 80075d2:	6812      	ldr	r2, [r2, #0]
 80075d4:	4b14      	ldr	r3, [pc, #80]	; (8007628 <ai_platform_network_create+0x1b8>)
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d000      	beq.n	80075dc <ai_platform_network_create+0x16c>
 80075da:	e7fe      	b.n	80075da <ai_platform_network_create+0x16a>
 80075dc:	f7ff fc38 	bl	8006e50 <_ai_platform_release_crc>
 80075e0:	2200      	movs	r2, #0
 80075e2:	4641      	mov	r1, r8
 80075e4:	4638      	mov	r0, r7
 80075e6:	f002 fe45 	bl	800a274 <ai_version_get>
 80075ea:	2200      	movs	r2, #0
 80075ec:	4604      	mov	r4, r0
 80075ee:	2105      	movs	r1, #5
 80075f0:	2001      	movs	r0, #1
 80075f2:	f002 fe3f 	bl	800a274 <ai_version_get>
 80075f6:	4284      	cmp	r4, r0
 80075f8:	d001      	beq.n	80075fe <ai_platform_network_create+0x18e>
 80075fa:	2401      	movs	r4, #1
 80075fc:	e7ce      	b.n	800759c <ai_platform_network_create+0x12c>
 80075fe:	4b0c      	ldr	r3, [pc, #48]	; (8007630 <ai_platform_network_create+0x1c0>)
 8007600:	9301      	str	r3, [sp, #4]
 8007602:	a801      	add	r0, sp, #4
 8007604:	f002 fd9e 	bl	800a144 <ai_check_custom_types>
 8007608:	b110      	cbz	r0, 8007610 <ai_platform_network_create+0x1a0>
 800760a:	2600      	movs	r6, #0
 800760c:	4634      	mov	r4, r6
 800760e:	e7c8      	b.n	80075a2 <ai_platform_network_create+0x132>
 8007610:	2402      	movs	r4, #2
 8007612:	e7c3      	b.n	800759c <ai_platform_network_create+0x12c>
 8007614:	e0042000 	.word	0xe0042000
 8007618:	58024000 	.word	0x58024000
 800761c:	40023000 	.word	0x40023000
 8007620:	e0002000 	.word	0xe0002000
 8007624:	f407a5c2 	.word	0xf407a5c2
 8007628:	b5e8b5cd 	.word	0xb5e8b5cd
 800762c:	a1c00100 	.word	0xa1c00100
 8007630:	84048403 	.word	0x84048403

08007634 <ai_platform_network_init>:
 8007634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007638:	b320      	cbz	r0, 8007684 <ai_platform_network_init+0x50>
 800763a:	4b73      	ldr	r3, [pc, #460]	; (8007808 <ai_platform_network_init+0x1d4>)
 800763c:	6802      	ldr	r2, [r0, #0]
 800763e:	429a      	cmp	r2, r3
 8007640:	4604      	mov	r4, r0
 8007642:	d11f      	bne.n	8007684 <ai_platform_network_init+0x50>
 8007644:	4a71      	ldr	r2, [pc, #452]	; (800780c <ai_platform_network_init+0x1d8>)
 8007646:	6813      	ldr	r3, [r2, #0]
 8007648:	f023 0301 	bic.w	r3, r3, #1
 800764c:	6013      	str	r3, [r2, #0]
 800764e:	460e      	mov	r6, r1
 8007650:	f7ff fbfc 	bl	8006e4c <_ai_platform_acquire_crc>
 8007654:	4b6e      	ldr	r3, [pc, #440]	; (8007810 <ai_platform_network_init+0x1dc>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800765c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007660:	d042      	beq.n	80076e8 <ai_platform_network_init+0xb4>
 8007662:	4a6c      	ldr	r2, [pc, #432]	; (8007814 <ai_platform_network_init+0x1e0>)
 8007664:	2301      	movs	r3, #1
 8007666:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800766a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1fb      	bne.n	800766a <ai_platform_network_init+0x36>
 8007672:	4b69      	ldr	r3, [pc, #420]	; (8007818 <ai_platform_network_init+0x1e4>)
 8007674:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007678:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800767c:	4b67      	ldr	r3, [pc, #412]	; (800781c <ai_platform_network_init+0x1e8>)
 800767e:	429a      	cmp	r2, r3
 8007680:	d03e      	beq.n	8007700 <ai_platform_network_init+0xcc>
 8007682:	e7fe      	b.n	8007682 <ai_platform_network_init+0x4e>
 8007684:	4a61      	ldr	r2, [pc, #388]	; (800780c <ai_platform_network_init+0x1d8>)
 8007686:	6813      	ldr	r3, [r2, #0]
 8007688:	f023 0301 	bic.w	r3, r3, #1
 800768c:	6013      	str	r3, [r2, #0]
 800768e:	f7ff fbdd 	bl	8006e4c <_ai_platform_acquire_crc>
 8007692:	4b5f      	ldr	r3, [pc, #380]	; (8007810 <ai_platform_network_init+0x1dc>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800769a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800769e:	d010      	beq.n	80076c2 <ai_platform_network_init+0x8e>
 80076a0:	4a5c      	ldr	r2, [pc, #368]	; (8007814 <ai_platform_network_init+0x1e0>)
 80076a2:	2301      	movs	r3, #1
 80076a4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80076a8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1fb      	bne.n	80076a8 <ai_platform_network_init+0x74>
 80076b0:	4b59      	ldr	r3, [pc, #356]	; (8007818 <ai_platform_network_init+0x1e4>)
 80076b2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80076b6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80076ba:	4b58      	ldr	r3, [pc, #352]	; (800781c <ai_platform_network_init+0x1e8>)
 80076bc:	429a      	cmp	r2, r3
 80076be:	d00d      	beq.n	80076dc <ai_platform_network_init+0xa8>
 80076c0:	e7fe      	b.n	80076c0 <ai_platform_network_init+0x8c>
 80076c2:	4a57      	ldr	r2, [pc, #348]	; (8007820 <ai_platform_network_init+0x1ec>)
 80076c4:	2301      	movs	r3, #1
 80076c6:	6093      	str	r3, [r2, #8]
 80076c8:	6893      	ldr	r3, [r2, #8]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1fc      	bne.n	80076c8 <ai_platform_network_init+0x94>
 80076ce:	4b52      	ldr	r3, [pc, #328]	; (8007818 <ai_platform_network_init+0x1e4>)
 80076d0:	6013      	str	r3, [r2, #0]
 80076d2:	6812      	ldr	r2, [r2, #0]
 80076d4:	4b51      	ldr	r3, [pc, #324]	; (800781c <ai_platform_network_init+0x1e8>)
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d000      	beq.n	80076dc <ai_platform_network_init+0xa8>
 80076da:	e7fe      	b.n	80076da <ai_platform_network_init+0xa6>
 80076dc:	f7ff fbb8 	bl	8006e50 <_ai_platform_release_crc>
 80076e0:	2600      	movs	r6, #0
 80076e2:	4630      	mov	r0, r6
 80076e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076e8:	4a4d      	ldr	r2, [pc, #308]	; (8007820 <ai_platform_network_init+0x1ec>)
 80076ea:	2301      	movs	r3, #1
 80076ec:	6093      	str	r3, [r2, #8]
 80076ee:	6893      	ldr	r3, [r2, #8]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1fc      	bne.n	80076ee <ai_platform_network_init+0xba>
 80076f4:	4b48      	ldr	r3, [pc, #288]	; (8007818 <ai_platform_network_init+0x1e4>)
 80076f6:	6013      	str	r3, [r2, #0]
 80076f8:	6812      	ldr	r2, [r2, #0]
 80076fa:	4b48      	ldr	r3, [pc, #288]	; (800781c <ai_platform_network_init+0x1e8>)
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d11c      	bne.n	800773a <ai_platform_network_init+0x106>
 8007700:	f7ff fba6 	bl	8006e50 <_ai_platform_release_crc>
 8007704:	2e00      	cmp	r6, #0
 8007706:	d06f      	beq.n	80077e8 <ai_platform_network_init+0x1b4>
 8007708:	4b46      	ldr	r3, [pc, #280]	; (8007824 <ai_platform_network_init+0x1f0>)
 800770a:	6832      	ldr	r2, [r6, #0]
 800770c:	429a      	cmp	r2, r3
 800770e:	d115      	bne.n	800773c <ai_platform_network_init+0x108>
 8007710:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8007714:	6933      	ldr	r3, [r6, #16]
 8007716:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 800771a:	89f7      	ldrh	r7, [r6, #14]
 800771c:	62a3      	str	r3, [r4, #40]	; 0x28
 800771e:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8007722:	2303      	movs	r3, #3
 8007724:	84e7      	strh	r7, [r4, #38]	; 0x26
 8007726:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 800772a:	60e3      	str	r3, [r4, #12]
 800772c:	4620      	mov	r0, r4
 800772e:	4626      	mov	r6, r4
 8007730:	f002 fd32 	bl	800a198 <ai_layers_init_all>
 8007734:	4630      	mov	r0, r6
 8007736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800773a:	e7fe      	b.n	800773a <ai_platform_network_init+0x106>
 800773c:	2101      	movs	r1, #1
 800773e:	4630      	mov	r0, r6
 8007740:	4635      	mov	r5, r6
 8007742:	6876      	ldr	r6, [r6, #4]
 8007744:	f7ff fb34 	bl	8006db0 <ai_buffer_get_size>
 8007748:	f105 081c 	add.w	r8, r5, #28
 800774c:	4681      	mov	r9, r0
 800774e:	2101      	movs	r1, #1
 8007750:	4640      	mov	r0, r8
 8007752:	6a2f      	ldr	r7, [r5, #32]
 8007754:	f7ff fb2c 	bl	8006db0 <ai_buffer_get_size>
 8007758:	f1b9 0f00 	cmp.w	r9, #0
 800775c:	d025      	beq.n	80077aa <ai_platform_network_init+0x176>
 800775e:	2201      	movs	r2, #1
 8007760:	4696      	mov	lr, r2
 8007762:	bb30      	cbnz	r0, 80077b2 <ai_platform_network_init+0x17e>
 8007764:	4680      	mov	r8, r0
 8007766:	4607      	mov	r7, r0
 8007768:	b376      	cbz	r6, 80077c8 <ai_platform_network_init+0x194>
 800776a:	8be3      	ldrh	r3, [r4, #30]
 800776c:	4573      	cmp	r3, lr
 800776e:	d323      	bcc.n	80077b8 <ai_platform_network_init+0x184>
 8007770:	b142      	cbz	r2, 8007784 <ai_platform_network_init+0x150>
 8007772:	46ac      	mov	ip, r5
 8007774:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007778:	6a25      	ldr	r5, [r4, #32]
 800777a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800777c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8007780:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007784:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007786:	f8a4 e01e 	strh.w	lr, [r4, #30]
 800778a:	2600      	movs	r6, #0
 800778c:	42bb      	cmp	r3, r7
 800778e:	83a6      	strh	r6, [r4, #28]
 8007790:	d323      	bcc.n	80077da <ai_platform_network_init+0x1a6>
 8007792:	b37f      	cbz	r7, 80077f4 <ai_platform_network_init+0x1c0>
 8007794:	46c4      	mov	ip, r8
 8007796:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800779a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800779c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800779e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80077a2:	46b6      	mov	lr, r6
 80077a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80077a8:	e7bb      	b.n	8007722 <ai_platform_network_init+0xee>
 80077aa:	464a      	mov	r2, r9
 80077ac:	46ce      	mov	lr, r9
 80077ae:	464d      	mov	r5, r9
 80077b0:	e7d7      	b.n	8007762 <ai_platform_network_init+0x12e>
 80077b2:	b30f      	cbz	r7, 80077f8 <ai_platform_network_init+0x1c4>
 80077b4:	2701      	movs	r7, #1
 80077b6:	e7d7      	b.n	8007768 <ai_platform_network_init+0x134>
 80077b8:	2212      	movs	r2, #18
 80077ba:	2116      	movs	r1, #22
 80077bc:	f104 0010 	add.w	r0, r4, #16
 80077c0:	f000 fb5a 	bl	8007e78 <core_set_error>
 80077c4:	2600      	movs	r6, #0
 80077c6:	e78c      	b.n	80076e2 <ai_platform_network_init+0xae>
 80077c8:	f1b9 0f00 	cmp.w	r9, #0
 80077cc:	d0cd      	beq.n	800776a <ai_platform_network_init+0x136>
 80077ce:	2110      	movs	r1, #16
 80077d0:	2212      	movs	r2, #18
 80077d2:	1860      	adds	r0, r4, r1
 80077d4:	f000 fb50 	bl	8007e78 <core_set_error>
 80077d8:	e783      	b.n	80076e2 <ai_platform_network_init+0xae>
 80077da:	2213      	movs	r2, #19
 80077dc:	2116      	movs	r1, #22
 80077de:	f104 0010 	add.w	r0, r4, #16
 80077e2:	f000 fb49 	bl	8007e78 <core_set_error>
 80077e6:	e77c      	b.n	80076e2 <ai_platform_network_init+0xae>
 80077e8:	2110      	movs	r1, #16
 80077ea:	2211      	movs	r2, #17
 80077ec:	1860      	adds	r0, r4, r1
 80077ee:	f000 fb43 	bl	8007e78 <core_set_error>
 80077f2:	e776      	b.n	80076e2 <ai_platform_network_init+0xae>
 80077f4:	46be      	mov	lr, r7
 80077f6:	e794      	b.n	8007722 <ai_platform_network_init+0xee>
 80077f8:	2110      	movs	r1, #16
 80077fa:	2213      	movs	r2, #19
 80077fc:	1860      	adds	r0, r4, r1
 80077fe:	f000 fb3b 	bl	8007e78 <core_set_error>
 8007802:	463e      	mov	r6, r7
 8007804:	e76d      	b.n	80076e2 <ai_platform_network_init+0xae>
 8007806:	bf00      	nop
 8007808:	a1c00100 	.word	0xa1c00100
 800780c:	e0002000 	.word	0xe0002000
 8007810:	e0042000 	.word	0xe0042000
 8007814:	58024000 	.word	0x58024000
 8007818:	f407a5c2 	.word	0xf407a5c2
 800781c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007820:	40023000 	.word	0x40023000
 8007824:	a1facade 	.word	0xa1facade

08007828 <ai_platform_network_post_init>:
 8007828:	b538      	push	{r3, r4, r5, lr}
 800782a:	b318      	cbz	r0, 8007874 <ai_platform_network_post_init+0x4c>
 800782c:	4b41      	ldr	r3, [pc, #260]	; (8007934 <ai_platform_network_post_init+0x10c>)
 800782e:	6802      	ldr	r2, [r0, #0]
 8007830:	429a      	cmp	r2, r3
 8007832:	4604      	mov	r4, r0
 8007834:	d11e      	bne.n	8007874 <ai_platform_network_post_init+0x4c>
 8007836:	4a40      	ldr	r2, [pc, #256]	; (8007938 <ai_platform_network_post_init+0x110>)
 8007838:	6813      	ldr	r3, [r2, #0]
 800783a:	f023 0301 	bic.w	r3, r3, #1
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	f7ff fb04 	bl	8006e4c <_ai_platform_acquire_crc>
 8007844:	4b3d      	ldr	r3, [pc, #244]	; (800793c <ai_platform_network_post_init+0x114>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800784c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007850:	d040      	beq.n	80078d4 <ai_platform_network_post_init+0xac>
 8007852:	4a3b      	ldr	r2, [pc, #236]	; (8007940 <ai_platform_network_post_init+0x118>)
 8007854:	2301      	movs	r3, #1
 8007856:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800785a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1fb      	bne.n	800785a <ai_platform_network_post_init+0x32>
 8007862:	4b38      	ldr	r3, [pc, #224]	; (8007944 <ai_platform_network_post_init+0x11c>)
 8007864:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007868:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800786c:	4b36      	ldr	r3, [pc, #216]	; (8007948 <ai_platform_network_post_init+0x120>)
 800786e:	429a      	cmp	r2, r3
 8007870:	d03c      	beq.n	80078ec <ai_platform_network_post_init+0xc4>
 8007872:	e7fe      	b.n	8007872 <ai_platform_network_post_init+0x4a>
 8007874:	4a30      	ldr	r2, [pc, #192]	; (8007938 <ai_platform_network_post_init+0x110>)
 8007876:	6813      	ldr	r3, [r2, #0]
 8007878:	f023 0301 	bic.w	r3, r3, #1
 800787c:	6013      	str	r3, [r2, #0]
 800787e:	f7ff fae5 	bl	8006e4c <_ai_platform_acquire_crc>
 8007882:	4b2e      	ldr	r3, [pc, #184]	; (800793c <ai_platform_network_post_init+0x114>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800788a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800788e:	d010      	beq.n	80078b2 <ai_platform_network_post_init+0x8a>
 8007890:	4a2b      	ldr	r2, [pc, #172]	; (8007940 <ai_platform_network_post_init+0x118>)
 8007892:	2301      	movs	r3, #1
 8007894:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007898:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1fb      	bne.n	8007898 <ai_platform_network_post_init+0x70>
 80078a0:	4b28      	ldr	r3, [pc, #160]	; (8007944 <ai_platform_network_post_init+0x11c>)
 80078a2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80078a6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80078aa:	4b27      	ldr	r3, [pc, #156]	; (8007948 <ai_platform_network_post_init+0x120>)
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d00d      	beq.n	80078cc <ai_platform_network_post_init+0xa4>
 80078b0:	e7fe      	b.n	80078b0 <ai_platform_network_post_init+0x88>
 80078b2:	4a26      	ldr	r2, [pc, #152]	; (800794c <ai_platform_network_post_init+0x124>)
 80078b4:	2301      	movs	r3, #1
 80078b6:	6093      	str	r3, [r2, #8]
 80078b8:	6893      	ldr	r3, [r2, #8]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1fc      	bne.n	80078b8 <ai_platform_network_post_init+0x90>
 80078be:	4b21      	ldr	r3, [pc, #132]	; (8007944 <ai_platform_network_post_init+0x11c>)
 80078c0:	6013      	str	r3, [r2, #0]
 80078c2:	6812      	ldr	r2, [r2, #0]
 80078c4:	4b20      	ldr	r3, [pc, #128]	; (8007948 <ai_platform_network_post_init+0x120>)
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d000      	beq.n	80078cc <ai_platform_network_post_init+0xa4>
 80078ca:	e7fe      	b.n	80078ca <ai_platform_network_post_init+0xa2>
 80078cc:	f7ff fac0 	bl	8006e50 <_ai_platform_release_crc>
 80078d0:	2000      	movs	r0, #0
 80078d2:	bd38      	pop	{r3, r4, r5, pc}
 80078d4:	4a1d      	ldr	r2, [pc, #116]	; (800794c <ai_platform_network_post_init+0x124>)
 80078d6:	2301      	movs	r3, #1
 80078d8:	6093      	str	r3, [r2, #8]
 80078da:	6893      	ldr	r3, [r2, #8]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1fc      	bne.n	80078da <ai_platform_network_post_init+0xb2>
 80078e0:	4b18      	ldr	r3, [pc, #96]	; (8007944 <ai_platform_network_post_init+0x11c>)
 80078e2:	6013      	str	r3, [r2, #0]
 80078e4:	6812      	ldr	r2, [r2, #0]
 80078e6:	4b18      	ldr	r3, [pc, #96]	; (8007948 <ai_platform_network_post_init+0x120>)
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d11a      	bne.n	8007922 <ai_platform_network_post_init+0xfa>
 80078ec:	f7ff fab0 	bl	8006e50 <_ai_platform_release_crc>
 80078f0:	68e3      	ldr	r3, [r4, #12]
 80078f2:	f013 0502 	ands.w	r5, r3, #2
 80078f6:	d015      	beq.n	8007924 <ai_platform_network_post_init+0xfc>
 80078f8:	4620      	mov	r0, r4
 80078fa:	f002 fc5b 	bl	800a1b4 <ai_layers_post_init_all>
 80078fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007900:	b16b      	cbz	r3, 800791e <ai_platform_network_post_init+0xf6>
 8007902:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007904:	e007      	b.n	8007916 <ai_platform_network_post_init+0xee>
 8007906:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800790a:	4798      	blx	r3
 800790c:	692b      	ldr	r3, [r5, #16]
 800790e:	42ab      	cmp	r3, r5
 8007910:	d005      	beq.n	800791e <ai_platform_network_post_init+0xf6>
 8007912:	b123      	cbz	r3, 800791e <ai_platform_network_post_init+0xf6>
 8007914:	461d      	mov	r5, r3
 8007916:	4629      	mov	r1, r5
 8007918:	2000      	movs	r0, #0
 800791a:	2d00      	cmp	r5, #0
 800791c:	d1f3      	bne.n	8007906 <ai_platform_network_post_init+0xde>
 800791e:	2001      	movs	r0, #1
 8007920:	bd38      	pop	{r3, r4, r5, pc}
 8007922:	e7fe      	b.n	8007922 <ai_platform_network_post_init+0xfa>
 8007924:	2210      	movs	r2, #16
 8007926:	2111      	movs	r1, #17
 8007928:	18a0      	adds	r0, r4, r2
 800792a:	f000 faa5 	bl	8007e78 <core_set_error>
 800792e:	4628      	mov	r0, r5
 8007930:	bd38      	pop	{r3, r4, r5, pc}
 8007932:	bf00      	nop
 8007934:	a1c00100 	.word	0xa1c00100
 8007938:	e0002000 	.word	0xe0002000
 800793c:	e0042000 	.word	0xe0042000
 8007940:	58024000 	.word	0x58024000
 8007944:	f407a5c2 	.word	0xf407a5c2
 8007948:	b5e8b5cd 	.word	0xb5e8b5cd
 800794c:	40023000 	.word	0x40023000

08007950 <ai_platform_network_process>:
 8007950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007954:	460e      	mov	r6, r1
 8007956:	b085      	sub	sp, #20
 8007958:	4693      	mov	fp, r2
 800795a:	4605      	mov	r5, r0
 800795c:	b120      	cbz	r0, 8007968 <ai_platform_network_process+0x18>
 800795e:	4bb7      	ldr	r3, [pc, #732]	; (8007c3c <ai_platform_network_process+0x2ec>)
 8007960:	6802      	ldr	r2, [r0, #0]
 8007962:	429a      	cmp	r2, r3
 8007964:	bf18      	it	ne
 8007966:	2500      	movne	r5, #0
 8007968:	4ab5      	ldr	r2, [pc, #724]	; (8007c40 <ai_platform_network_process+0x2f0>)
 800796a:	6813      	ldr	r3, [r2, #0]
 800796c:	f023 0301 	bic.w	r3, r3, #1
 8007970:	6013      	str	r3, [r2, #0]
 8007972:	f7ff fa6b 	bl	8006e4c <_ai_platform_acquire_crc>
 8007976:	4bb3      	ldr	r3, [pc, #716]	; (8007c44 <ai_platform_network_process+0x2f4>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800797e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007982:	d010      	beq.n	80079a6 <ai_platform_network_process+0x56>
 8007984:	4ab0      	ldr	r2, [pc, #704]	; (8007c48 <ai_platform_network_process+0x2f8>)
 8007986:	2301      	movs	r3, #1
 8007988:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800798c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1fb      	bne.n	800798c <ai_platform_network_process+0x3c>
 8007994:	4bad      	ldr	r3, [pc, #692]	; (8007c4c <ai_platform_network_process+0x2fc>)
 8007996:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800799a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800799e:	4bac      	ldr	r3, [pc, #688]	; (8007c50 <ai_platform_network_process+0x300>)
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d00d      	beq.n	80079c0 <ai_platform_network_process+0x70>
 80079a4:	e7fe      	b.n	80079a4 <ai_platform_network_process+0x54>
 80079a6:	4aab      	ldr	r2, [pc, #684]	; (8007c54 <ai_platform_network_process+0x304>)
 80079a8:	2301      	movs	r3, #1
 80079aa:	6093      	str	r3, [r2, #8]
 80079ac:	6893      	ldr	r3, [r2, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1fc      	bne.n	80079ac <ai_platform_network_process+0x5c>
 80079b2:	4ba6      	ldr	r3, [pc, #664]	; (8007c4c <ai_platform_network_process+0x2fc>)
 80079b4:	6013      	str	r3, [r2, #0]
 80079b6:	6812      	ldr	r2, [r2, #0]
 80079b8:	4ba5      	ldr	r3, [pc, #660]	; (8007c50 <ai_platform_network_process+0x300>)
 80079ba:	429a      	cmp	r2, r3
 80079bc:	f040 812c 	bne.w	8007c18 <ai_platform_network_process+0x2c8>
 80079c0:	f7ff fa46 	bl	8006e50 <_ai_platform_release_crc>
 80079c4:	2d00      	cmp	r5, #0
 80079c6:	f000 8155 	beq.w	8007c74 <ai_platform_network_process+0x324>
 80079ca:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 8124 	beq.w	8007c1a <ai_platform_network_process+0x2ca>
 80079d2:	68eb      	ldr	r3, [r5, #12]
 80079d4:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 80079d8:	f003 0303 	and.w	r3, r3, #3
 80079dc:	2700      	movs	r7, #0
 80079de:	2b03      	cmp	r3, #3
 80079e0:	616f      	str	r7, [r5, #20]
 80079e2:	f040 813f 	bne.w	8007c64 <ai_platform_network_process+0x314>
 80079e6:	2e00      	cmp	r6, #0
 80079e8:	f000 811d 	beq.w	8007c26 <ai_platform_network_process+0x2d6>
 80079ec:	f1ba 0f00 	cmp.w	sl, #0
 80079f0:	f000 8119 	beq.w	8007c26 <ai_platform_network_process+0x2d6>
 80079f4:	f8ba 3000 	ldrh.w	r3, [sl]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 8114 	beq.w	8007c26 <ai_platform_network_process+0x2d6>
 80079fe:	69b3      	ldr	r3, [r6, #24]
 8007a00:	f8cd b00c 	str.w	fp, [sp, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8007a0a:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d072      	beq.n	8007af8 <ai_platform_network_process+0x1a8>
 8007a12:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8007a16:	2c00      	cmp	r4, #0
 8007a18:	d06e      	beq.n	8007af8 <ai_platform_network_process+0x1a8>
 8007a1a:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007a1e:	f8d3 9000 	ldr.w	r9, [r3]
 8007a22:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8007a26:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007a2a:	f000 81e1 	beq.w	8007df0 <ai_platform_network_process+0x4a0>
 8007a2e:	69a3      	ldr	r3, [r4, #24]
 8007a30:	2101      	movs	r1, #1
 8007a32:	4630      	mov	r0, r6
 8007a34:	685d      	ldr	r5, [r3, #4]
 8007a36:	f7ff f9bb 	bl	8006db0 <ai_buffer_get_size>
 8007a3a:	4285      	cmp	r5, r0
 8007a3c:	f0c0 811c 	bcc.w	8007c78 <ai_platform_network_process+0x328>
 8007a40:	68e0      	ldr	r0, [r4, #12]
 8007a42:	69b1      	ldr	r1, [r6, #24]
 8007a44:	68c2      	ldr	r2, [r0, #12]
 8007a46:	68cb      	ldr	r3, [r1, #12]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	f040 8115 	bne.w	8007c78 <ai_platform_network_process+0x328>
 8007a4e:	6882      	ldr	r2, [r0, #8]
 8007a50:	688b      	ldr	r3, [r1, #8]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	f040 8110 	bne.w	8007c78 <ai_platform_network_process+0x328>
 8007a58:	6842      	ldr	r2, [r0, #4]
 8007a5a:	684b      	ldr	r3, [r1, #4]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	f040 810b 	bne.w	8007c78 <ai_platform_network_process+0x328>
 8007a62:	69a3      	ldr	r3, [r4, #24]
 8007a64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a68:	f002 fcb6 	bl	800a3d8 <ai_array_get_data_byte_size>
 8007a6c:	4605      	mov	r5, r0
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f002 fc06 	bl	800a280 <get_tensor_byte_size>
 8007a74:	4285      	cmp	r5, r0
 8007a76:	f0c0 80ff 	bcc.w	8007c78 <ai_platform_network_process+0x328>
 8007a7a:	69a3      	ldr	r3, [r4, #24]
 8007a7c:	6818      	ldr	r0, [r3, #0]
 8007a7e:	f002 fc17 	bl	800a2b0 <ai_array_to_buffer_fmt>
 8007a82:	6833      	ldr	r3, [r6, #0]
 8007a84:	4058      	eors	r0, r3
 8007a86:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8007a8a:	f040 81bc 	bne.w	8007e06 <ai_platform_network_process+0x4b6>
 8007a8e:	6873      	ldr	r3, [r6, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 81af 	beq.w	8007df4 <ai_platform_network_process+0x4a4>
 8007a96:	69b3      	ldr	r3, [r6, #24]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f000 819f 	beq.w	8007dde <ai_platform_network_process+0x48e>
 8007aa0:	9a01      	ldr	r2, [sp, #4]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	bf38      	it	cc
 8007aa6:	461a      	movcc	r2, r3
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	9201      	str	r2, [sp, #4]
 8007aac:	f002 fbe8 	bl	800a280 <get_tensor_byte_size>
 8007ab0:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ab4:	69b3      	ldr	r3, [r6, #24]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	fb00 f303 	mul.w	r3, r0, r3
 8007abc:	f8c8 300c 	str.w	r3, [r8, #12]
 8007ac0:	6871      	ldr	r1, [r6, #4]
 8007ac2:	f8c8 1004 	str.w	r1, [r8, #4]
 8007ac6:	440b      	add	r3, r1
 8007ac8:	f849 300b 	str.w	r3, [r9, fp]
 8007acc:	69a0      	ldr	r0, [r4, #24]
 8007ace:	6803      	ldr	r3, [r0, #0]
 8007ad0:	009a      	lsls	r2, r3, #2
 8007ad2:	f107 0701 	add.w	r7, r7, #1
 8007ad6:	f106 061c 	add.w	r6, r6, #28
 8007ada:	f100 80bd 	bmi.w	8007c58 <ai_platform_network_process+0x308>
 8007ade:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007ae2:	1a9b      	subs	r3, r3, r2
 8007ae4:	4419      	add	r1, r3
 8007ae6:	6081      	str	r1, [r0, #8]
 8007ae8:	69a3      	ldr	r3, [r4, #24]
 8007aea:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007aee:	60da      	str	r2, [r3, #12]
 8007af0:	f8ba 3000 	ldrh.w	r3, [sl]
 8007af4:	42bb      	cmp	r3, r7
 8007af6:	d888      	bhi.n	8007a0a <ai_platform_network_process+0xba>
 8007af8:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8007afc:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8007afe:	f1bb 0f00 	cmp.w	fp, #0
 8007b02:	f000 8189 	beq.w	8007e18 <ai_platform_network_process+0x4c8>
 8007b06:	2a01      	cmp	r2, #1
 8007b08:	f240 8161 	bls.w	8007dce <ai_platform_network_process+0x47e>
 8007b0c:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8007b10:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 815a 	beq.w	8007dce <ai_platform_network_process+0x47e>
 8007b1a:	465e      	mov	r6, fp
 8007b1c:	2700      	movs	r7, #0
 8007b1e:	462c      	mov	r4, r5
 8007b20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f000 80b5 	beq.w	8007c94 <ai_platform_network_process+0x344>
 8007b2a:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8007b2e:	2d00      	cmp	r5, #0
 8007b30:	f000 80b0 	beq.w	8007c94 <ai_platform_network_process+0x344>
 8007b34:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007b38:	f8d3 8000 	ldr.w	r8, [r3]
 8007b3c:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8007b40:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007b44:	f000 8174 	beq.w	8007e30 <ai_platform_network_process+0x4e0>
 8007b48:	69ab      	ldr	r3, [r5, #24]
 8007b4a:	2101      	movs	r1, #1
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	9302      	str	r3, [sp, #8]
 8007b50:	4630      	mov	r0, r6
 8007b52:	f7ff f92d 	bl	8006db0 <ai_buffer_get_size>
 8007b56:	9b02      	ldr	r3, [sp, #8]
 8007b58:	4283      	cmp	r3, r0
 8007b5a:	f0c0 8137 	bcc.w	8007dcc <ai_platform_network_process+0x47c>
 8007b5e:	68e8      	ldr	r0, [r5, #12]
 8007b60:	69b1      	ldr	r1, [r6, #24]
 8007b62:	68c2      	ldr	r2, [r0, #12]
 8007b64:	68cb      	ldr	r3, [r1, #12]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	f040 8130 	bne.w	8007dcc <ai_platform_network_process+0x47c>
 8007b6c:	6882      	ldr	r2, [r0, #8]
 8007b6e:	688b      	ldr	r3, [r1, #8]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	f040 812b 	bne.w	8007dcc <ai_platform_network_process+0x47c>
 8007b76:	6842      	ldr	r2, [r0, #4]
 8007b78:	684b      	ldr	r3, [r1, #4]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	f040 8126 	bne.w	8007dcc <ai_platform_network_process+0x47c>
 8007b80:	69ab      	ldr	r3, [r5, #24]
 8007b82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b86:	f002 fc27 	bl	800a3d8 <ai_array_get_data_byte_size>
 8007b8a:	9002      	str	r0, [sp, #8]
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	f002 fb77 	bl	800a280 <get_tensor_byte_size>
 8007b92:	9b02      	ldr	r3, [sp, #8]
 8007b94:	4283      	cmp	r3, r0
 8007b96:	f0c0 8119 	bcc.w	8007dcc <ai_platform_network_process+0x47c>
 8007b9a:	69ab      	ldr	r3, [r5, #24]
 8007b9c:	6818      	ldr	r0, [r3, #0]
 8007b9e:	f002 fb87 	bl	800a2b0 <ai_array_to_buffer_fmt>
 8007ba2:	6833      	ldr	r3, [r6, #0]
 8007ba4:	4058      	eors	r0, r3
 8007ba6:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8007baa:	f040 8139 	bne.w	8007e20 <ai_platform_network_process+0x4d0>
 8007bae:	6873      	ldr	r3, [r6, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f000 8150 	beq.w	8007e56 <ai_platform_network_process+0x506>
 8007bb6:	69b3      	ldr	r3, [r6, #24]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 8142 	beq.w	8007e44 <ai_platform_network_process+0x4f4>
 8007bc0:	9a01      	ldr	r2, [sp, #4]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	bf38      	it	cc
 8007bc6:	461a      	movcc	r2, r3
 8007bc8:	4628      	mov	r0, r5
 8007bca:	9201      	str	r2, [sp, #4]
 8007bcc:	f002 fb58 	bl	800a280 <get_tensor_byte_size>
 8007bd0:	f8ca 0008 	str.w	r0, [sl, #8]
 8007bd4:	69b3      	ldr	r3, [r6, #24]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	fb00 f303 	mul.w	r3, r0, r3
 8007bdc:	f8ca 300c 	str.w	r3, [sl, #12]
 8007be0:	6871      	ldr	r1, [r6, #4]
 8007be2:	f8ca 1004 	str.w	r1, [sl, #4]
 8007be6:	440b      	add	r3, r1
 8007be8:	f848 300b 	str.w	r3, [r8, fp]
 8007bec:	69a8      	ldr	r0, [r5, #24]
 8007bee:	6803      	ldr	r3, [r0, #0]
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	f107 0701 	add.w	r7, r7, #1
 8007bf6:	f106 061c 	add.w	r6, r6, #28
 8007bfa:	d446      	bmi.n	8007c8a <ai_platform_network_process+0x33a>
 8007bfc:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007c00:	1a9b      	subs	r3, r3, r2
 8007c02:	4419      	add	r1, r3
 8007c04:	6081      	str	r1, [r0, #8]
 8007c06:	69ab      	ldr	r3, [r5, #24]
 8007c08:	f8da 2004 	ldr.w	r2, [sl, #4]
 8007c0c:	60da      	str	r2, [r3, #12]
 8007c0e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007c12:	429f      	cmp	r7, r3
 8007c14:	d384      	bcc.n	8007b20 <ai_platform_network_process+0x1d0>
 8007c16:	e03d      	b.n	8007c94 <ai_platform_network_process+0x344>
 8007c18:	e7fe      	b.n	8007c18 <ai_platform_network_process+0x2c8>
 8007c1a:	68ea      	ldr	r2, [r5, #12]
 8007c1c:	616b      	str	r3, [r5, #20]
 8007c1e:	f002 0203 	and.w	r2, r2, #3
 8007c22:	2a03      	cmp	r2, #3
 8007c24:	d11e      	bne.n	8007c64 <ai_platform_network_process+0x314>
 8007c26:	2217      	movs	r2, #23
 8007c28:	2112      	movs	r1, #18
 8007c2a:	f105 0010 	add.w	r0, r5, #16
 8007c2e:	f000 f923 	bl	8007e78 <core_set_error>
 8007c32:	2400      	movs	r4, #0
 8007c34:	4620      	mov	r0, r4
 8007c36:	b005      	add	sp, #20
 8007c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c3c:	a1c00100 	.word	0xa1c00100
 8007c40:	e0002000 	.word	0xe0002000
 8007c44:	e0042000 	.word	0xe0042000
 8007c48:	58024000 	.word	0x58024000
 8007c4c:	f407a5c2 	.word	0xf407a5c2
 8007c50:	b5e8b5cd 	.word	0xb5e8b5cd
 8007c54:	40023000 	.word	0x40023000
 8007c58:	f8ba 3000 	ldrh.w	r3, [sl]
 8007c5c:	429f      	cmp	r7, r3
 8007c5e:	f4ff aed4 	bcc.w	8007a0a <ai_platform_network_process+0xba>
 8007c62:	e749      	b.n	8007af8 <ai_platform_network_process+0x1a8>
 8007c64:	2230      	movs	r2, #48	; 0x30
 8007c66:	2111      	movs	r1, #17
 8007c68:	f105 0010 	add.w	r0, r5, #16
 8007c6c:	f000 f904 	bl	8007e78 <core_set_error>
 8007c70:	2400      	movs	r4, #0
 8007c72:	e7df      	b.n	8007c34 <ai_platform_network_process+0x2e4>
 8007c74:	462c      	mov	r4, r5
 8007c76:	e7dd      	b.n	8007c34 <ai_platform_network_process+0x2e4>
 8007c78:	9d02      	ldr	r5, [sp, #8]
 8007c7a:	2218      	movs	r2, #24
 8007c7c:	2112      	movs	r1, #18
 8007c7e:	f105 0010 	add.w	r0, r5, #16
 8007c82:	f000 f8f9 	bl	8007e78 <core_set_error>
 8007c86:	2400      	movs	r4, #0
 8007c88:	e7d4      	b.n	8007c34 <ai_platform_network_process+0x2e4>
 8007c8a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007c8e:	429f      	cmp	r7, r3
 8007c90:	f4ff af46 	bcc.w	8007b20 <ai_platform_network_process+0x1d0>
 8007c94:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007c98:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8007c9a:	82a3      	strh	r3, [r4, #20]
 8007c9c:	4625      	mov	r5, r4
 8007c9e:	2a00      	cmp	r2, #0
 8007ca0:	f040 808e 	bne.w	8007dc0 <ai_platform_network_process+0x470>
 8007ca4:	4616      	mov	r6, r2
 8007ca6:	4617      	mov	r7, r2
 8007ca8:	8aec      	ldrh	r4, [r5, #22]
 8007caa:	429c      	cmp	r4, r3
 8007cac:	bf38      	it	cc
 8007cae:	46ab      	movcc	fp, r5
 8007cb0:	d2c0      	bcs.n	8007c34 <ai_platform_network_process+0x2e4>
 8007cb2:	2e00      	cmp	r6, #0
 8007cb4:	d030      	beq.n	8007d18 <ai_platform_network_process+0x3c8>
 8007cb6:	f04f 0800 	mov.w	r8, #0
 8007cba:	e014      	b.n	8007ce6 <ai_platform_network_process+0x396>
 8007cbc:	6882      	ldr	r2, [r0, #8]
 8007cbe:	68c5      	ldr	r5, [r0, #12]
 8007cc0:	6863      	ldr	r3, [r4, #4]
 8007cc2:	1b52      	subs	r2, r2, r5
 8007cc4:	4413      	add	r3, r2
 8007cc6:	6083      	str	r3, [r0, #8]
 8007cc8:	698b      	ldr	r3, [r1, #24]
 8007cca:	6862      	ldr	r2, [r4, #4]
 8007ccc:	60da      	str	r2, [r3, #12]
 8007cce:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8007cd2:	f859 200a 	ldr.w	r2, [r9, sl]
 8007cd6:	440b      	add	r3, r1
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	bf24      	itt	cs
 8007cdc:	68e3      	ldrcs	r3, [r4, #12]
 8007cde:	1ad3      	subcs	r3, r2, r3
 8007ce0:	6063      	str	r3, [r4, #4]
 8007ce2:	f108 0801 	add.w	r8, r8, #1
 8007ce6:	8833      	ldrh	r3, [r6, #0]
 8007ce8:	4543      	cmp	r3, r8
 8007cea:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8007cee:	d913      	bls.n	8007d18 <ai_platform_network_process+0x3c8>
 8007cf0:	6873      	ldr	r3, [r6, #4]
 8007cf2:	b18b      	cbz	r3, 8007d18 <ai_platform_network_process+0x3c8>
 8007cf4:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8007cf8:	b171      	cbz	r1, 8007d18 <ai_platform_network_process+0x3c8>
 8007cfa:	6988      	ldr	r0, [r1, #24]
 8007cfc:	68b2      	ldr	r2, [r6, #8]
 8007cfe:	6803      	ldr	r3, [r0, #0]
 8007d00:	f8d2 9000 	ldr.w	r9, [r2]
 8007d04:	009d      	lsls	r5, r3, #2
 8007d06:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8007d0a:	d5d7      	bpl.n	8007cbc <ai_platform_network_process+0x36c>
 8007d0c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8007d10:	6880      	ldr	r0, [r0, #8]
 8007d12:	f002 fb9d 	bl	800a450 <memcpy>
 8007d16:	e7da      	b.n	8007cce <ai_platform_network_process+0x37e>
 8007d18:	4658      	mov	r0, fp
 8007d1a:	f002 fa5f 	bl	800a1dc <ai_layers_forward_all>
 8007d1e:	2f00      	cmp	r7, #0
 8007d20:	d03f      	beq.n	8007da2 <ai_platform_network_process+0x452>
 8007d22:	2400      	movs	r4, #0
 8007d24:	e016      	b.n	8007d54 <ai_platform_network_process+0x404>
 8007d26:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8007d2a:	f859 100a 	ldr.w	r1, [r9, sl]
 8007d2e:	4413      	add	r3, r2
 8007d30:	428b      	cmp	r3, r1
 8007d32:	bf24      	itt	cs
 8007d34:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8007d38:	1acb      	subcs	r3, r1, r3
 8007d3a:	f8c8 3004 	str.w	r3, [r8, #4]
 8007d3e:	6981      	ldr	r1, [r0, #24]
 8007d40:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8007d44:	1b52      	subs	r2, r2, r5
 8007d46:	4413      	add	r3, r2
 8007d48:	608b      	str	r3, [r1, #8]
 8007d4a:	6983      	ldr	r3, [r0, #24]
 8007d4c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007d50:	60da      	str	r2, [r3, #12]
 8007d52:	3401      	adds	r4, #1
 8007d54:	883b      	ldrh	r3, [r7, #0]
 8007d56:	42a3      	cmp	r3, r4
 8007d58:	d923      	bls.n	8007da2 <ai_platform_network_process+0x452>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	b30b      	cbz	r3, 8007da2 <ai_platform_network_process+0x452>
 8007d5e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007d62:	b1f0      	cbz	r0, 8007da2 <ai_platform_network_process+0x452>
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	6983      	ldr	r3, [r0, #24]
 8007d68:	f8d2 9000 	ldr.w	r9, [r2]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	0092      	lsls	r2, r2, #2
 8007d70:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8007d74:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8007d78:	d5d5      	bpl.n	8007d26 <ai_platform_network_process+0x3d6>
 8007d7a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8007d7e:	6899      	ldr	r1, [r3, #8]
 8007d80:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007d84:	f002 fb64 	bl	800a450 <memcpy>
 8007d88:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8007d8c:	f859 200a 	ldr.w	r2, [r9, sl]
 8007d90:	440b      	add	r3, r1
 8007d92:	4293      	cmp	r3, r2
 8007d94:	bf24      	itt	cs
 8007d96:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8007d9a:	1ad3      	subcs	r3, r2, r3
 8007d9c:	f8c8 3004 	str.w	r3, [r8, #4]
 8007da0:	e7d7      	b.n	8007d52 <ai_platform_network_process+0x402>
 8007da2:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8007da6:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8007daa:	3401      	adds	r4, #1
 8007dac:	b2a4      	uxth	r4, r4
 8007dae:	42a3      	cmp	r3, r4
 8007db0:	f8ab 4016 	strh.w	r4, [fp, #22]
 8007db4:	f63f af7d 	bhi.w	8007cb2 <ai_platform_network_process+0x362>
 8007db8:	4620      	mov	r0, r4
 8007dba:	b005      	add	sp, #20
 8007dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc0:	2a01      	cmp	r2, #1
 8007dc2:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8007dc4:	d03c      	beq.n	8007e40 <ai_platform_network_process+0x4f0>
 8007dc6:	f106 070c 	add.w	r7, r6, #12
 8007dca:	e76d      	b.n	8007ca8 <ai_platform_network_process+0x358>
 8007dcc:	4625      	mov	r5, r4
 8007dce:	2218      	movs	r2, #24
 8007dd0:	2113      	movs	r1, #19
 8007dd2:	f105 0010 	add.w	r0, r5, #16
 8007dd6:	f000 f84f 	bl	8007e78 <core_set_error>
 8007dda:	2400      	movs	r4, #0
 8007ddc:	e72a      	b.n	8007c34 <ai_platform_network_process+0x2e4>
 8007dde:	9d02      	ldr	r5, [sp, #8]
 8007de0:	4604      	mov	r4, r0
 8007de2:	2221      	movs	r2, #33	; 0x21
 8007de4:	2112      	movs	r1, #18
 8007de6:	f105 0010 	add.w	r0, r5, #16
 8007dea:	f000 f845 	bl	8007e78 <core_set_error>
 8007dee:	e721      	b.n	8007c34 <ai_platform_network_process+0x2e4>
 8007df0:	9d02      	ldr	r5, [sp, #8]
 8007df2:	e718      	b.n	8007c26 <ai_platform_network_process+0x2d6>
 8007df4:	9d02      	ldr	r5, [sp, #8]
 8007df6:	4604      	mov	r4, r0
 8007df8:	2217      	movs	r2, #23
 8007dfa:	2112      	movs	r1, #18
 8007dfc:	f105 0010 	add.w	r0, r5, #16
 8007e00:	f000 f83a 	bl	8007e78 <core_set_error>
 8007e04:	e716      	b.n	8007c34 <ai_platform_network_process+0x2e4>
 8007e06:	9d02      	ldr	r5, [sp, #8]
 8007e08:	2219      	movs	r2, #25
 8007e0a:	2112      	movs	r1, #18
 8007e0c:	f105 0010 	add.w	r0, r5, #16
 8007e10:	f000 f832 	bl	8007e78 <core_set_error>
 8007e14:	2400      	movs	r4, #0
 8007e16:	e70d      	b.n	8007c34 <ai_platform_network_process+0x2e4>
 8007e18:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007e1c:	82ab      	strh	r3, [r5, #20]
 8007e1e:	e73e      	b.n	8007c9e <ai_platform_network_process+0x34e>
 8007e20:	f104 0010 	add.w	r0, r4, #16
 8007e24:	2219      	movs	r2, #25
 8007e26:	2113      	movs	r1, #19
 8007e28:	f000 f826 	bl	8007e78 <core_set_error>
 8007e2c:	2400      	movs	r4, #0
 8007e2e:	e701      	b.n	8007c34 <ai_platform_network_process+0x2e4>
 8007e30:	f104 0010 	add.w	r0, r4, #16
 8007e34:	2217      	movs	r2, #23
 8007e36:	2113      	movs	r1, #19
 8007e38:	f000 f81e 	bl	8007e78 <core_set_error>
 8007e3c:	4654      	mov	r4, sl
 8007e3e:	e6f9      	b.n	8007c34 <ai_platform_network_process+0x2e4>
 8007e40:	2700      	movs	r7, #0
 8007e42:	e731      	b.n	8007ca8 <ai_platform_network_process+0x358>
 8007e44:	4625      	mov	r5, r4
 8007e46:	2221      	movs	r2, #33	; 0x21
 8007e48:	4604      	mov	r4, r0
 8007e4a:	2113      	movs	r1, #19
 8007e4c:	f105 0010 	add.w	r0, r5, #16
 8007e50:	f000 f812 	bl	8007e78 <core_set_error>
 8007e54:	e6ee      	b.n	8007c34 <ai_platform_network_process+0x2e4>
 8007e56:	4625      	mov	r5, r4
 8007e58:	2217      	movs	r2, #23
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	2113      	movs	r1, #19
 8007e5e:	f105 0010 	add.w	r0, r5, #16
 8007e62:	f000 f809 	bl	8007e78 <core_set_error>
 8007e66:	e6e5      	b.n	8007c34 <ai_platform_network_process+0x2e4>

08007e68 <core_init>:
 8007e68:	2001      	movs	r0, #1
 8007e6a:	4770      	bx	lr

08007e6c <core_get_error>:
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2200      	movs	r2, #0
 8007e70:	6800      	ldr	r0, [r0, #0]
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop

08007e78 <core_set_error>:
 8007e78:	4603      	mov	r3, r0
 8007e7a:	7800      	ldrb	r0, [r0, #0]
 8007e7c:	b108      	cbz	r0, 8007e82 <core_set_error+0xa>
 8007e7e:	2000      	movs	r0, #0
 8007e80:	4770      	bx	lr
 8007e82:	7019      	strb	r1, [r3, #0]
 8007e84:	6819      	ldr	r1, [r3, #0]
 8007e86:	f362 211f 	bfi	r1, r2, #8, #24
 8007e8a:	2001      	movs	r0, #1
 8007e8c:	6019      	str	r1, [r3, #0]
 8007e8e:	4770      	bx	lr

08007e90 <func_dummy>:
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop

08007e94 <ai_conv2d_stripe_f32.constprop.0>:
 8007e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e98:	ed2d 8b02 	vpush	{d8}
 8007e9c:	b09d      	sub	sp, #116	; 0x74
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	e9c7 3219 	strd	r3, r2, [r7, #100]	; 0x64
 8007ea4:	f8d7 a0bc 	ldr.w	sl, [r7, #188]	; 0xbc
 8007ea8:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8007eac:	66f8      	str	r0, [r7, #108]	; 0x6c
 8007eae:	f1ba 0f01 	cmp.w	sl, #1
 8007eb2:	663b      	str	r3, [r7, #96]	; 0x60
 8007eb4:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 8007eb8:	f8d7 50b4 	ldr.w	r5, [r7, #180]	; 0xb4
 8007ebc:	f8d7 c0cc 	ldr.w	ip, [r7, #204]	; 0xcc
 8007ec0:	f9b7 e0d4 	ldrsh.w	lr, [r7, #212]	; 0xd4
 8007ec4:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	; 0xd8
 8007ec8:	6579      	str	r1, [r7, #84]	; 0x54
 8007eca:	e9d7 3030 	ldrd	r3, r0, [r7, #192]	; 0xc0
 8007ece:	f000 812f 	beq.w	8008130 <ai_conv2d_stripe_f32.constprop.0+0x29c>
 8007ed2:	45b2      	cmp	sl, r6
 8007ed4:	f000 827a 	beq.w	80083cc <ai_conv2d_stripe_f32.constprop.0+0x538>
 8007ed8:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8007edc:	2900      	cmp	r1, #0
 8007ede:	f000 8115 	beq.w	800810c <ai_conv2d_stripe_f32.constprop.0+0x278>
 8007ee2:	fb93 f4f2 	sdiv	r4, r3, r2
 8007ee6:	fb02 3414 	mls	r4, r2, r4, r3
 8007eea:	1b14      	subs	r4, r2, r4
 8007eec:	1ac1      	subs	r1, r0, r3
 8007eee:	fb94 f0f2 	sdiv	r0, r4, r2
 8007ef2:	fb02 4010 	mls	r0, r2, r0, r4
 8007ef6:	1a09      	subs	r1, r1, r0
 8007ef8:	4411      	add	r1, r2
 8007efa:	3901      	subs	r1, #1
 8007efc:	4418      	add	r0, r3
 8007efe:	fb91 f9f2 	sdiv	r9, r1, r2
 8007f02:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8007f06:	eddf 6a89 	vldr	s13, [pc, #548]	; 800812c <ai_conv2d_stripe_f32.constprop.0+0x298>
 8007f0a:	4460      	add	r0, ip
 8007f0c:	fb01 f100 	mul.w	r1, r1, r0
 8007f10:	6239      	str	r1, [r7, #32]
 8007f12:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8007f16:	4413      	add	r3, r2
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f1e:	fb01 f202 	mul.w	r2, r1, r2
 8007f22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f24:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f28:	fb02 f303 	mul.w	r3, r2, r3
 8007f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f2e:	fb0e f306 	mul.w	r3, lr, r6
 8007f32:	fbb6 f2fa 	udiv	r2, r6, sl
 8007f36:	1a9b      	subs	r3, r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f3c:	00b3      	lsls	r3, r6, #2
 8007f3e:	61fb      	str	r3, [r7, #28]
 8007f40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007f44:	eba5 0509 	sub.w	r5, r5, r9
 8007f48:	fb02 f303 	mul.w	r3, r2, r3
 8007f4c:	fb05 f303 	mul.w	r3, r5, r3
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	627b      	str	r3, [r7, #36]	; 0x24
 8007f54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	633b      	str	r3, [r7, #48]	; 0x30
 8007f5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f60:	f1c3 0800 	rsb	r8, r3, #0
 8007f64:	ebae 0303 	sub.w	r3, lr, r3
 8007f68:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8007f6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f6e:	2300      	movs	r3, #0
 8007f70:	653b      	str	r3, [r7, #80]	; 0x50
 8007f72:	46cc      	mov	ip, r9
 8007f74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f78:	f8c7 b014 	str.w	fp, [r7, #20]
 8007f7c:	fbb3 f3fa 	udiv	r3, r3, sl
 8007f80:	46d1      	mov	r9, sl
 8007f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f2c0 80c5 	blt.w	8008118 <ai_conv2d_stripe_f32.constprop.0+0x284>
 8007f8e:	2400      	movs	r4, #0
 8007f90:	4673      	mov	r3, lr
 8007f92:	4671      	mov	r1, lr
 8007f94:	4622      	mov	r2, r4
 8007f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f98:	f8d7 50d0 	ldr.w	r5, [r7, #208]	; 0xd0
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	fb93 f3fe 	sdiv	r3, r3, lr
 8007fa2:	4403      	add	r3, r0
 8007fa4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007fa6:	fb0b 0303 	mla	r3, fp, r3, r0
 8007faa:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007fae:	4440      	add	r0, r8
 8007fb0:	42a8      	cmp	r0, r5
 8007fb2:	bf94      	ite	ls
 8007fb4:	ebc2 0200 	rsbls	r2, r2, r0
 8007fb8:	ebc2 0205 	rsbhi	r2, r2, r5
 8007fbc:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8007fc0:	6a3d      	ldr	r5, [r7, #32]
 8007fc2:	4428      	add	r0, r5
 8007fc4:	4420      	add	r0, r4
 8007fc6:	fb91 f4fe 	sdiv	r4, r1, lr
 8007fca:	fb0e 1114 	mls	r1, lr, r4, r1
 8007fce:	1a52      	subs	r2, r2, r1
 8007fd0:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8007fd2:	4401      	add	r1, r0
 8007fd4:	69f8      	ldr	r0, [r7, #28]
 8007fd6:	fb00 4101 	mla	r1, r0, r1, r4
 8007fda:	65f9      	str	r1, [r7, #92]	; 0x5c
 8007fdc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007fde:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8007fe0:	4472      	add	r2, lr
 8007fe2:	3a01      	subs	r2, #1
 8007fe4:	fb92 f6fe 	sdiv	r6, r2, lr
 8007fe8:	460a      	mov	r2, r1
 8007fea:	2900      	cmp	r1, #0
 8007fec:	bf08      	it	eq
 8007fee:	4622      	moveq	r2, r4
 8007ff0:	42a2      	cmp	r2, r4
 8007ff2:	637a      	str	r2, [r7, #52]	; 0x34
 8007ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ff6:	fb0e 2116 	mls	r1, lr, r6, r2
 8007ffa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ffe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008002:	bf08      	it	eq
 8008004:	eeb0 7a66 	vmoveq.f32	s14, s13
 8008008:	1b92      	subs	r2, r2, r6
 800800a:	f1b9 0f00 	cmp.w	r9, #0
 800800e:	d066      	beq.n	80080de <ai_conv2d_stripe_f32.constprop.0+0x24a>
 8008010:	fb0b f202 	mul.w	r2, fp, r2
 8008014:	643a      	str	r2, [r7, #64]	; 0x40
 8008016:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800801a:	fb00 f101 	mul.w	r1, r0, r1
 800801e:	4591      	cmp	r9, r2
 8008020:	6479      	str	r1, [r7, #68]	; 0x44
 8008022:	d85c      	bhi.n	80080de <ai_conv2d_stripe_f32.constprop.0+0x24a>
 8008024:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008026:	e9c7 e803 	strd	lr, r8, [r7, #12]
 800802a:	2500      	movs	r5, #0
 800802c:	3a01      	subs	r2, #1
 800802e:	46aa      	mov	sl, r5
 8008030:	61ba      	str	r2, [r7, #24]
 8008032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008034:	f8c7 a008 	str.w	sl, [r7, #8]
 8008038:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800803c:	63ba      	str	r2, [r7, #56]	; 0x38
 800803e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008040:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8008044:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008046:	f04f 0800 	mov.w	r8, #0
 800804a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800804c:	ecf2 7a01 	vldmia	r2!, {s15}
 8008050:	f1bc 0f00 	cmp.w	ip, #0
 8008054:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008058:	63ba      	str	r2, [r7, #56]	; 0x38
 800805a:	dd22      	ble.n	80080a2 <ai_conv2d_stripe_f32.constprop.0+0x20e>
 800805c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800805e:	2100      	movs	r1, #0
 8008060:	2e00      	cmp	r6, #0
 8008062:	bfc8      	it	gt
 8008064:	2000      	movgt	r0, #0
 8008066:	dd15      	ble.n	8008094 <ai_conv2d_stripe_f32.constprop.0+0x200>
 8008068:	eb02 040b 	add.w	r4, r2, fp
 800806c:	4294      	cmp	r4, r2
 800806e:	d90c      	bls.n	800808a <ai_conv2d_stripe_f32.constprop.0+0x1f6>
 8008070:	4696      	mov	lr, r2
 8008072:	469a      	mov	sl, r3
 8008074:	ecbe 6a01 	vldmia	lr!, {s12}
 8008078:	ecfa 5a01 	vldmia	sl!, {s11}
 800807c:	4574      	cmp	r4, lr
 800807e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008082:	d8f7      	bhi.n	8008074 <ai_conv2d_stripe_f32.constprop.0+0x1e0>
 8008084:	697c      	ldr	r4, [r7, #20]
 8008086:	4423      	add	r3, r4
 8008088:	4422      	add	r2, r4
 800808a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800808c:	3001      	adds	r0, #1
 800808e:	4286      	cmp	r6, r0
 8008090:	4422      	add	r2, r4
 8008092:	d1e9      	bne.n	8008068 <ai_conv2d_stripe_f32.constprop.0+0x1d4>
 8008094:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008096:	3101      	adds	r1, #1
 8008098:	4402      	add	r2, r0
 800809a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800809c:	458c      	cmp	ip, r1
 800809e:	4403      	add	r3, r0
 80080a0:	d1de      	bne.n	8008060 <ai_conv2d_stripe_f32.constprop.0+0x1cc>
 80080a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80080a4:	ece2 7a01 	vstmia	r2!, {s15}
 80080a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80080aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ac:	4413      	add	r3, r2
 80080ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080b0:	f108 0801 	add.w	r8, r8, #1
 80080b4:	4542      	cmp	r2, r8
 80080b6:	d8c8      	bhi.n	800804a <ai_conv2d_stripe_f32.constprop.0+0x1b6>
 80080b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80080ba:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80080be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80080c2:	445a      	add	r2, fp
 80080c4:	65fa      	str	r2, [r7, #92]	; 0x5c
 80080c6:	69ba      	ldr	r2, [r7, #24]
 80080c8:	f10a 0a01 	add.w	sl, sl, #1
 80080cc:	4589      	cmp	r9, r1
 80080ce:	bf88      	it	hi
 80080d0:	2200      	movhi	r2, #0
 80080d2:	3201      	adds	r2, #1
 80080d4:	45d1      	cmp	r9, sl
 80080d6:	4415      	add	r5, r2
 80080d8:	d1ab      	bne.n	8008032 <ai_conv2d_stripe_f32.constprop.0+0x19e>
 80080da:	e9d7 e803 	ldrd	lr, r8, [r7, #12]
 80080de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80080e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080e4:	440a      	add	r2, r1
 80080e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80080e8:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80080ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80080ee:	4411      	add	r1, r2
 80080f0:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80080f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080f6:	eba8 0802 	sub.w	r8, r8, r2
 80080fa:	1a8a      	subs	r2, r1, r2
 80080fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80080fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008102:	3301      	adds	r3, #1
 8008104:	429a      	cmp	r2, r3
 8008106:	653b      	str	r3, [r7, #80]	; 0x50
 8008108:	f47f af3c 	bne.w	8007f84 <ai_conv2d_stripe_f32.constprop.0+0xf0>
 800810c:	3774      	adds	r7, #116	; 0x74
 800810e:	46bd      	mov	sp, r7
 8008110:	ecbd 8b02 	vpop	{d8}
 8008114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008118:	fb98 f1fe 	sdiv	r1, r8, lr
 800811c:	fb0e 8111 	mls	r1, lr, r1, r8
 8008120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008122:	ebae 0101 	sub.w	r1, lr, r1
 8008126:	4642      	mov	r2, r8
 8008128:	4644      	mov	r4, r8
 800812a:	e734      	b.n	8007f96 <ai_conv2d_stripe_f32.constprop.0+0x102>
 800812c:	00000000 	.word	0x00000000
 8008130:	fb0e f102 	mul.w	r1, lr, r2
 8008134:	2901      	cmp	r1, #1
 8008136:	f47f aecf 	bne.w	8007ed8 <ai_conv2d_stripe_f32.constprop.0+0x44>
 800813a:	1ac1      	subs	r1, r0, r3
 800813c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8008140:	65f9      	str	r1, [r7, #92]	; 0x5c
 8008142:	00b1      	lsls	r1, r6, #2
 8008144:	63b9      	str	r1, [r7, #56]	; 0x38
 8008146:	fb01 f100 	mul.w	r1, r1, r0
 800814a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800814c:	eb0c 0203 	add.w	r2, ip, r3
 8008150:	fb01 0102 	mla	r1, r1, r2, r0
 8008154:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008156:	65b9      	str	r1, [r7, #88]	; 0x58
 8008158:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000
 800815c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8008160:	f080 8269 	bcs.w	8008636 <ai_conv2d_stripe_f32.constprop.0+0x7a2>
 8008164:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008168:	2a00      	cmp	r2, #0
 800816a:	d0cf      	beq.n	800810c <ai_conv2d_stripe_f32.constprop.0+0x278>
 800816c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008170:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8008174:	ed1f 6a13 	vldr	s12, [pc, #-76]	; 800812c <ai_conv2d_stripe_f32.constprop.0+0x298>
 8008178:	fb05 f202 	mul.w	r2, r5, r2
 800817c:	fb00 f303 	mul.w	r3, r0, r3
 8008180:	fb06 f202 	mul.w	r2, r6, r2
 8008184:	64bb      	str	r3, [r7, #72]	; 0x48
 8008186:	0093      	lsls	r3, r2, #2
 8008188:	643b      	str	r3, [r7, #64]	; 0x40
 800818a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800818c:	fb03 f306 	mul.w	r3, r3, r6
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	627b      	str	r3, [r7, #36]	; 0x24
 8008194:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008198:	fb03 f306 	mul.w	r3, r3, r6
 800819c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80081a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80081a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081ae:	2300      	movs	r3, #0
 80081b0:	653b      	str	r3, [r7, #80]	; 0x50
 80081b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 8106 	beq.w	80083c6 <ai_conv2d_stripe_f32.constprop.0+0x532>
 80081ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081bc:	ecf3 6a01 	vldmia	r3!, {s13}
 80081c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f000 80ea 	beq.w	80083a0 <ai_conv2d_stripe_f32.constprop.0+0x50c>
 80081cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081d0:	f8d7 90c8 	ldr.w	r9, [r7, #200]	; 0xc8
 80081d4:	425d      	negs	r5, r3
 80081d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d8:	657b      	str	r3, [r7, #84]	; 0x54
 80081da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081dc:	647b      	str	r3, [r7, #68]	; 0x44
 80081de:	f04f 0b00 	mov.w	fp, #0
 80081e2:	f1b9 0f00 	cmp.w	r9, #0
 80081e6:	f2c0 8221 	blt.w	800862c <ai_conv2d_stripe_f32.constprop.0+0x798>
 80081ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081ee:	2300      	movs	r3, #0
 80081f0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80081f2:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 80081f4:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80081f8:	fb02 0c06 	mla	ip, r2, r6, r0
 80081fc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8008200:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008204:	4428      	add	r0, r5
 8008206:	42a0      	cmp	r0, r4
 8008208:	bf94      	ite	ls
 800820a:	ebc3 0300 	rsbls	r3, r3, r0
 800820e:	ebc3 0304 	rsbhi	r3, r3, r4
 8008212:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8008216:	1ac4      	subs	r4, r0, r3
 8008218:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800821c:	1ac0      	subs	r0, r0, r3
 800821e:	fb02 f303 	mul.w	r3, r2, r3
 8008222:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008224:	2a00      	cmp	r2, #0
 8008226:	eeb0 7a66 	vmov.f32	s14, s13
 800822a:	f340 80a5 	ble.w	8008378 <ai_conv2d_stripe_f32.constprop.0+0x4e4>
 800822e:	fb06 f204 	mul.w	r2, r6, r4
 8008232:	637a      	str	r2, [r7, #52]	; 0x34
 8008234:	fb06 f200 	mul.w	r2, r6, r0
 8008238:	f023 060f 	bic.w	r6, r3, #15
 800823c:	1e70      	subs	r0, r6, #1
 800823e:	0900      	lsrs	r0, r0, #4
 8008240:	3001      	adds	r0, #1
 8008242:	633a      	str	r2, [r7, #48]	; 0x30
 8008244:	0102      	lsls	r2, r0, #4
 8008246:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008248:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800824c:	2400      	movs	r4, #0
 800824e:	4662      	mov	r2, ip
 8008250:	2e00      	cmp	r6, #0
 8008252:	bfd8      	it	le
 8008254:	2000      	movle	r0, #0
 8008256:	dd72      	ble.n	800833e <ai_conv2d_stripe_f32.constprop.0+0x4aa>
 8008258:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800825c:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8008260:	f04f 0800 	mov.w	r8, #0
 8008264:	ed50 4a0f 	vldr	s9, [r0, #-60]	; 0xffffffc4
 8008268:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800826c:	ed1c 5a10 	vldr	s10, [ip, #-64]	; 0xffffffc0
 8008270:	ed50 5a10 	vldr	s11, [r0, #-64]	; 0xffffffc0
 8008274:	ed5c 3a0d 	vldr	s7, [ip, #-52]	; 0xffffffcc
 8008278:	ed1c 4a0c 	vldr	s8, [ip, #-48]	; 0xffffffd0
 800827c:	ed1c 2a0a 	vldr	s4, [ip, #-40]	; 0xffffffd8
 8008280:	ed50 2a0a 	vldr	s5, [r0, #-40]	; 0xffffffd8
 8008284:	ed1c 3a09 	vldr	s6, [ip, #-36]	; 0xffffffdc
 8008288:	ed1c 0a06 	vldr	s0, [ip, #-24]	; 0xffffffe8
 800828c:	ed50 0a06 	vldr	s1, [r0, #-24]	; 0xffffffe8
 8008290:	ed1c 1a05 	vldr	s2, [ip, #-20]	; 0xffffffec
 8008294:	ed50 1a05 	vldr	s3, [r0, #-20]	; 0xffffffec
 8008298:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800829c:	ed5c 4a0e 	vldr	s9, [ip, #-56]	; 0xffffffc8
 80082a0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80082a4:	f108 0810 	add.w	r8, r8, #16
 80082a8:	45b0      	cmp	r8, r6
 80082aa:	ed10 5a0e 	vldr	s10, [r0, #-56]	; 0xffffffc8
 80082ae:	ed50 5a0d 	vldr	s11, [r0, #-52]	; 0xffffffcc
 80082b2:	eee4 7a85 	vfma.f32	s15, s9, s10
 80082b6:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80082ba:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80082be:	ed50 4a1c 	vldr	s9, [r0, #-112]	; 0xffffff90
 80082c2:	ed1c 5a1b 	vldr	s10, [ip, #-108]	; 0xffffff94
 80082c6:	eee3 7aa5 	vfma.f32	s15, s7, s11
 80082ca:	ed50 5a1b 	vldr	s11, [r0, #-108]	; 0xffffff94
 80082ce:	ed50 3a19 	vldr	s7, [r0, #-100]	; 0xffffff9c
 80082d2:	eee4 7a24 	vfma.f32	s15, s8, s9
 80082d6:	ed1c 4a18 	vldr	s8, [ip, #-96]	; 0xffffffa0
 80082da:	ed50 4a18 	vldr	s9, [r0, #-96]	; 0xffffffa0
 80082de:	eee5 7a25 	vfma.f32	s15, s10, s11
 80082e2:	ed1c 5a17 	vldr	s10, [ip, #-92]	; 0xffffffa4
 80082e6:	ed50 5a17 	vldr	s11, [r0, #-92]	; 0xffffffa4
 80082ea:	eee2 7a22 	vfma.f32	s15, s4, s5
 80082ee:	ed1c 2a14 	vldr	s4, [ip, #-80]	; 0xffffffb0
 80082f2:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 80082f6:	eee3 7a23 	vfma.f32	s15, s6, s7
 80082fa:	ed1c 3a13 	vldr	s6, [ip, #-76]	; 0xffffffb4
 80082fe:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 8008302:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008306:	ed1c 4a12 	vldr	s8, [ip, #-72]	; 0xffffffb8
 800830a:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 800830e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008312:	ed1c 5a11 	vldr	s10, [ip, #-68]	; 0xffffffbc
 8008316:	ed50 5a11 	vldr	s11, [r0, #-68]	; 0xffffffbc
 800831a:	eee0 7a20 	vfma.f32	s15, s0, s1
 800831e:	eee1 7a21 	vfma.f32	s15, s2, s3
 8008322:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008326:	eee3 7a23 	vfma.f32	s15, s6, s7
 800832a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800832e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008332:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008336:	db95      	blt.n	8008264 <ai_conv2d_stripe_f32.constprop.0+0x3d0>
 8008338:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800833a:	4471      	add	r1, lr
 800833c:	4472      	add	r2, lr
 800833e:	4283      	cmp	r3, r0
 8008340:	dd11      	ble.n	8008366 <ai_conv2d_stripe_f32.constprop.0+0x4d2>
 8008342:	4684      	mov	ip, r0
 8008344:	468a      	mov	sl, r1
 8008346:	4690      	mov	r8, r2
 8008348:	ecf8 5a01 	vldmia	r8!, {s11}
 800834c:	ecfa 7a01 	vldmia	sl!, {s15}
 8008350:	f10c 0c01 	add.w	ip, ip, #1
 8008354:	4563      	cmp	r3, ip
 8008356:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800835a:	d1f5      	bne.n	8008348 <ai_conv2d_stripe_f32.constprop.0+0x4b4>
 800835c:	1a18      	subs	r0, r3, r0
 800835e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8008362:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8008366:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008368:	4401      	add	r1, r0
 800836a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800836c:	4402      	add	r2, r0
 800836e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008370:	3401      	adds	r4, #1
 8008372:	42a0      	cmp	r0, r4
 8008374:	f47f af6c 	bne.w	8008250 <ai_conv2d_stripe_f32.constprop.0+0x3bc>
 8008378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800837a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800837c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800837e:	ed83 7a00 	vstr	s14, [r3]
 8008382:	440b      	add	r3, r1
 8008384:	4491      	add	r9, r2
 8008386:	647b      	str	r3, [r7, #68]	; 0x44
 8008388:	1aad      	subs	r5, r5, r2
 800838a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800838c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800838e:	4413      	add	r3, r2
 8008390:	657b      	str	r3, [r7, #84]	; 0x54
 8008392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008396:	f10b 0b01 	add.w	fp, fp, #1
 800839a:	455b      	cmp	r3, fp
 800839c:	f47f af21 	bne.w	80081e2 <ai_conv2d_stripe_f32.constprop.0+0x34e>
 80083a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80083a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083a6:	440a      	add	r2, r1
 80083a8:	66ba      	str	r2, [r7, #104]	; 0x68
 80083aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083ac:	3204      	adds	r2, #4
 80083ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80083b0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80083b4:	3301      	adds	r3, #1
 80083b6:	429a      	cmp	r2, r3
 80083b8:	653b      	str	r3, [r7, #80]	; 0x50
 80083ba:	f43f aea7 	beq.w	800810c <ai_conv2d_stripe_f32.constprop.0+0x278>
 80083be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f47f aefa 	bne.w	80081ba <ai_conv2d_stripe_f32.constprop.0+0x326>
 80083c6:	eef0 6a46 	vmov.f32	s13, s12
 80083ca:	e6fa      	b.n	80081c2 <ai_conv2d_stripe_f32.constprop.0+0x32e>
 80083cc:	fb0e f102 	mul.w	r1, lr, r2
 80083d0:	2901      	cmp	r1, #1
 80083d2:	f47f ad81 	bne.w	8007ed8 <ai_conv2d_stripe_f32.constprop.0+0x44>
 80083d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80083da:	2a00      	cmp	r2, #0
 80083dc:	f43f ae96 	beq.w	800810c <ai_conv2d_stripe_f32.constprop.0+0x278>
 80083e0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80083e4:	ed5f 3aaf 	vldr	s7, [pc, #-700]	; 800812c <ai_conv2d_stripe_f32.constprop.0+0x298>
 80083e8:	f8c7 60a0 	str.w	r6, [r7, #160]	; 0xa0
 80083ec:	eb0c 0203 	add.w	r2, ip, r3
 80083f0:	fb01 f202 	mul.w	r2, r1, r2
 80083f4:	61fa      	str	r2, [r7, #28]
 80083f6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80083fa:	1a1a      	subs	r2, r3, r0
 80083fc:	442a      	add	r2, r5
 80083fe:	fb01 f202 	mul.w	r2, r1, r2
 8008402:	1ac1      	subs	r1, r0, r3
 8008404:	64f9      	str	r1, [r7, #76]	; 0x4c
 8008406:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800840a:	fb03 f301 	mul.w	r3, r3, r1
 800840e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008410:	0093      	lsls	r3, r2, #2
 8008412:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008414:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	63bb      	str	r3, [r7, #56]	; 0x38
 800841c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008420:	f1c3 0b00 	rsb	fp, r3, #0
 8008424:	00f3      	lsls	r3, r6, #3
 8008426:	623b      	str	r3, [r7, #32]
 8008428:	2300      	movs	r3, #0
 800842a:	653b      	str	r3, [r7, #80]	; 0x50
 800842c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008430:	fbb3 f3f6 	udiv	r3, r3, r6
 8008434:	61bb      	str	r3, [r7, #24]
 8008436:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800843a:	2b00      	cmp	r3, #0
 800843c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8008440:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8008444:	ea4f 1a06 	mov.w	sl, r6, lsl #4
 8008448:	f2c0 80ea 	blt.w	8008620 <ai_conv2d_stripe_f32.constprop.0+0x78c>
 800844c:	2500      	movs	r5, #0
 800844e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008450:	462b      	mov	r3, r5
 8008452:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008456:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800845a:	69fc      	ldr	r4, [r7, #28]
 800845c:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 800845e:	445a      	add	r2, fp
 8008460:	4282      	cmp	r2, r0
 8008462:	bf28      	it	cs
 8008464:	4602      	movcs	r2, r0
 8008466:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800846a:	1ad2      	subs	r2, r2, r3
 800846c:	1904      	adds	r4, r0, r4
 800846e:	2e00      	cmp	r6, #0
 8008470:	f000 822b 	beq.w	80088ca <ai_conv2d_stripe_f32.constprop.0+0xa36>
 8008474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008476:	647e      	str	r6, [r7, #68]	; 0x44
 8008478:	429e      	cmp	r6, r3
 800847a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800847c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008480:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008484:	eba3 0002 	sub.w	r0, r3, r2
 8008488:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800848c:	fb03 f000 	mul.w	r0, r3, r0
 8008490:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008494:	bf14      	ite	ne
 8008496:	eeb0 3a62 	vmovne.f32	s6, s5
 800849a:	eeb0 3a63 	vmoveq.f32	s6, s7
 800849e:	1a9b      	subs	r3, r3, r2
 80084a0:	442c      	add	r4, r5
 80084a2:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 80084a4:	fb08 5e04 	mla	lr, r8, r4, r5
 80084a8:	eb0e 0408 	add.w	r4, lr, r8
 80084ac:	45a6      	cmp	lr, r4
 80084ae:	62bc      	str	r4, [r7, #40]	; 0x28
 80084b0:	f080 809d 	bcs.w	80085ee <ai_conv2d_stripe_f32.constprop.0+0x75a>
 80084b4:	0080      	lsls	r0, r0, #2
 80084b6:	6378      	str	r0, [r7, #52]	; 0x34
 80084b8:	e9d7 0428 	ldrd	r0, r4, [r7, #160]	; 0xa0
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	633b      	str	r3, [r7, #48]	; 0x30
 80084c0:	42a0      	cmp	r0, r4
 80084c2:	f022 0303 	bic.w	r3, r2, #3
 80084c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084c8:	f200 8091 	bhi.w	80085ee <ai_conv2d_stripe_f32.constprop.0+0x75a>
 80084cc:	1e58      	subs	r0, r3, #1
 80084ce:	0880      	lsrs	r0, r0, #2
 80084d0:	1c43      	adds	r3, r0, #1
 80084d2:	fb00 a00a 	mla	r0, r0, sl, sl
 80084d6:	6138      	str	r0, [r7, #16]
 80084d8:	f04f 0900 	mov.w	r9, #0
 80084dc:	0118      	lsls	r0, r3, #4
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	6178      	str	r0, [r7, #20]
 80084e2:	60fb      	str	r3, [r7, #12]
 80084e4:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
 80084e8:	f8c7 b008 	str.w	fp, [r7, #8]
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80084f0:	4499      	add	r9, r3
 80084f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084f4:	181c      	adds	r4, r3, r0
 80084f6:	65bc      	str	r4, [r7, #88]	; 0x58
 80084f8:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80084fa:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80084fe:	1820      	adds	r0, r4, r0
 8008500:	627b      	str	r3, [r7, #36]	; 0x24
 8008502:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8008506:	6438      	str	r0, [r7, #64]	; 0x40
 8008508:	63fb      	str	r3, [r7, #60]	; 0x3c
 800850a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800850c:	ecb3 7a01 	vldmia	r3!, {s14}
 8008510:	65bb      	str	r3, [r7, #88]	; 0x58
 8008512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008514:	2b00      	cmp	r3, #0
 8008516:	ee27 7a03 	vmul.f32	s14, s14, s6
 800851a:	dd57      	ble.n	80085cc <ai_conv2d_stripe_f32.constprop.0+0x738>
 800851c:	4675      	mov	r5, lr
 800851e:	f04f 0b00 	mov.w	fp, #0
 8008522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008524:	2b00      	cmp	r3, #0
 8008526:	bfd8      	it	le
 8008528:	2400      	movle	r4, #0
 800852a:	dd32      	ble.n	8008592 <ai_conv2d_stripe_f32.constprop.0+0x6fe>
 800852c:	6a38      	ldr	r0, [r7, #32]
 800852e:	607a      	str	r2, [r7, #4]
 8008530:	182c      	adds	r4, r5, r0
 8008532:	f101 0310 	add.w	r3, r1, #16
 8008536:	4628      	mov	r0, r5
 8008538:	2600      	movs	r6, #0
 800853a:	eb00 0c08 	add.w	ip, r0, r8
 800853e:	ed13 4a03 	vldr	s8, [r3, #-12]
 8008542:	eddc 7a00 	vldr	s15, [ip]
 8008546:	ed53 4a04 	vldr	s9, [r3, #-16]
 800854a:	ed90 5a00 	vldr	s10, [r0]
 800854e:	edd4 6a00 	vldr	s13, [r4]
 8008552:	ed53 5a02 	vldr	s11, [r3, #-8]
 8008556:	ed13 6a01 	vldr	s12, [r3, #-4]
 800855a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800855c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008560:	eb04 0c08 	add.w	ip, r4, r8
 8008564:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008568:	3604      	adds	r6, #4
 800856a:	4296      	cmp	r6, r2
 800856c:	f103 0310 	add.w	r3, r3, #16
 8008570:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8008574:	4450      	add	r0, sl
 8008576:	4454      	add	r4, sl
 8008578:	eddc 6a00 	vldr	s13, [ip]
 800857c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008580:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008584:	dbd9      	blt.n	800853a <ai_conv2d_stripe_f32.constprop.0+0x6a6>
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	68fc      	ldr	r4, [r7, #12]
 800858c:	441d      	add	r5, r3
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	4419      	add	r1, r3
 8008592:	42a2      	cmp	r2, r4
 8008594:	dd11      	ble.n	80085ba <ai_conv2d_stripe_f32.constprop.0+0x726>
 8008596:	4620      	mov	r0, r4
 8008598:	462b      	mov	r3, r5
 800859a:	460e      	mov	r6, r1
 800859c:	edd3 7a00 	vldr	s15, [r3]
 80085a0:	ecf6 6a01 	vldmia	r6!, {s13}
 80085a4:	3001      	adds	r0, #1
 80085a6:	4290      	cmp	r0, r2
 80085a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80085ac:	4443      	add	r3, r8
 80085ae:	d1f5      	bne.n	800859c <ai_conv2d_stripe_f32.constprop.0+0x708>
 80085b0:	1b14      	subs	r4, r2, r4
 80085b2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80085b6:	fb04 5508 	mla	r5, r4, r8, r5
 80085ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085bc:	441d      	add	r5, r3
 80085be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c0:	4419      	add	r1, r3
 80085c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085c4:	f10b 0b01 	add.w	fp, fp, #1
 80085c8:	459b      	cmp	fp, r3
 80085ca:	d1aa      	bne.n	8008522 <ai_conv2d_stripe_f32.constprop.0+0x68e>
 80085cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085ce:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80085d0:	eca3 7a01 	vstmia	r3!, {s14}
 80085d4:	643b      	str	r3, [r7, #64]	; 0x40
 80085d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d8:	4419      	add	r1, r3
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	4283      	cmp	r3, r0
 80085de:	d194      	bne.n	800850a <ai_conv2d_stripe_f32.constprop.0+0x676>
 80085e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e2:	f10e 0e04 	add.w	lr, lr, #4
 80085e6:	459e      	cmp	lr, r3
 80085e8:	d380      	bcc.n	80084ec <ai_conv2d_stripe_f32.constprop.0+0x658>
 80085ea:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80085ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80085f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80085f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085f4:	440a      	add	r2, r1
 80085f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80085f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80085fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80085fe:	440a      	add	r2, r1
 8008600:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8008604:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008608:	3301      	adds	r3, #1
 800860a:	429a      	cmp	r2, r3
 800860c:	653b      	str	r3, [r7, #80]	; 0x50
 800860e:	ebab 0b01 	sub.w	fp, fp, r1
 8008612:	f43f ad7b 	beq.w	800810c <ai_conv2d_stripe_f32.constprop.0+0x278>
 8008616:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800861a:	2b00      	cmp	r3, #0
 800861c:	f6bf af16 	bge.w	800844c <ai_conv2d_stripe_f32.constprop.0+0x5b8>
 8008620:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008622:	465b      	mov	r3, fp
 8008624:	eb02 010b 	add.w	r1, r2, fp
 8008628:	465d      	mov	r5, fp
 800862a:	e712      	b.n	8008452 <ai_conv2d_stripe_f32.constprop.0+0x5be>
 800862c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800862e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008630:	462b      	mov	r3, r5
 8008632:	442a      	add	r2, r5
 8008634:	e5dc      	b.n	80081f0 <ai_conv2d_stripe_f32.constprop.0+0x35c>
 8008636:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800863a:	fb02 f505 	mul.w	r5, r2, r5
 800863e:	fb06 f205 	mul.w	r2, r6, r5
 8008642:	0095      	lsls	r5, r2, #2
 8008644:	637a      	str	r2, [r7, #52]	; 0x34
 8008646:	1dea      	adds	r2, r5, #7
 8008648:	f022 0207 	bic.w	r2, r2, #7
 800864c:	4669      	mov	r1, sp
 800864e:	ebad 0d02 	sub.w	sp, sp, r2
 8008652:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008656:	ee08 1a90 	vmov	s17, r1
 800865a:	46e9      	mov	r9, sp
 800865c:	2a00      	cmp	r2, #0
 800865e:	f000 8130 	beq.w	80088c2 <ai_conv2d_stripe_f32.constprop.0+0xa2e>
 8008662:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008666:	ed9f 8aa6 	vldr	s16, [pc, #664]	; 8008900 <ai_conv2d_stripe_f32.constprop.0+0xa6c>
 800866a:	f8c7 60a0 	str.w	r6, [r7, #160]	; 0xa0
 800866e:	fb02 f303 	mul.w	r3, r2, r3
 8008672:	647b      	str	r3, [r7, #68]	; 0x44
 8008674:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008676:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008678:	fb03 f306 	mul.w	r3, r3, r6
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	623b      	str	r3, [r7, #32]
 8008680:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008684:	fb03 f306 	mul.w	r3, r3, r6
 8008688:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800868c:	627b      	str	r3, [r7, #36]	; 0x24
 800868e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008696:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008698:	64bb      	str	r3, [r7, #72]	; 0x48
 800869a:	2300      	movs	r3, #0
 800869c:	46ca      	mov	sl, r9
 800869e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086a0:	46a9      	mov	r9, r5
 80086a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a4:	b123      	cbz	r3, 80086b0 <ai_conv2d_stripe_f32.constprop.0+0x81c>
 80086a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80086a8:	464a      	mov	r2, r9
 80086aa:	4650      	mov	r0, sl
 80086ac:	f001 fed0 	bl	800a450 <memcpy>
 80086b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f000 8120 	beq.w	80088f8 <ai_conv2d_stripe_f32.constprop.0+0xa64>
 80086b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086ba:	ecf3 6a01 	vldmia	r3!, {s13}
 80086be:	64bb      	str	r3, [r7, #72]	; 0x48
 80086c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f000 80ee 	beq.w	80088a6 <ai_conv2d_stripe_f32.constprop.0+0xa12>
 80086ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80086ce:	f8c7 901c 	str.w	r9, [r7, #28]
 80086d2:	425d      	negs	r5, r3
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	653b      	str	r3, [r7, #80]	; 0x50
 80086d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086da:	643b      	str	r3, [r7, #64]	; 0x40
 80086dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80086e0:	657b      	str	r3, [r7, #84]	; 0x54
 80086e2:	2300      	movs	r3, #0
 80086e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f2c0 8100 	blt.w	80088ee <ai_conv2d_stripe_f32.constprop.0+0xa5a>
 80086ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086f2:	2300      	movs	r3, #0
 80086f4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80086f8:	f8d7 60b0 	ldr.w	r6, [r7, #176]	; 0xb0
 80086fc:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80086fe:	4428      	add	r0, r5
 8008700:	42b0      	cmp	r0, r6
 8008702:	bf94      	ite	ls
 8008704:	ebc3 0300 	rsbls	r3, r3, r0
 8008708:	ebc3 0306 	rsbhi	r3, r3, r6
 800870c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8008710:	eba0 0c03 	sub.w	ip, r0, r3
 8008714:	1af0      	subs	r0, r6, r3
 8008716:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 800871a:	fb06 f303 	mul.w	r3, r6, r3
 800871e:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 8008720:	2e00      	cmp	r6, #0
 8008722:	fb02 a204 	mla	r2, r2, r4, sl
 8008726:	eeb0 7a66 	vmov.f32	s14, s13
 800872a:	f340 80a2 	ble.w	8008872 <ai_conv2d_stripe_f32.constprop.0+0x9de>
 800872e:	fb04 f000 	mul.w	r0, r4, r0
 8008732:	f023 060f 	bic.w	r6, r3, #15
 8008736:	6338      	str	r0, [r7, #48]	; 0x30
 8008738:	1e70      	subs	r0, r6, #1
 800873a:	0900      	lsrs	r0, r0, #4
 800873c:	3001      	adds	r0, #1
 800873e:	ea4f 1880 	mov.w	r8, r0, lsl #6
 8008742:	0100      	lsls	r0, r0, #4
 8008744:	fb04 fc0c 	mul.w	ip, r4, ip
 8008748:	62b8      	str	r0, [r7, #40]	; 0x28
 800874a:	2400      	movs	r4, #0
 800874c:	2e00      	cmp	r6, #0
 800874e:	bfd8      	it	le
 8008750:	2000      	movle	r0, #0
 8008752:	dd72      	ble.n	800883a <ai_conv2d_stripe_f32.constprop.0+0x9a6>
 8008754:	f101 0e40 	add.w	lr, r1, #64	; 0x40
 8008758:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800875c:	f04f 0900 	mov.w	r9, #0
 8008760:	ed10 5a0f 	vldr	s10, [r0, #-60]	; 0xffffffc4
 8008764:	ed5e 7a0f 	vldr	s15, [lr, #-60]	; 0xffffffc4
 8008768:	ed5e 5a10 	vldr	s11, [lr, #-64]	; 0xffffffc0
 800876c:	ed10 6a10 	vldr	s12, [r0, #-64]	; 0xffffffc0
 8008770:	ed1e 4a0d 	vldr	s8, [lr, #-52]	; 0xffffffcc
 8008774:	ed5e 4a0c 	vldr	s9, [lr, #-48]	; 0xffffffd0
 8008778:	ed5e 2a0a 	vldr	s5, [lr, #-40]	; 0xffffffd8
 800877c:	ed10 3a0a 	vldr	s6, [r0, #-40]	; 0xffffffd8
 8008780:	ed5e 3a09 	vldr	s7, [lr, #-36]	; 0xffffffdc
 8008784:	ed5e 0a06 	vldr	s1, [lr, #-24]	; 0xffffffe8
 8008788:	ed10 1a06 	vldr	s2, [r0, #-24]	; 0xffffffe8
 800878c:	ed5e 1a05 	vldr	s3, [lr, #-20]	; 0xffffffec
 8008790:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
 8008794:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008798:	ed1e 5a0e 	vldr	s10, [lr, #-56]	; 0xffffffc8
 800879c:	eee5 7a86 	vfma.f32	s15, s11, s12
 80087a0:	f109 0910 	add.w	r9, r9, #16
 80087a4:	45b1      	cmp	r9, r6
 80087a6:	ed50 5a0e 	vldr	s11, [r0, #-56]	; 0xffffffc8
 80087aa:	ed10 6a0d 	vldr	s12, [r0, #-52]	; 0xffffffcc
 80087ae:	eee5 7a25 	vfma.f32	s15, s10, s11
 80087b2:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
 80087b6:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80087ba:	ed10 5a1c 	vldr	s10, [r0, #-112]	; 0xffffff90
 80087be:	ed5e 5a1b 	vldr	s11, [lr, #-108]	; 0xffffff94
 80087c2:	eee4 7a06 	vfma.f32	s15, s8, s12
 80087c6:	ed10 6a1b 	vldr	s12, [r0, #-108]	; 0xffffff94
 80087ca:	ed10 4a19 	vldr	s8, [r0, #-100]	; 0xffffff9c
 80087ce:	eee4 7a85 	vfma.f32	s15, s9, s10
 80087d2:	ed5e 4a18 	vldr	s9, [lr, #-96]	; 0xffffffa0
 80087d6:	ed10 5a18 	vldr	s10, [r0, #-96]	; 0xffffffa0
 80087da:	eee5 7a86 	vfma.f32	s15, s11, s12
 80087de:	ed5e 5a17 	vldr	s11, [lr, #-92]	; 0xffffffa4
 80087e2:	ed10 6a17 	vldr	s12, [r0, #-92]	; 0xffffffa4
 80087e6:	eee2 7a83 	vfma.f32	s15, s5, s6
 80087ea:	ed5e 2a14 	vldr	s5, [lr, #-80]	; 0xffffffb0
 80087ee:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 80087f2:	eee3 7a84 	vfma.f32	s15, s7, s8
 80087f6:	ed5e 3a13 	vldr	s7, [lr, #-76]	; 0xffffffb4
 80087fa:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 80087fe:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008802:	ed5e 4a12 	vldr	s9, [lr, #-72]	; 0xffffffb8
 8008806:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 800880a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800880e:	ed5e 5a11 	vldr	s11, [lr, #-68]	; 0xffffffbc
 8008812:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 8008816:	eee0 7a81 	vfma.f32	s15, s1, s2
 800881a:	eee1 7a82 	vfma.f32	s15, s3, s4
 800881e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008822:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008826:	eee4 7a85 	vfma.f32	s15, s9, s10
 800882a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800882e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008832:	db95      	blt.n	8008760 <ai_conv2d_stripe_f32.constprop.0+0x8cc>
 8008834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008836:	4441      	add	r1, r8
 8008838:	4442      	add	r2, r8
 800883a:	4283      	cmp	r3, r0
 800883c:	dd11      	ble.n	8008862 <ai_conv2d_stripe_f32.constprop.0+0x9ce>
 800883e:	4686      	mov	lr, r0
 8008840:	468b      	mov	fp, r1
 8008842:	4691      	mov	r9, r2
 8008844:	ecb9 6a01 	vldmia	r9!, {s12}
 8008848:	ecfb 7a01 	vldmia	fp!, {s15}
 800884c:	f10e 0e01 	add.w	lr, lr, #1
 8008850:	4573      	cmp	r3, lr
 8008852:	eea6 7a27 	vfma.f32	s14, s12, s15
 8008856:	d1f5      	bne.n	8008844 <ai_conv2d_stripe_f32.constprop.0+0x9b0>
 8008858:	1a18      	subs	r0, r3, r0
 800885a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800885e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8008862:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008864:	4402      	add	r2, r0
 8008866:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008868:	3401      	adds	r4, #1
 800886a:	42a0      	cmp	r0, r4
 800886c:	4461      	add	r1, ip
 800886e:	f47f af6d 	bne.w	800874c <ai_conv2d_stripe_f32.constprop.0+0x8b8>
 8008872:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008874:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8008876:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800887a:	ed82 7a00 	vstr	s14, [r2]
 800887e:	4401      	add	r1, r0
 8008880:	6579      	str	r1, [r7, #84]	; 0x54
 8008882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008884:	440a      	add	r2, r1
 8008886:	643a      	str	r2, [r7, #64]	; 0x40
 8008888:	6a39      	ldr	r1, [r7, #32]
 800888a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800888c:	440a      	add	r2, r1
 800888e:	653a      	str	r2, [r7, #80]	; 0x50
 8008890:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008894:	3301      	adds	r3, #1
 8008896:	429a      	cmp	r2, r3
 8008898:	63fb      	str	r3, [r7, #60]	; 0x3c
 800889a:	eba5 0500 	sub.w	r5, r5, r0
 800889e:	f47f af22 	bne.w	80086e6 <ai_conv2d_stripe_f32.constprop.0+0x852>
 80088a2:	f8d7 901c 	ldr.w	r9, [r7, #28]
 80088a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80088a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088aa:	444a      	add	r2, r9
 80088ac:	66ba      	str	r2, [r7, #104]	; 0x68
 80088ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80088b0:	3204      	adds	r2, #4
 80088b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80088b4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80088b8:	3301      	adds	r3, #1
 80088ba:	429a      	cmp	r2, r3
 80088bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088be:	f47f aef0 	bne.w	80086a2 <ai_conv2d_stripe_f32.constprop.0+0x80e>
 80088c2:	ee18 3a90 	vmov	r3, s17
 80088c6:	469d      	mov	sp, r3
 80088c8:	e420      	b.n	800810c <ai_conv2d_stripe_f32.constprop.0+0x278>
 80088ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088cc:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 80088ce:	647e      	str	r6, [r7, #68]	; 0x44
 80088d0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80088d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80088d8:	1a98      	subs	r0, r3, r2
 80088da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088de:	fb03 f000 	mul.w	r0, r3, r0
 80088e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80088e6:	eeb0 3a63 	vmov.f32	s6, s7
 80088ea:	1a9b      	subs	r3, r3, r2
 80088ec:	e5d8      	b.n	80084a0 <ai_conv2d_stripe_f32.constprop.0+0x60c>
 80088ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088f2:	462b      	mov	r3, r5
 80088f4:	442a      	add	r2, r5
 80088f6:	e6fd      	b.n	80086f4 <ai_conv2d_stripe_f32.constprop.0+0x860>
 80088f8:	eef0 6a48 	vmov.f32	s13, s16
 80088fc:	e6e0      	b.n	80086c0 <ai_conv2d_stripe_f32.constprop.0+0x82c>
 80088fe:	bf00      	nop
 8008900:	00000000 	.word	0x00000000

08008904 <ai_dict_decompress_f32>:
 8008904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008908:	9d08      	ldr	r5, [sp, #32]
 800890a:	2b04      	cmp	r3, #4
 800890c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8008910:	d00e      	beq.n	8008930 <ai_dict_decompress_f32+0x2c>
 8008912:	2b08      	cmp	r3, #8
 8008914:	d10a      	bne.n	800892c <ai_dict_decompress_f32+0x28>
 8008916:	42a8      	cmp	r0, r5
 8008918:	d208      	bcs.n	800892c <ai_dict_decompress_f32+0x28>
 800891a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800891e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f840 3b04 	str.w	r3, [r0], #4
 8008928:	4285      	cmp	r5, r0
 800892a:	d8f6      	bhi.n	800891a <ai_dict_decompress_f32+0x16>
 800892c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008930:	9b07      	ldr	r3, [sp, #28]
 8008932:	085e      	lsrs	r6, r3, #1
 8008934:	f003 0701 	and.w	r7, r3, #1
 8008938:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800893c:	f106 38ff 	add.w	r8, r6, #4294967295
 8008940:	42a8      	cmp	r0, r5
 8008942:	d2f3      	bcs.n	800892c <ai_dict_decompress_f32+0x28>
 8008944:	b33e      	cbz	r6, 8008996 <ai_dict_decompress_f32+0x92>
 8008946:	f100 0e08 	add.w	lr, r0, #8
 800894a:	f101 3cff 	add.w	ip, r1, #4294967295
 800894e:	eb01 0408 	add.w	r4, r1, r8
 8008952:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8008956:	091b      	lsrs	r3, r3, #4
 8008958:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800895c:	f10e 0e08 	add.w	lr, lr, #8
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f84e 3c10 	str.w	r3, [lr, #-16]
 8008966:	f89c 3000 	ldrb.w	r3, [ip]
 800896a:	f003 030f 	and.w	r3, r3, #15
 800896e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008972:	4564      	cmp	r4, ip
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800897a:	d1ea      	bne.n	8008952 <ai_dict_decompress_f32+0x4e>
 800897c:	4431      	add	r1, r6
 800897e:	4448      	add	r0, r9
 8008980:	2f00      	cmp	r7, #0
 8008982:	d0dd      	beq.n	8008940 <ai_dict_decompress_f32+0x3c>
 8008984:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008988:	091b      	lsrs	r3, r3, #4
 800898a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f840 3b04 	str.w	r3, [r0], #4
 8008994:	e7d4      	b.n	8008940 <ai_dict_decompress_f32+0x3c>
 8008996:	2f00      	cmp	r7, #0
 8008998:	d1f4      	bne.n	8008984 <ai_dict_decompress_f32+0x80>
 800899a:	42a8      	cmp	r0, r5
 800899c:	d3fd      	bcc.n	800899a <ai_dict_decompress_f32+0x96>
 800899e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089a2:	bf00      	nop

080089a4 <forward_conv2d>:
 80089a4:	6982      	ldr	r2, [r0, #24]
 80089a6:	8813      	ldrh	r3, [r2, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f000 8110 	beq.w	8008bce <forward_conv2d+0x22a>
 80089ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b2:	ed2d 8b04 	vpush	{d8-d9}
 80089b6:	6852      	ldr	r2, [r2, #4]
 80089b8:	6851      	ldr	r1, [r2, #4]
 80089ba:	b0a9      	sub	sp, #164	; 0xa4
 80089bc:	4604      	mov	r4, r0
 80089be:	b101      	cbz	r1, 80089c2 <forward_conv2d+0x1e>
 80089c0:	6809      	ldr	r1, [r1, #0]
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	f000 8151 	beq.w	8008c6a <forward_conv2d+0x2c6>
 80089c8:	6915      	ldr	r5, [r2, #16]
 80089ca:	b105      	cbz	r5, 80089ce <forward_conv2d+0x2a>
 80089cc:	682d      	ldr	r5, [r5, #0]
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	f000 80ff 	beq.w	8008bd2 <forward_conv2d+0x22e>
 80089d4:	69d3      	ldr	r3, [r2, #28]
 80089d6:	8b12      	ldrh	r2, [r2, #24]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 8137 	beq.w	8008c4c <forward_conv2d+0x2a8>
 80089de:	2a01      	cmp	r2, #1
 80089e0:	681e      	ldr	r6, [r3, #0]
 80089e2:	f240 8139 	bls.w	8008c58 <forward_conv2d+0x2b4>
 80089e6:	685a      	ldr	r2, [r3, #4]
 80089e8:	ee08 2a10 	vmov	s16, r2
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	68ca      	ldr	r2, [r1, #12]
 80089f0:	6989      	ldr	r1, [r1, #24]
 80089f2:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 80089f6:	6889      	ldr	r1, [r1, #8]
 80089f8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80089fa:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 80089fe:	69b7      	ldr	r7, [r6, #24]
 8008a00:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8008a04:	f8dc b008 	ldr.w	fp, [ip, #8]
 8008a08:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
 8008a0c:	ee09 1a10 	vmov	s18, r1
 8008a10:	6851      	ldr	r1, [r2, #4]
 8008a12:	911b      	str	r1, [sp, #108]	; 0x6c
 8008a14:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8008a18:	9118      	str	r1, [sp, #96]	; 0x60
 8008a1a:	68d1      	ldr	r1, [r2, #12]
 8008a1c:	6892      	ldr	r2, [r2, #8]
 8008a1e:	9223      	str	r2, [sp, #140]	; 0x8c
 8008a20:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008a22:	9224      	str	r2, [sp, #144]	; 0x90
 8008a24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008a26:	9217      	str	r2, [sp, #92]	; 0x5c
 8008a28:	6802      	ldr	r2, [r0, #0]
 8008a2a:	9211      	str	r2, [sp, #68]	; 0x44
 8008a2c:	6842      	ldr	r2, [r0, #4]
 8008a2e:	921e      	str	r2, [sp, #120]	; 0x78
 8008a30:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008a32:	9210      	str	r2, [sp, #64]	; 0x40
 8008a34:	f8de 2008 	ldr.w	r2, [lr, #8]
 8008a38:	9219      	str	r2, [sp, #100]	; 0x64
 8008a3a:	f8de 2004 	ldr.w	r2, [lr, #4]
 8008a3e:	9122      	str	r1, [sp, #136]	; 0x88
 8008a40:	921a      	str	r2, [sp, #104]	; 0x68
 8008a42:	69e2      	ldr	r2, [r4, #28]
 8008a44:	9225      	str	r2, [sp, #148]	; 0x94
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	ee08 2a90 	vmov	s17, r2
 8008a4c:	ee18 2a10 	vmov	r2, s16
 8008a50:	b11a      	cbz	r2, 8008a5a <forward_conv2d+0xb6>
 8008a52:	6992      	ldr	r2, [r2, #24]
 8008a54:	6892      	ldr	r2, [r2, #8]
 8008a56:	ee08 2a10 	vmov	s16, r2
 8008a5a:	69aa      	ldr	r2, [r5, #24]
 8008a5c:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8008a60:	6892      	ldr	r2, [r2, #8]
 8008a62:	9216      	str	r2, [sp, #88]	; 0x58
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f000 80de 	beq.w	8008c26 <forward_conv2d+0x282>
 8008a6a:	699a      	ldr	r2, [r3, #24]
 8008a6c:	2a00      	cmp	r2, #0
 8008a6e:	f000 80e3 	beq.w	8008c38 <forward_conv2d+0x294>
 8008a72:	695b      	ldr	r3, [r3, #20]
 8008a74:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	9327      	str	r3, [sp, #156]	; 0x9c
 8008a7c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8008a80:	f001 fc82 	bl	800a388 <ai_array_get_byte_size>
 8008a84:	69b7      	ldr	r7, [r6, #24]
 8008a86:	9013      	str	r0, [sp, #76]	; 0x4c
 8008a88:	4a7b      	ldr	r2, [pc, #492]	; (8008c78 <forward_conv2d+0x2d4>)
 8008a8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008a8c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	2900      	cmp	r1, #0
 8008a92:	bf08      	it	eq
 8008a94:	4611      	moveq	r1, r2
 8008a96:	9112      	str	r1, [sp, #72]	; 0x48
 8008a98:	fa1f f18a 	uxth.w	r1, sl
 8008a9c:	1e70      	subs	r0, r6, #1
 8008a9e:	3901      	subs	r1, #1
 8008aa0:	fb00 6101 	mla	r1, r0, r1, r6
 8008aa4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8008aa8:	981a      	ldr	r0, [sp, #104]	; 0x68
 8008aaa:	911c      	str	r1, [sp, #112]	; 0x70
 8008aac:	3a01      	subs	r2, #1
 8008aae:	1e41      	subs	r1, r0, #1
 8008ab0:	fb01 0202 	mla	r2, r1, r2, r0
 8008ab4:	921d      	str	r2, [sp, #116]	; 0x74
 8008ab6:	f3c3 4243 	ubfx	r2, r3, #17, #4
 8008aba:	2a04      	cmp	r2, #4
 8008abc:	f000 808c 	beq.w	8008bd8 <forward_conv2d+0x234>
 8008ac0:	2a08      	cmp	r2, #8
 8008ac2:	f000 8089 	beq.w	8008bd8 <forward_conv2d+0x234>
 8008ac6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8008aca:	9315      	str	r3, [sp, #84]	; 0x54
 8008acc:	425b      	negs	r3, r3
 8008ace:	9314      	str	r3, [sp, #80]	; 0x50
 8008ad0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d076      	beq.n	8008bc4 <forward_conv2d+0x220>
 8008ad6:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 8008ada:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8008ade:	921e      	str	r2, [sp, #120]	; 0x78
 8008ae0:	425b      	negs	r3, r3
 8008ae2:	fa0f f28a 	sxth.w	r2, sl
 8008ae6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008aea:	9321      	str	r3, [sp, #132]	; 0x84
 8008aec:	fb0b f30a 	mul.w	r3, fp, sl
 8008af0:	921f      	str	r2, [sp, #124]	; 0x7c
 8008af2:	9326      	str	r3, [sp, #152]	; 0x98
 8008af4:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8008af8:	9220      	str	r2, [sp, #128]	; 0x80
 8008afa:	2300      	movs	r3, #0
 8008afc:	4644      	mov	r4, r8
 8008afe:	9317      	str	r3, [sp, #92]	; 0x5c
 8008b00:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008b02:	920e      	str	r2, [sp, #56]	; 0x38
 8008b04:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008b06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b08:	920d      	str	r2, [sp, #52]	; 0x34
 8008b0a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008b0c:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008b14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b16:	930a      	str	r3, [sp, #40]	; 0x28
 8008b18:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008b1a:	9307      	str	r3, [sp, #28]
 8008b1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008b1e:	9306      	str	r3, [sp, #24]
 8008b20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b22:	9305      	str	r3, [sp, #20]
 8008b24:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008b26:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b28:	e9cd b303 	strd	fp, r3, [sp, #12]
 8008b2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b2e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008b32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b38:	4413      	add	r3, r2
 8008b3a:	bfa8      	it	ge
 8008b3c:	2200      	movge	r2, #0
 8008b3e:	9208      	str	r2, [sp, #32]
 8008b40:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008b42:	4293      	cmp	r3, r2
 8008b44:	bf28      	it	cs
 8008b46:	4613      	movcs	r3, r2
 8008b48:	9309      	str	r3, [sp, #36]	; 0x24
 8008b4a:	ee18 2a90 	vmov	r2, s17
 8008b4e:	ee18 3a10 	vmov	r3, s16
 8008b52:	ee19 1a10 	vmov	r1, s18
 8008b56:	4638      	mov	r0, r7
 8008b58:	f7ff f99c 	bl	8007e94 <ai_conv2d_stripe_f32.constprop.0>
 8008b5c:	f1bb 0f00 	cmp.w	fp, #0
 8008b60:	d020      	beq.n	8008ba4 <forward_conv2d+0x200>
 8008b62:	2600      	movs	r6, #0
 8008b64:	464a      	mov	r2, r9
 8008b66:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 8008b6a:	9610      	str	r6, [sp, #64]	; 0x40
 8008b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b6e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8008b70:	9211      	str	r2, [sp, #68]	; 0x44
 8008b72:	3301      	adds	r3, #1
 8008b74:	9310      	str	r3, [sp, #64]	; 0x40
 8008b76:	69ab      	ldr	r3, [r5, #24]
 8008b78:	4629      	mov	r1, r5
 8008b7a:	609f      	str	r7, [r3, #8]
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	4623      	mov	r3, r4
 8008b80:	47b0      	blx	r6
 8008b82:	444c      	add	r4, r9
 8008b84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b86:	eba4 0308 	sub.w	r3, r4, r8
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	bfa8      	it	ge
 8008b8e:	4644      	movge	r4, r8
 8008b90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b92:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008b94:	459b      	cmp	fp, r3
 8008b96:	4457      	add	r7, sl
 8008b98:	d1e8      	bne.n	8008b6c <forward_conv2d+0x1c8>
 8008b9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008b9c:	4691      	mov	r9, r2
 8008b9e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008ba0:	4413      	add	r3, r2
 8008ba2:	9316      	str	r3, [sp, #88]	; 0x58
 8008ba4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008ba6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ba8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8008baa:	4413      	add	r3, r2
 8008bac:	9314      	str	r3, [sp, #80]	; 0x50
 8008bae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bb0:	1a9b      	subs	r3, r3, r2
 8008bb2:	9315      	str	r3, [sp, #84]	; 0x54
 8008bb4:	69ab      	ldr	r3, [r5, #24]
 8008bb6:	68da      	ldr	r2, [r3, #12]
 8008bb8:	609a      	str	r2, [r3, #8]
 8008bba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008bbc:	3101      	adds	r1, #1
 8008bbe:	428b      	cmp	r3, r1
 8008bc0:	9117      	str	r1, [sp, #92]	; 0x5c
 8008bc2:	d19d      	bne.n	8008b00 <forward_conv2d+0x15c>
 8008bc4:	b029      	add	sp, #164	; 0xa4
 8008bc6:	ecbd 8b04 	vpop	{d8-d9}
 8008bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	deff      	udf	#255	; 0xff
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	deff      	udf	#255	; 0xff
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	2a00      	cmp	r2, #0
 8008bdc:	f43f af73 	beq.w	8008ac6 <forward_conv2d+0x122>
 8008be0:	69a1      	ldr	r1, [r4, #24]
 8008be2:	8808      	ldrh	r0, [r1, #0]
 8008be4:	2803      	cmp	r0, #3
 8008be6:	d943      	bls.n	8008c70 <forward_conv2d+0x2cc>
 8008be8:	6849      	ldr	r1, [r1, #4]
 8008bea:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8008bec:	2900      	cmp	r1, #0
 8008bee:	d037      	beq.n	8008c60 <forward_conv2d+0x2bc>
 8008bf0:	6809      	ldr	r1, [r1, #0]
 8008bf2:	2900      	cmp	r1, #0
 8008bf4:	d034      	beq.n	8008c60 <forward_conv2d+0x2bc>
 8008bf6:	698c      	ldr	r4, [r1, #24]
 8008bf8:	68b9      	ldr	r1, [r7, #8]
 8008bfa:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8008bfe:	9401      	str	r4, [sp, #4]
 8008c00:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8008c02:	9400      	str	r4, [sp, #0]
 8008c04:	ee18 4a90 	vmov	r4, s17
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	bf18      	it	ne
 8008c0c:	4604      	movne	r4, r0
 8008c0e:	ee08 4a90 	vmov	s17, r4
 8008c12:	f3c3 14c6 	ubfx	r4, r3, #7, #7
 8008c16:	f3c3 5341 	ubfx	r3, r3, #21, #2
 8008c1a:	fa44 f303 	asr.w	r3, r4, r3
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	f7ff fe70 	bl	8008904 <ai_dict_decompress_f32>
 8008c24:	e74f      	b.n	8008ac6 <forward_conv2d+0x122>
 8008c26:	f1b8 0f00 	cmp.w	r8, #0
 8008c2a:	d00b      	beq.n	8008c44 <forward_conv2d+0x2a0>
 8008c2c:	9327      	str	r3, [sp, #156]	; 0x9c
 8008c2e:	2301      	movs	r3, #1
 8008c30:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8008c34:	9313      	str	r3, [sp, #76]	; 0x4c
 8008c36:	e727      	b.n	8008a88 <forward_conv2d+0xe4>
 8008c38:	f1b8 0f00 	cmp.w	r8, #0
 8008c3c:	d001      	beq.n	8008c42 <forward_conv2d+0x29e>
 8008c3e:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8008c42:	2300      	movs	r3, #0
 8008c44:	9327      	str	r3, [sp, #156]	; 0x9c
 8008c46:	2301      	movs	r3, #1
 8008c48:	9313      	str	r3, [sp, #76]	; 0x4c
 8008c4a:	e71d      	b.n	8008a88 <forward_conv2d+0xe4>
 8008c4c:	2a01      	cmp	r2, #1
 8008c4e:	d90a      	bls.n	8008c66 <forward_conv2d+0x2c2>
 8008c50:	ee08 3a10 	vmov	s16, r3
 8008c54:	461e      	mov	r6, r3
 8008c56:	e6ca      	b.n	80089ee <forward_conv2d+0x4a>
 8008c58:	2200      	movs	r2, #0
 8008c5a:	ee08 2a10 	vmov	s16, r2
 8008c5e:	e6c5      	b.n	80089ec <forward_conv2d+0x48>
 8008c60:	2300      	movs	r3, #0
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	deff      	udf	#255	; 0xff
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	deff      	udf	#255	; 0xff
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	deff      	udf	#255	; 0xff
 8008c70:	2300      	movs	r3, #0
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	deff      	udf	#255	; 0xff
 8008c76:	bf00      	nop
 8008c78:	08007e91 	.word	0x08007e91

08008c7c <forward_conv2d_nl_pool>:
 8008c7c:	6981      	ldr	r1, [r0, #24]
 8008c7e:	880b      	ldrh	r3, [r1, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f000 814d 	beq.w	8008f20 <forward_conv2d_nl_pool+0x2a4>
 8008c86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c8a:	ed2d 8b04 	vpush	{d8-d9}
 8008c8e:	684e      	ldr	r6, [r1, #4]
 8008c90:	6872      	ldr	r2, [r6, #4]
 8008c92:	b0b9      	sub	sp, #228	; 0xe4
 8008c94:	4604      	mov	r4, r0
 8008c96:	b102      	cbz	r2, 8008c9a <forward_conv2d_nl_pool+0x1e>
 8008c98:	6812      	ldr	r2, [r2, #0]
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	f000 8253 	beq.w	8009146 <forward_conv2d_nl_pool+0x4ca>
 8008ca0:	6930      	ldr	r0, [r6, #16]
 8008ca2:	9011      	str	r0, [sp, #68]	; 0x44
 8008ca4:	b108      	cbz	r0, 8008caa <forward_conv2d_nl_pool+0x2e>
 8008ca6:	6800      	ldr	r0, [r0, #0]
 8008ca8:	9011      	str	r0, [sp, #68]	; 0x44
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	f000 813a 	beq.w	8008f24 <forward_conv2d_nl_pool+0x2a8>
 8008cb0:	69f0      	ldr	r0, [r6, #28]
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	f000 8237 	beq.w	8009126 <forward_conv2d_nl_pool+0x4aa>
 8008cb8:	8b37      	ldrh	r7, [r6, #24]
 8008cba:	6806      	ldr	r6, [r0, #0]
 8008cbc:	2f01      	cmp	r7, #1
 8008cbe:	f240 8239 	bls.w	8009134 <forward_conv2d_nl_pool+0x4b8>
 8008cc2:	6845      	ldr	r5, [r0, #4]
 8008cc4:	ee08 5a10 	vmov	s16, r5
 8008cc8:	6880      	ldr	r0, [r0, #8]
 8008cca:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8008cce:	6992      	ldr	r2, [r2, #24]
 8008cd0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008cd4:	6892      	ldr	r2, [r2, #8]
 8008cd6:	952a      	str	r5, [sp, #168]	; 0xa8
 8008cd8:	ee09 2a10 	vmov	s18, r2
 8008cdc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008cde:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 8008ce0:	f8d2 900c 	ldr.w	r9, [r2, #12]
 8008ce4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008ce6:	f8d9 500c 	ldr.w	r5, [r9, #12]
 8008cea:	951d      	str	r5, [sp, #116]	; 0x74
 8008cec:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8008cf0:	951f      	str	r5, [sp, #124]	; 0x7c
 8008cf2:	f8d8 500c 	ldr.w	r5, [r8, #12]
 8008cf6:	9527      	str	r5, [sp, #156]	; 0x9c
 8008cf8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8008cfc:	952d      	str	r5, [sp, #180]	; 0xb4
 8008cfe:	8d25      	ldrh	r5, [r4, #40]	; 0x28
 8008d00:	952e      	str	r5, [sp, #184]	; 0xb8
 8008d02:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8008d04:	9513      	str	r5, [sp, #76]	; 0x4c
 8008d06:	683d      	ldr	r5, [r7, #0]
 8008d08:	9515      	str	r5, [sp, #84]	; 0x54
 8008d0a:	69e5      	ldr	r5, [r4, #28]
 8008d0c:	952f      	str	r5, [sp, #188]	; 0xbc
 8008d0e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8008d10:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 8008d14:	f8d6 c018 	ldr.w	ip, [r6, #24]
 8008d18:	f8d9 b004 	ldr.w	fp, [r9, #4]
 8008d1c:	9526      	str	r5, [sp, #152]	; 0x98
 8008d1e:	e9d7 a701 	ldrd	sl, r7, [r7, #4]
 8008d22:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8008d24:	9512      	str	r5, [sp, #72]	; 0x48
 8008d26:	e9d2 8200 	ldrd	r8, r2, [r2]
 8008d2a:	f8de 5004 	ldr.w	r5, [lr, #4]
 8008d2e:	9528      	str	r5, [sp, #160]	; 0xa0
 8008d30:	9224      	str	r2, [sp, #144]	; 0x90
 8008d32:	f8de 5008 	ldr.w	r5, [lr, #8]
 8008d36:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8008d3a:	9529      	str	r5, [sp, #164]	; 0xa4
 8008d3c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8008d3e:	9522      	str	r5, [sp, #136]	; 0x88
 8008d40:	ee08 2a90 	vmov	s17, r2
 8008d44:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8008d46:	9523      	str	r5, [sp, #140]	; 0x8c
 8008d48:	ee18 2a10 	vmov	r2, s16
 8008d4c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008d4e:	951a      	str	r5, [sp, #104]	; 0x68
 8008d50:	b11a      	cbz	r2, 8008d5a <forward_conv2d_nl_pool+0xde>
 8008d52:	6992      	ldr	r2, [r2, #24]
 8008d54:	6892      	ldr	r2, [r2, #8]
 8008d56:	ee08 2a10 	vmov	s16, r2
 8008d5a:	f8d4 9020 	ldr.w	r9, [r4, #32]
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	f000 81ce 	beq.w	8009100 <forward_conv2d_nl_pool+0x484>
 8008d64:	6982      	ldr	r2, [r0, #24]
 8008d66:	2a00      	cmp	r2, #0
 8008d68:	f000 81d3 	beq.w	8009112 <forward_conv2d_nl_pool+0x496>
 8008d6c:	6943      	ldr	r3, [r0, #20]
 8008d6e:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	9333      	str	r3, [sp, #204]	; 0xcc
 8008d76:	e9d2 0100 	ldrd	r0, r1, [r2]
 8008d7a:	f001 fb05 	bl	800a388 <ai_array_get_byte_size>
 8008d7e:	69a1      	ldr	r1, [r4, #24]
 8008d80:	f8d6 c018 	ldr.w	ip, [r6, #24]
 8008d84:	880b      	ldrh	r3, [r1, #0]
 8008d86:	9014      	str	r0, [sp, #80]	; 0x50
 8008d88:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8008d8c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8008d8e:	9215      	str	r2, [sp, #84]	; 0x54
 8008d90:	fa12 f287 	uxtah	r2, r2, r7
 8008d94:	eb02 0e00 	add.w	lr, r2, r0
 8008d98:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8008d9c:	4fa2      	ldr	r7, [pc, #648]	; (8009028 <forward_conv2d_nl_pool+0x3ac>)
 8008d9e:	921b      	str	r2, [sp, #108]	; 0x6c
 8008da0:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 8008da4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8008da6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008da8:	3e01      	subs	r6, #1
 8008daa:	2d00      	cmp	r5, #0
 8008dac:	bf08      	it	eq
 8008dae:	463d      	moveq	r5, r7
 8008db0:	1e57      	subs	r7, r2, #1
 8008db2:	fb07 2606 	mla	r6, r7, r6, r2
 8008db6:	ebae 0206 	sub.w	r2, lr, r6
 8008dba:	9532      	str	r5, [sp, #200]	; 0xc8
 8008dbc:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008dbe:	fbb2 f2f5 	udiv	r2, r2, r5
 8008dc2:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8008dc4:	9213      	str	r2, [sp, #76]	; 0x4c
 8008dc6:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 8008dca:	962b      	str	r6, [sp, #172]	; 0xac
 8008dcc:	fa1f f08a 	uxth.w	r0, sl
 8008dd0:	1e6e      	subs	r6, r5, #1
 8008dd2:	9017      	str	r0, [sp, #92]	; 0x5c
 8008dd4:	3a01      	subs	r2, #1
 8008dd6:	f8dc 0000 	ldr.w	r0, [ip]
 8008dda:	fb06 5202 	mla	r2, r6, r2, r5
 8008dde:	922c      	str	r2, [sp, #176]	; 0xb0
 8008de0:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8008de2:	9520      	str	r5, [sp, #128]	; 0x80
 8008de4:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8008de8:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8008dea:	9519      	str	r5, [sp, #100]	; 0x64
 8008dec:	2a04      	cmp	r2, #4
 8008dee:	f000 814c 	beq.w	800908a <forward_conv2d_nl_pool+0x40e>
 8008df2:	2a08      	cmp	r2, #8
 8008df4:	f000 8149 	beq.w	800908a <forward_conv2d_nl_pool+0x40e>
 8008df8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008dfa:	2b03      	cmp	r3, #3
 8008dfc:	6992      	ldr	r2, [r2, #24]
 8008dfe:	921c      	str	r2, [sp, #112]	; 0x70
 8008e00:	fa0f f888 	sxth.w	r8, r8
 8008e04:	f240 81a4 	bls.w	8009150 <forward_conv2d_nl_pool+0x4d4>
 8008e08:	684b      	ldr	r3, [r1, #4]
 8008e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 81a2 	beq.w	8009156 <forward_conv2d_nl_pool+0x4da>
 8008e12:	681e      	ldr	r6, [r3, #0]
 8008e14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e16:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008e18:	425b      	negs	r3, r3
 8008e1a:	9316      	str	r3, [sp, #88]	; 0x58
 8008e1c:	68f3      	ldr	r3, [r6, #12]
 8008e1e:	f8d3 a008 	ldr.w	sl, [r3, #8]
 8008e22:	69b3      	ldr	r3, [r6, #24]
 8008e24:	689c      	ldr	r4, [r3, #8]
 8008e26:	2a00      	cmp	r2, #0
 8008e28:	d070      	beq.n	8008f0c <forward_conv2d_nl_pool+0x290>
 8008e2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e2c:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 8008e30:	425b      	negs	r3, r3
 8008e32:	9330      	str	r3, [sp, #192]	; 0xc0
 8008e34:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 8008e38:	9331      	str	r3, [sp, #196]	; 0xc4
 8008e3a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008e3c:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8008e40:	fb03 f30b 	mul.w	r3, r3, fp
 8008e44:	fb0a f303 	mul.w	r3, sl, r3
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	9335      	str	r3, [sp, #212]	; 0xd4
 8008e4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008e4e:	fb03 f30b 	mul.w	r3, r3, fp
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	fb0a f20b 	mul.w	r2, sl, fp
 8008e58:	9325      	str	r3, [sp, #148]	; 0x94
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e5e:	9236      	str	r2, [sp, #216]	; 0xd8
 8008e60:	931e      	str	r3, [sp, #120]	; 0x78
 8008e62:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8008e66:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8008e6a:	9234      	str	r2, [sp, #208]	; 0xd0
 8008e6c:	9337      	str	r3, [sp, #220]	; 0xdc
 8008e6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e70:	3301      	adds	r3, #1
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	dc6b      	bgt.n	8008f4e <forward_conv2d_nl_pool+0x2d2>
 8008e76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f2c0 80d7 	blt.w	800902c <forward_conv2d_nl_pool+0x3b0>
 8008e7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e80:	4598      	cmp	r8, r3
 8008e82:	d352      	bcc.n	8008f2a <forward_conv2d_nl_pool+0x2ae>
 8008e84:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8008e86:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008e88:	69b0      	ldr	r0, [r6, #24]
 8008e8a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8008e8c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8008e8e:	440a      	add	r2, r1
 8008e90:	9216      	str	r2, [sp, #88]	; 0x58
 8008e92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e94:	3a01      	subs	r2, #1
 8008e96:	9213      	str	r2, [sp, #76]	; 0x4c
 8008e98:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e9a:	1a52      	subs	r2, r2, r1
 8008e9c:	9215      	str	r2, [sp, #84]	; 0x54
 8008e9e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008ea0:	9208      	str	r2, [sp, #32]
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008ea6:	9201      	str	r2, [sp, #4]
 8008ea8:	1ad2      	subs	r2, r2, r3
 8008eaa:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8008eae:	9305      	str	r3, [sp, #20]
 8008eb0:	eba8 0803 	sub.w	r8, r8, r3
 8008eb4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8008eb8:	9303      	str	r3, [sp, #12]
 8008eba:	2301      	movs	r3, #1
 8008ebc:	9307      	str	r3, [sp, #28]
 8008ebe:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8008ec2:	9306      	str	r3, [sp, #24]
 8008ec4:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8008ec8:	9304      	str	r3, [sp, #16]
 8008eca:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8008ece:	9302      	str	r3, [sp, #8]
 8008ed0:	3701      	adds	r7, #1
 8008ed2:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	b292      	uxth	r2, r2
 8008eda:	fa1f f38b 	uxth.w	r3, fp
 8008ede:	fa1f f18a 	uxth.w	r1, sl
 8008ee2:	9717      	str	r7, [sp, #92]	; 0x5c
 8008ee4:	47a8      	blx	r5
 8008ee6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008ee8:	9925      	ldr	r1, [sp, #148]	; 0x94
 8008eea:	6893      	ldr	r3, [r2, #8]
 8008eec:	440b      	add	r3, r1
 8008eee:	6093      	str	r3, [r2, #8]
 8008ef0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008ef2:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 8008ef6:	1ad3      	subs	r3, r2, r3
 8008ef8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008efc:	b21b      	sxth	r3, r3
 8008efe:	9318      	str	r3, [sp, #96]	; 0x60
 8008f00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f02:	42bb      	cmp	r3, r7
 8008f04:	fa0f f888 	sxth.w	r8, r8
 8008f08:	d8b1      	bhi.n	8008e6e <forward_conv2d_nl_pool+0x1f2>
 8008f0a:	69b3      	ldr	r3, [r6, #24]
 8008f0c:	68da      	ldr	r2, [r3, #12]
 8008f0e:	609a      	str	r2, [r3, #8]
 8008f10:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008f12:	68d3      	ldr	r3, [r2, #12]
 8008f14:	6093      	str	r3, [r2, #8]
 8008f16:	b039      	add	sp, #228	; 0xe4
 8008f18:	ecbd 8b04 	vpop	{d8-d9}
 8008f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	deff      	udf	#255	; 0xff
 8008f24:	2300      	movs	r3, #0
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	deff      	udf	#255	; 0xff
 8008f2a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008f2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008f2e:	4413      	add	r3, r2
 8008f30:	9316      	str	r3, [sp, #88]	; 0x58
 8008f32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f34:	3b01      	subs	r3, #1
 8008f36:	9313      	str	r3, [sp, #76]	; 0x4c
 8008f38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f3a:	1a9b      	subs	r3, r3, r2
 8008f3c:	9315      	str	r3, [sp, #84]	; 0x54
 8008f3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008f40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d9e1      	bls.n	8008f0a <forward_conv2d_nl_pool+0x28e>
 8008f46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f48:	3301      	adds	r3, #1
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	dd93      	ble.n	8008e76 <forward_conv2d_nl_pool+0x1fa>
 8008f4e:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8008f50:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008f52:	920e      	str	r2, [sp, #56]	; 0x38
 8008f54:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008f5c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8008f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f60:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8008f62:	9307      	str	r3, [sp, #28]
 8008f64:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8008f66:	9306      	str	r3, [sp, #24]
 8008f68:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008f6a:	9305      	str	r3, [sp, #20]
 8008f6c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008f6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008f70:	e9cd a303 	strd	sl, r3, [sp, #12]
 8008f74:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008f76:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008f7a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008f80:	4413      	add	r3, r2
 8008f82:	bfa8      	it	ge
 8008f84:	2200      	movge	r2, #0
 8008f86:	9208      	str	r2, [sp, #32]
 8008f88:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	bf28      	it	cs
 8008f8e:	4613      	movcs	r3, r2
 8008f90:	9309      	str	r3, [sp, #36]	; 0x24
 8008f92:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	; 0x98
 8008f96:	930d      	str	r3, [sp, #52]	; 0x34
 8008f98:	ee18 2a90 	vmov	r2, s17
 8008f9c:	ee18 3a10 	vmov	r3, s16
 8008fa0:	ee19 1a10 	vmov	r1, s18
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	f7fe ff75 	bl	8007e94 <ai_conv2d_stripe_f32.constprop.0>
 8008faa:	69b2      	ldr	r2, [r6, #24]
 8008fac:	f1ba 0f00 	cmp.w	sl, #0
 8008fb0:	f000 80a4 	beq.w	80090fc <forward_conv2d_nl_pool+0x480>
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	465a      	mov	r2, fp
 8008fba:	4656      	mov	r6, sl
 8008fbc:	e9dd ba33 	ldrd	fp, sl, [sp, #204]	; 0xcc
 8008fc0:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
 8008fc4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008fc6:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 8008fca:	2700      	movs	r7, #0
 8008fcc:	608c      	str	r4, [r1, #8]
 8008fce:	462b      	mov	r3, r5
 8008fd0:	4601      	mov	r1, r0
 8008fd2:	9212      	str	r2, [sp, #72]	; 0x48
 8008fd4:	9011      	str	r0, [sp, #68]	; 0x44
 8008fd6:	47c0      	blx	r8
 8008fd8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008fda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008fdc:	6981      	ldr	r1, [r0, #24]
 8008fde:	445d      	add	r5, fp
 8008fe0:	eba5 0309 	sub.w	r3, r5, r9
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	bfa8      	it	ge
 8008fe8:	464d      	movge	r5, r9
 8008fea:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8008fee:	684b      	ldr	r3, [r1, #4]
 8008ff0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ff2:	4454      	add	r4, sl
 8008ff4:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8008ff8:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8008ffc:	429c      	cmp	r4, r3
 8008ffe:	f107 0701 	add.w	r7, r7, #1
 8009002:	bf28      	it	cs
 8009004:	eba4 040e 	subcs.w	r4, r4, lr
 8009008:	42be      	cmp	r6, r7
 800900a:	d1df      	bne.n	8008fcc <forward_conv2d_nl_pool+0x350>
 800900c:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8009010:	9511      	str	r5, [sp, #68]	; 0x44
 8009012:	4693      	mov	fp, r2
 8009014:	46b2      	mov	sl, r6
 8009016:	460a      	mov	r2, r1
 8009018:	4606      	mov	r6, r0
 800901a:	4661      	mov	r1, ip
 800901c:	f108 0801 	add.w	r8, r8, #1
 8009020:	6091      	str	r1, [r2, #8]
 8009022:	fa0f f888 	sxth.w	r8, r8
 8009026:	e72a      	b.n	8008e7e <forward_conv2d_nl_pool+0x202>
 8009028:	08007e91 	.word	0x08007e91
 800902c:	69b3      	ldr	r3, [r6, #24]
 800902e:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8009030:	68d9      	ldr	r1, [r3, #12]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	fb02 f208 	mul.w	r2, r2, r8
 8009038:	eba4 0282 	sub.w	r2, r4, r2, lsl #2
 800903c:	4291      	cmp	r1, r2
 800903e:	bf88      	it	hi
 8009040:	eb02 0283 	addhi.w	r2, r2, r3, lsl #2
 8009044:	4291      	cmp	r1, r2
 8009046:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800904a:	d21c      	bcs.n	8009086 <forward_conv2d_nl_pool+0x40a>
 800904c:	9837      	ldr	r0, [sp, #220]	; 0xdc
 800904e:	4540      	cmp	r0, r8
 8009050:	4419      	add	r1, r3
 8009052:	d140      	bne.n	80090d6 <forward_conv2d_nl_pool+0x45a>
 8009054:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009056:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009058:	4402      	add	r2, r0
 800905a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800905c:	fa1f f888 	uxth.w	r8, r8
 8009060:	eba2 0208 	sub.w	r2, r2, r8
 8009064:	4480      	add	r8, r0
 8009066:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8009068:	4404      	add	r4, r0
 800906a:	b212      	sxth	r2, r2
 800906c:	428c      	cmp	r4, r1
 800906e:	921e      	str	r2, [sp, #120]	; 0x78
 8009070:	fa0f f888 	sxth.w	r8, r8
 8009074:	f4ff af03 	bcc.w	8008e7e <forward_conv2d_nl_pool+0x202>
 8009078:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800907a:	425b      	negs	r3, r3
 800907c:	441c      	add	r4, r3
 800907e:	428c      	cmp	r4, r1
 8009080:	d2fc      	bcs.n	800907c <forward_conv2d_nl_pool+0x400>
 8009082:	9511      	str	r5, [sp, #68]	; 0x44
 8009084:	e6fb      	b.n	8008e7e <forward_conv2d_nl_pool+0x202>
 8009086:	4419      	add	r1, r3
 8009088:	e7e4      	b.n	8009054 <forward_conv2d_nl_pool+0x3d8>
 800908a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800908e:	2a00      	cmp	r2, #0
 8009090:	f43f aeb2 	beq.w	8008df8 <forward_conv2d_nl_pool+0x17c>
 8009094:	2b03      	cmp	r3, #3
 8009096:	d960      	bls.n	800915a <forward_conv2d_nl_pool+0x4de>
 8009098:	684b      	ldr	r3, [r1, #4]
 800909a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909c:	2b00      	cmp	r3, #0
 800909e:	d04d      	beq.n	800913c <forward_conv2d_nl_pool+0x4c0>
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d04a      	beq.n	800913c <forward_conv2d_nl_pool+0x4c0>
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80090ac:	e9d3 3601 	ldrd	r3, r6, [r3, #4]
 80090b0:	9301      	str	r3, [sp, #4]
 80090b2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80090b4:	9300      	str	r3, [sp, #0]
 80090b6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80090ba:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80090be:	4103      	asrs	r3, r0
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	4630      	mov	r0, r6
 80090c4:	f7ff fc1e 	bl	8008904 <ai_dict_decompress_f32>
 80090c8:	69a1      	ldr	r1, [r4, #24]
 80090ca:	2e00      	cmp	r6, #0
 80090cc:	d039      	beq.n	8009142 <forward_conv2d_nl_pool+0x4c6>
 80090ce:	ee08 6a90 	vmov	s17, r6
 80090d2:	880b      	ldrh	r3, [r1, #0]
 80090d4:	e690      	b.n	8008df8 <forward_conv2d_nl_pool+0x17c>
 80090d6:	428a      	cmp	r2, r1
 80090d8:	d2bc      	bcs.n	8009054 <forward_conv2d_nl_pool+0x3d8>
 80090da:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80090dc:	4620      	mov	r0, r4
 80090de:	f852 3b04 	ldr.w	r3, [r2], #4
 80090e2:	f840 3b04 	str.w	r3, [r0], #4
 80090e6:	69b1      	ldr	r1, [r6, #24]
 80090e8:	684b      	ldr	r3, [r1, #4]
 80090ea:	68c9      	ldr	r1, [r1, #12]
 80090ec:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80090f0:	4291      	cmp	r1, r2
 80090f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80090f6:	d8f2      	bhi.n	80090de <forward_conv2d_nl_pool+0x462>
 80090f8:	9511      	str	r5, [sp, #68]	; 0x44
 80090fa:	e7ab      	b.n	8009054 <forward_conv2d_nl_pool+0x3d8>
 80090fc:	68d1      	ldr	r1, [r2, #12]
 80090fe:	e78d      	b.n	800901c <forward_conv2d_nl_pool+0x3a0>
 8009100:	f1b9 0f00 	cmp.w	r9, #0
 8009104:	d001      	beq.n	800910a <forward_conv2d_nl_pool+0x48e>
 8009106:	f8d9 9008 	ldr.w	r9, [r9, #8]
 800910a:	9033      	str	r0, [sp, #204]	; 0xcc
 800910c:	2201      	movs	r2, #1
 800910e:	9214      	str	r2, [sp, #80]	; 0x50
 8009110:	e63a      	b.n	8008d88 <forward_conv2d_nl_pool+0x10c>
 8009112:	f1b9 0f00 	cmp.w	r9, #0
 8009116:	d001      	beq.n	800911c <forward_conv2d_nl_pool+0x4a0>
 8009118:	f8d9 9008 	ldr.w	r9, [r9, #8]
 800911c:	2200      	movs	r2, #0
 800911e:	9233      	str	r2, [sp, #204]	; 0xcc
 8009120:	2201      	movs	r2, #1
 8009122:	9214      	str	r2, [sp, #80]	; 0x50
 8009124:	e630      	b.n	8008d88 <forward_conv2d_nl_pool+0x10c>
 8009126:	8b36      	ldrh	r6, [r6, #24]
 8009128:	2e01      	cmp	r6, #1
 800912a:	d90f      	bls.n	800914c <forward_conv2d_nl_pool+0x4d0>
 800912c:	ee08 0a10 	vmov	s16, r0
 8009130:	4606      	mov	r6, r0
 8009132:	e5ca      	b.n	8008cca <forward_conv2d_nl_pool+0x4e>
 8009134:	2500      	movs	r5, #0
 8009136:	ee08 5a10 	vmov	s16, r5
 800913a:	e5c5      	b.n	8008cc8 <forward_conv2d_nl_pool+0x4c>
 800913c:	2300      	movs	r3, #0
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	deff      	udf	#255	; 0xff
 8009142:	880b      	ldrh	r3, [r1, #0]
 8009144:	e658      	b.n	8008df8 <forward_conv2d_nl_pool+0x17c>
 8009146:	2300      	movs	r3, #0
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	deff      	udf	#255	; 0xff
 800914c:	68c3      	ldr	r3, [r0, #12]
 800914e:	deff      	udf	#255	; 0xff
 8009150:	2300      	movs	r3, #0
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	deff      	udf	#255	; 0xff
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	deff      	udf	#255	; 0xff
 800915a:	2300      	movs	r3, #0
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	deff      	udf	#255	; 0xff

08009160 <forward_dense>:
 8009160:	6983      	ldr	r3, [r0, #24]
 8009162:	881a      	ldrh	r2, [r3, #0]
 8009164:	2a00      	cmp	r2, #0
 8009166:	f000 818b 	beq.w	8009480 <forward_dense+0x320>
 800916a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8009172:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8009176:	b097      	sub	sp, #92	; 0x5c
 8009178:	b105      	cbz	r5, 800917c <forward_dense+0x1c>
 800917a:	682d      	ldr	r5, [r5, #0]
 800917c:	2a01      	cmp	r2, #1
 800917e:	f000 83a7 	beq.w	80098d0 <forward_dense+0x770>
 8009182:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8009186:	b106      	cbz	r6, 800918a <forward_dense+0x2a>
 8009188:	6836      	ldr	r6, [r6, #0]
 800918a:	2a02      	cmp	r2, #2
 800918c:	f000 817a 	beq.w	8009484 <forward_dense+0x324>
 8009190:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8009194:	930a      	str	r3, [sp, #40]	; 0x28
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 838c 	beq.w	80098b4 <forward_dense+0x754>
 800919c:	4619      	mov	r1, r3
 800919e:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 80091a2:	6809      	ldr	r1, [r1, #0]
 80091a4:	910b      	str	r1, [sp, #44]	; 0x2c
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	f240 8386 	bls.w	80098b8 <forward_dense+0x758>
 80091ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	930a      	str	r3, [sp, #40]	; 0x28
 80091b2:	460b      	mov	r3, r1
 80091b4:	68e8      	ldr	r0, [r5, #12]
 80091b6:	68f4      	ldr	r4, [r6, #12]
 80091b8:	6840      	ldr	r0, [r0, #4]
 80091ba:	6999      	ldr	r1, [r3, #24]
 80091bc:	9013      	str	r0, [sp, #76]	; 0x4c
 80091be:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
 80091c2:	680b      	ldr	r3, [r1, #0]
 80091c4:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80091c8:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80091cc:	fb00 f407 	mul.w	r4, r0, r7
 80091d0:	f3c3 5041 	ubfx	r0, r3, #21, #2
 80091d4:	fa4e f000 	asr.w	r0, lr, r0
 80091d8:	2a03      	cmp	r2, #3
 80091da:	900f      	str	r0, [sp, #60]	; 0x3c
 80091dc:	f000 8375 	beq.w	80098ca <forward_dense+0x76a>
 80091e0:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 80091e4:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80091e8:	2a00      	cmp	r2, #0
 80091ea:	f000 835e 	beq.w	80098aa <forward_dense+0x74a>
 80091ee:	6812      	ldr	r2, [r2, #0]
 80091f0:	2a00      	cmp	r2, #0
 80091f2:	f000 835a 	beq.w	80098aa <forward_dense+0x74a>
 80091f6:	2b04      	cmp	r3, #4
 80091f8:	f8d2 a018 	ldr.w	sl, [r2, #24]
 80091fc:	f000 8344 	beq.w	8009888 <forward_dense+0x728>
 8009200:	2b08      	cmp	r3, #8
 8009202:	f000 8341 	beq.w	8009888 <forward_dense+0x728>
 8009206:	f04f 0b00 	mov.w	fp, #0
 800920a:	69b2      	ldr	r2, [r6, #24]
 800920c:	69ab      	ldr	r3, [r5, #24]
 800920e:	6891      	ldr	r1, [r2, #8]
 8009210:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	6952      	ldr	r2, [r2, #20]
 8009216:	9105      	str	r1, [sp, #20]
 8009218:	fb04 f408 	mul.w	r4, r4, r8
 800921c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8009220:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8009224:	900e      	str	r0, [sp, #56]	; 0x38
 8009226:	00ba      	lsls	r2, r7, #2
 8009228:	4281      	cmp	r1, r0
 800922a:	920c      	str	r2, [sp, #48]	; 0x30
 800922c:	eb01 0887 	add.w	r8, r1, r7, lsl #2
 8009230:	f080 8123 	bcs.w	800947a <forward_dense+0x31a>
 8009234:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009236:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80094a0 <forward_dense+0x340>
 800923a:	f1a1 0210 	sub.w	r2, r1, #16
 800923e:	0912      	lsrs	r2, r2, #4
 8009240:	3201      	adds	r2, #1
 8009242:	0192      	lsls	r2, r2, #6
 8009244:	9214      	str	r2, [sp, #80]	; 0x50
 8009246:	f021 0201 	bic.w	r2, r1, #1
 800924a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800924e:	08c8      	lsrs	r0, r1, #3
 8009250:	f001 0907 	and.w	r9, r1, #7
 8009254:	9203      	str	r2, [sp, #12]
 8009256:	460a      	mov	r2, r1
 8009258:	f001 0101 	and.w	r1, r1, #1
 800925c:	9107      	str	r1, [sp, #28]
 800925e:	0091      	lsls	r1, r2, #2
 8009260:	1c44      	adds	r4, r0, #1
 8009262:	910d      	str	r1, [sp, #52]	; 0x34
 8009264:	eb03 1140 	add.w	r1, r3, r0, lsl #5
 8009268:	3320      	adds	r3, #32
 800926a:	9301      	str	r3, [sp, #4]
 800926c:	00a3      	lsls	r3, r4, #2
 800926e:	9312      	str	r3, [sp, #72]	; 0x48
 8009270:	f002 030f 	and.w	r3, r2, #15
 8009274:	9315      	str	r3, [sp, #84]	; 0x54
 8009276:	9006      	str	r0, [sp, #24]
 8009278:	465b      	mov	r3, fp
 800927a:	9411      	str	r4, [sp, #68]	; 0x44
 800927c:	46d3      	mov	fp, sl
 800927e:	9104      	str	r1, [sp, #16]
 8009280:	46c2      	mov	sl, r8
 8009282:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8009286:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009288:	6992      	ldr	r2, [r2, #24]
 800928a:	6897      	ldr	r7, [r2, #8]
 800928c:	9a01      	ldr	r2, [sp, #4]
 800928e:	3a20      	subs	r2, #32
 8009290:	9209      	str	r2, [sp, #36]	; 0x24
 8009292:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009294:	2a00      	cmp	r2, #0
 8009296:	f000 8105 	beq.w	80094a4 <forward_dense+0x344>
 800929a:	6992      	ldr	r2, [r2, #24]
 800929c:	6895      	ldr	r5, [r2, #8]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f000 8104 	beq.w	80094ac <forward_dense+0x34c>
 80092a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80092a6:	2a04      	cmp	r2, #4
 80092a8:	9a05      	ldr	r2, [sp, #20]
 80092aa:	f000 820b 	beq.w	80096c4 <forward_dense+0x564>
 80092ae:	4592      	cmp	sl, r2
 80092b0:	f240 80d2 	bls.w	8009458 <forward_dense+0x2f8>
 80092b4:	4616      	mov	r6, r2
 80092b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80092b8:	f8dd e018 	ldr.w	lr, [sp, #24]
 80092bc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80092c0:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80092c4:	46b4      	mov	ip, r6
 80092c6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80092c8:	eb07 04c2 	add.w	r4, r7, r2, lsl #3
 80092cc:	2d00      	cmp	r5, #0
 80092ce:	f000 80dc 	beq.w	800948a <forward_dense+0x32a>
 80092d2:	ecb5 2a01 	vldmia	r5!, {s4}
 80092d6:	eddf 6a72 	vldr	s13, [pc, #456]	; 80094a0 <forward_dense+0x340>
 80092da:	f1be 0f00 	cmp.w	lr, #0
 80092de:	f000 80dc 	beq.w	800949a <forward_dense+0x33a>
 80092e2:	f107 0208 	add.w	r2, r7, #8
 80092e6:	4641      	mov	r1, r8
 80092e8:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 80092ec:	ed51 2a07 	vldr	s5, [r1, #-28]	; 0xffffffe4
 80092f0:	ed11 3a08 	vldr	s6, [r1, #-32]	; 0xffffffe0
 80092f4:	ed51 3a06 	vldr	s7, [r1, #-24]	; 0xffffffe8
 80092f8:	ed11 4a05 	vldr	s8, [r1, #-20]	; 0xffffffec
 80092fc:	ed51 4a04 	vldr	s9, [r1, #-16]
 8009300:	ed11 5a03 	vldr	s10, [r1, #-12]
 8009304:	ed51 5a02 	vldr	s11, [r1, #-8]
 8009308:	ed11 6a01 	vldr	s12, [r1, #-4]
 800930c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009310:	edd0 7a00 	vldr	s15, [r0]
 8009314:	f812 0c08 	ldrb.w	r0, [r2, #-8]
 8009318:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800931c:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8009320:	edd0 2a00 	vldr	s5, [r0]
 8009324:	f812 0c06 	ldrb.w	r0, [r2, #-6]
 8009328:	eee2 7a83 	vfma.f32	s15, s5, s6
 800932c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009330:	3208      	adds	r2, #8
 8009332:	ed90 3a00 	vldr	s6, [r0]
 8009336:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 800933a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800933e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009342:	3120      	adds	r1, #32
 8009344:	edd0 3a00 	vldr	s7, [r0]
 8009348:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 800934c:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009350:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009354:	ed90 4a00 	vldr	s8, [r0]
 8009358:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 800935c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009360:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009364:	edd0 4a00 	vldr	s9, [r0]
 8009368:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 800936c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009370:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009374:	ed90 5a00 	vldr	s10, [r0]
 8009378:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 800937c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009380:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009384:	4294      	cmp	r4, r2
 8009386:	edd0 5a00 	vldr	s11, [r0]
 800938a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800938e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009392:	d1a9      	bne.n	80092e8 <forward_dense+0x188>
 8009394:	f1a4 0208 	sub.w	r2, r4, #8
 8009398:	4649      	mov	r1, r9
 800939a:	2e00      	cmp	r6, #0
 800939c:	d04a      	beq.n	8009434 <forward_dense+0x2d4>
 800939e:	7810      	ldrb	r0, [r2, #0]
 80093a0:	ed91 6a00 	vldr	s12, [r1]
 80093a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80093a8:	edd0 7a00 	vldr	s15, [r0]
 80093ac:	2e01      	cmp	r6, #1
 80093ae:	eee6 6a27 	vfma.f32	s13, s12, s15
 80093b2:	d03f      	beq.n	8009434 <forward_dense+0x2d4>
 80093b4:	7850      	ldrb	r0, [r2, #1]
 80093b6:	ed91 6a01 	vldr	s12, [r1, #4]
 80093ba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80093be:	edd0 7a00 	vldr	s15, [r0]
 80093c2:	2e02      	cmp	r6, #2
 80093c4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80093c8:	d034      	beq.n	8009434 <forward_dense+0x2d4>
 80093ca:	7890      	ldrb	r0, [r2, #2]
 80093cc:	ed91 6a02 	vldr	s12, [r1, #8]
 80093d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80093d4:	edd0 7a00 	vldr	s15, [r0]
 80093d8:	2e03      	cmp	r6, #3
 80093da:	eee6 6a27 	vfma.f32	s13, s12, s15
 80093de:	d029      	beq.n	8009434 <forward_dense+0x2d4>
 80093e0:	78d0      	ldrb	r0, [r2, #3]
 80093e2:	ed91 6a03 	vldr	s12, [r1, #12]
 80093e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80093ea:	edd0 7a00 	vldr	s15, [r0]
 80093ee:	2e04      	cmp	r6, #4
 80093f0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80093f4:	d01e      	beq.n	8009434 <forward_dense+0x2d4>
 80093f6:	7910      	ldrb	r0, [r2, #4]
 80093f8:	ed91 6a04 	vldr	s12, [r1, #16]
 80093fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009400:	edd0 7a00 	vldr	s15, [r0]
 8009404:	2e05      	cmp	r6, #5
 8009406:	eee6 6a27 	vfma.f32	s13, s12, s15
 800940a:	d013      	beq.n	8009434 <forward_dense+0x2d4>
 800940c:	7950      	ldrb	r0, [r2, #5]
 800940e:	ed91 6a05 	vldr	s12, [r1, #20]
 8009412:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009416:	edd0 7a00 	vldr	s15, [r0]
 800941a:	2e06      	cmp	r6, #6
 800941c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009420:	d008      	beq.n	8009434 <forward_dense+0x2d4>
 8009422:	7992      	ldrb	r2, [r2, #6]
 8009424:	edd1 7a06 	vldr	s15, [r1, #24]
 8009428:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800942c:	ed92 6a00 	vldr	s12, [r2]
 8009430:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009434:	445f      	add	r7, fp
 8009436:	445c      	add	r4, fp
 8009438:	ee72 6a26 	vadd.f32	s13, s4, s13
 800943c:	ecec 6a01 	vstmia	ip!, {s13}
 8009440:	45d4      	cmp	ip, sl
 8009442:	f4ff af43 	bcc.w	80092cc <forward_dense+0x16c>
 8009446:	9905      	ldr	r1, [sp, #20]
 8009448:	ebaa 0201 	sub.w	r2, sl, r1
 800944c:	3a01      	subs	r2, #1
 800944e:	f022 0203 	bic.w	r2, r2, #3
 8009452:	3204      	adds	r2, #4
 8009454:	188a      	adds	r2, r1, r2
 8009456:	9205      	str	r2, [sp, #20]
 8009458:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800945a:	9904      	ldr	r1, [sp, #16]
 800945c:	4492      	add	sl, r2
 800945e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009460:	4411      	add	r1, r2
 8009462:	9104      	str	r1, [sp, #16]
 8009464:	9903      	ldr	r1, [sp, #12]
 8009466:	4411      	add	r1, r2
 8009468:	9103      	str	r1, [sp, #12]
 800946a:	9901      	ldr	r1, [sp, #4]
 800946c:	4411      	add	r1, r2
 800946e:	9101      	str	r1, [sp, #4]
 8009470:	9a05      	ldr	r2, [sp, #20]
 8009472:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009474:	428a      	cmp	r2, r1
 8009476:	f4ff af06 	bcc.w	8009286 <forward_dense+0x126>
 800947a:	b017      	add	sp, #92	; 0x5c
 800947c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009480:	6853      	ldr	r3, [r2, #4]
 8009482:	deff      	udf	#255	; 0xff
 8009484:	2300      	movs	r3, #0
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	deff      	udf	#255	; 0xff
 800948a:	eddf 6a05 	vldr	s13, [pc, #20]	; 80094a0 <forward_dense+0x340>
 800948e:	eeb0 2a47 	vmov.f32	s4, s14
 8009492:	f1be 0f00 	cmp.w	lr, #0
 8009496:	f47f af24 	bne.w	80092e2 <forward_dense+0x182>
 800949a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800949c:	463a      	mov	r2, r7
 800949e:	e77c      	b.n	800939a <forward_dense+0x23a>
 80094a0:	00000000 	.word	0x00000000
 80094a4:	4615      	mov	r5, r2
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f47f aefc 	bne.w	80092a4 <forward_dense+0x144>
 80094ac:	9a05      	ldr	r2, [sp, #20]
 80094ae:	4592      	cmp	sl, r2
 80094b0:	d9d2      	bls.n	8009458 <forward_dense+0x2f8>
 80094b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094b4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80094b6:	f8dd c004 	ldr.w	ip, [sp, #4]
 80094ba:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 80094be:	9302      	str	r3, [sp, #8]
 80094c0:	4614      	mov	r4, r2
 80094c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80094c4:	188e      	adds	r6, r1, r2
 80094c6:	4696      	mov	lr, r2
 80094c8:	2d00      	cmp	r5, #0
 80094ca:	f000 81d2 	beq.w	8009872 <forward_dense+0x712>
 80094ce:	280f      	cmp	r0, #15
 80094d0:	ecb5 0a01 	vldmia	r5!, {s0}
 80094d4:	ed5f 6a0e 	vldr	s13, [pc, #-56]	; 80094a0 <forward_dense+0x340>
 80094d8:	f240 81d2 	bls.w	8009880 <forward_dense+0x720>
 80094dc:	f10c 0220 	add.w	r2, ip, #32
 80094e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80094e4:	4601      	mov	r1, r0
 80094e6:	ed13 5a0f 	vldr	s10, [r3, #-60]	; 0xffffffc4
 80094ea:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 80094ee:	ed52 5a10 	vldr	s11, [r2, #-64]	; 0xffffffc0
 80094f2:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 80094f6:	ed12 4a0d 	vldr	s8, [r2, #-52]	; 0xffffffcc
 80094fa:	ed52 4a0c 	vldr	s9, [r2, #-48]	; 0xffffffd0
 80094fe:	ed52 2a0a 	vldr	s5, [r2, #-40]	; 0xffffffd8
 8009502:	ed13 3a0a 	vldr	s6, [r3, #-40]	; 0xffffffd8
 8009506:	ed52 3a09 	vldr	s7, [r2, #-36]	; 0xffffffdc
 800950a:	ed52 0a06 	vldr	s1, [r2, #-24]	; 0xffffffe8
 800950e:	ed13 1a06 	vldr	s2, [r3, #-24]	; 0xffffffe8
 8009512:	ed52 1a05 	vldr	s3, [r2, #-20]	; 0xffffffec
 8009516:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 800951a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800951e:	ed12 5a0e 	vldr	s10, [r2, #-56]	; 0xffffffc8
 8009522:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009526:	3910      	subs	r1, #16
 8009528:	290f      	cmp	r1, #15
 800952a:	ed53 5a0e 	vldr	s11, [r3, #-56]	; 0xffffffc8
 800952e:	ed13 6a0d 	vldr	s12, [r3, #-52]	; 0xffffffcc
 8009532:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009536:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800953a:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800953e:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 8009542:	ed52 5a1b 	vldr	s11, [r2, #-108]	; 0xffffff94
 8009546:	eee4 7a06 	vfma.f32	s15, s8, s12
 800954a:	ed13 6a1b 	vldr	s12, [r3, #-108]	; 0xffffff94
 800954e:	ed13 4a19 	vldr	s8, [r3, #-100]	; 0xffffff9c
 8009552:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009556:	ed52 4a18 	vldr	s9, [r2, #-96]	; 0xffffffa0
 800955a:	ed13 5a18 	vldr	s10, [r3, #-96]	; 0xffffffa0
 800955e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009562:	ed52 5a17 	vldr	s11, [r2, #-92]	; 0xffffffa4
 8009566:	ed13 6a17 	vldr	s12, [r3, #-92]	; 0xffffffa4
 800956a:	eee2 7a83 	vfma.f32	s15, s5, s6
 800956e:	ed52 2a14 	vldr	s5, [r2, #-80]	; 0xffffffb0
 8009572:	ed13 3a14 	vldr	s6, [r3, #-80]	; 0xffffffb0
 8009576:	eee3 7a84 	vfma.f32	s15, s7, s8
 800957a:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 800957e:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 8009582:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009586:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 800958a:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 800958e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009592:	ed52 5a11 	vldr	s11, [r2, #-68]	; 0xffffffbc
 8009596:	ed13 6a11 	vldr	s12, [r3, #-68]	; 0xffffffbc
 800959a:	eee0 7a81 	vfma.f32	s15, s1, s2
 800959e:	eee1 7a82 	vfma.f32	s15, s3, s4
 80095a2:	eee2 7a83 	vfma.f32	s15, s5, s6
 80095a6:	eee3 7a84 	vfma.f32	s15, s7, s8
 80095aa:	eee4 7a85 	vfma.f32	s15, s9, s10
 80095ae:	eee5 7a86 	vfma.f32	s15, s11, s12
 80095b2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80095b6:	d896      	bhi.n	80094e6 <forward_dense+0x386>
 80095b8:	eb07 010e 	add.w	r1, r7, lr
 80095bc:	4643      	mov	r3, r8
 80095be:	4632      	mov	r2, r6
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d075      	beq.n	80096b0 <forward_dense+0x550>
 80095c4:	ed92 6a00 	vldr	s12, [r2]
 80095c8:	edd1 7a00 	vldr	s15, [r1]
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	eee6 6a27 	vfma.f32	s13, s12, s15
 80095d2:	d06d      	beq.n	80096b0 <forward_dense+0x550>
 80095d4:	ed92 6a01 	vldr	s12, [r2, #4]
 80095d8:	edd1 7a01 	vldr	s15, [r1, #4]
 80095dc:	2b02      	cmp	r3, #2
 80095de:	eee6 6a27 	vfma.f32	s13, s12, s15
 80095e2:	d065      	beq.n	80096b0 <forward_dense+0x550>
 80095e4:	ed92 6a02 	vldr	s12, [r2, #8]
 80095e8:	edd1 7a02 	vldr	s15, [r1, #8]
 80095ec:	2b03      	cmp	r3, #3
 80095ee:	eee6 6a27 	vfma.f32	s13, s12, s15
 80095f2:	d05d      	beq.n	80096b0 <forward_dense+0x550>
 80095f4:	ed92 6a03 	vldr	s12, [r2, #12]
 80095f8:	edd1 7a03 	vldr	s15, [r1, #12]
 80095fc:	2b04      	cmp	r3, #4
 80095fe:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009602:	d055      	beq.n	80096b0 <forward_dense+0x550>
 8009604:	ed92 6a04 	vldr	s12, [r2, #16]
 8009608:	edd1 7a04 	vldr	s15, [r1, #16]
 800960c:	2b05      	cmp	r3, #5
 800960e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009612:	d04d      	beq.n	80096b0 <forward_dense+0x550>
 8009614:	ed92 6a05 	vldr	s12, [r2, #20]
 8009618:	edd1 7a05 	vldr	s15, [r1, #20]
 800961c:	2b06      	cmp	r3, #6
 800961e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009622:	d045      	beq.n	80096b0 <forward_dense+0x550>
 8009624:	ed92 6a06 	vldr	s12, [r2, #24]
 8009628:	edd1 7a06 	vldr	s15, [r1, #24]
 800962c:	2b07      	cmp	r3, #7
 800962e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009632:	d03d      	beq.n	80096b0 <forward_dense+0x550>
 8009634:	ed92 6a07 	vldr	s12, [r2, #28]
 8009638:	edd1 7a07 	vldr	s15, [r1, #28]
 800963c:	2b08      	cmp	r3, #8
 800963e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009642:	d035      	beq.n	80096b0 <forward_dense+0x550>
 8009644:	ed92 6a08 	vldr	s12, [r2, #32]
 8009648:	edd1 7a08 	vldr	s15, [r1, #32]
 800964c:	2b09      	cmp	r3, #9
 800964e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009652:	d02d      	beq.n	80096b0 <forward_dense+0x550>
 8009654:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 8009658:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 800965c:	2b0a      	cmp	r3, #10
 800965e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009662:	d025      	beq.n	80096b0 <forward_dense+0x550>
 8009664:	ed92 6a0a 	vldr	s12, [r2, #40]	; 0x28
 8009668:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 800966c:	2b0b      	cmp	r3, #11
 800966e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009672:	d01d      	beq.n	80096b0 <forward_dense+0x550>
 8009674:	ed92 6a0b 	vldr	s12, [r2, #44]	; 0x2c
 8009678:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 800967c:	2b0c      	cmp	r3, #12
 800967e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009682:	d015      	beq.n	80096b0 <forward_dense+0x550>
 8009684:	ed92 6a0c 	vldr	s12, [r2, #48]	; 0x30
 8009688:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 800968c:	3b0d      	subs	r3, #13
 800968e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009692:	d00d      	beq.n	80096b0 <forward_dense+0x550>
 8009694:	ed92 6a0d 	vldr	s12, [r2, #52]	; 0x34
 8009698:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 800969c:	2b01      	cmp	r3, #1
 800969e:	eee6 6a27 	vfma.f32	s13, s12, s15
 80096a2:	d005      	beq.n	80096b0 <forward_dense+0x550>
 80096a4:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 80096a8:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80096ac:	eee6 6a27 	vfma.f32	s13, s12, s15
 80096b0:	445f      	add	r7, fp
 80096b2:	ee70 6a26 	vadd.f32	s13, s0, s13
 80096b6:	ece4 6a01 	vstmia	r4!, {s13}
 80096ba:	4554      	cmp	r4, sl
 80096bc:	f4ff af04 	bcc.w	80094c8 <forward_dense+0x368>
 80096c0:	9b02      	ldr	r3, [sp, #8]
 80096c2:	e6c0      	b.n	8009446 <forward_dense+0x2e6>
 80096c4:	4592      	cmp	sl, r2
 80096c6:	f67f aec7 	bls.w	8009458 <forward_dense+0x2f8>
 80096ca:	9202      	str	r2, [sp, #8]
 80096cc:	9a03      	ldr	r2, [sp, #12]
 80096ce:	9912      	ldr	r1, [sp, #72]	; 0x48
 80096d0:	3a01      	subs	r2, #1
 80096d2:	eb07 0c01 	add.w	ip, r7, r1
 80096d6:	9208      	str	r2, [sp, #32]
 80096d8:	2d00      	cmp	r5, #0
 80096da:	f000 80b2 	beq.w	8009842 <forward_dense+0x6e2>
 80096de:	9a06      	ldr	r2, [sp, #24]
 80096e0:	ecb5 2a01 	vldmia	r5!, {s4}
 80096e4:	ed5f 6a92 	vldr	s13, [pc, #-584]	; 80094a0 <forward_dense+0x340>
 80096e8:	2a00      	cmp	r2, #0
 80096ea:	f000 80b2 	beq.w	8009852 <forward_dense+0x6f2>
 80096ee:	9a01      	ldr	r2, [sp, #4]
 80096f0:	1d39      	adds	r1, r7, #4
 80096f2:	f811 4c04 	ldrb.w	r4, [r1, #-4]
 80096f6:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 80096fa:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 80096fe:	ed12 3a08 	vldr	s6, [r2, #-32]	; 0xffffffe0
 8009702:	ed52 3a06 	vldr	s7, [r2, #-24]	; 0xffffffe8
 8009706:	ed12 4a05 	vldr	s8, [r2, #-20]	; 0xffffffec
 800970a:	ed52 4a04 	vldr	s9, [r2, #-16]
 800970e:	ed12 5a03 	vldr	s10, [r2, #-12]
 8009712:	ed52 5a02 	vldr	s11, [r2, #-8]
 8009716:	ed12 6a01 	vldr	s12, [r2, #-4]
 800971a:	f004 060f 	and.w	r6, r4, #15
 800971e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8009722:	edd6 7a00 	vldr	s15, [r6]
 8009726:	0924      	lsrs	r4, r4, #4
 8009728:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800972c:	edd4 2a00 	vldr	s5, [r4]
 8009730:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8009734:	0904      	lsrs	r4, r0, #4
 8009736:	eee2 7a83 	vfma.f32	s15, s5, s6
 800973a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800973e:	f000 000f 	and.w	r0, r0, #15
 8009742:	ed94 3a00 	vldr	s6, [r4]
 8009746:	f811 4c02 	ldrb.w	r4, [r1, #-2]
 800974a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800974e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009752:	0926      	lsrs	r6, r4, #4
 8009754:	edd0 3a00 	vldr	s7, [r0]
 8009758:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 800975c:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009760:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8009764:	f004 040f 	and.w	r4, r4, #15
 8009768:	ed96 4a00 	vldr	s8, [r6]
 800976c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009770:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009774:	3104      	adds	r1, #4
 8009776:	edd4 4a00 	vldr	s9, [r4]
 800977a:	0904      	lsrs	r4, r0, #4
 800977c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009780:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009784:	f000 000f 	and.w	r0, r0, #15
 8009788:	ed94 5a00 	vldr	s10, [r4]
 800978c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009790:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009794:	458c      	cmp	ip, r1
 8009796:	edd0 5a00 	vldr	s11, [r0]
 800979a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800979e:	f102 0220 	add.w	r2, r2, #32
 80097a2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80097a6:	d1a4      	bne.n	80096f2 <forward_dense+0x592>
 80097a8:	f8dd e010 	ldr.w	lr, [sp, #16]
 80097ac:	f1ac 0804 	sub.w	r8, ip, #4
 80097b0:	9a03      	ldr	r2, [sp, #12]
 80097b2:	4596      	cmp	lr, r2
 80097b4:	d22a      	bcs.n	800980c <forward_dense+0x6ac>
 80097b6:	9a08      	ldr	r2, [sp, #32]
 80097b8:	eba2 060e 	sub.w	r6, r2, lr
 80097bc:	ea4f 09d6 	mov.w	r9, r6, lsr #3
 80097c0:	f10e 0108 	add.w	r1, lr, #8
 80097c4:	f108 34ff 	add.w	r4, r8, #4294967295
 80097c8:	eb08 06d6 	add.w	r6, r8, r6, lsr #3
 80097cc:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 80097d0:	ed11 5a01 	vldr	s10, [r1, #-4]
 80097d4:	ed11 6a02 	vldr	s12, [r1, #-8]
 80097d8:	f002 000f 	and.w	r0, r2, #15
 80097dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80097e0:	edd0 7a00 	vldr	s15, [r0]
 80097e4:	0912      	lsrs	r2, r2, #4
 80097e6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80097ea:	edd2 5a00 	vldr	s11, [r2]
 80097ee:	ee67 7a85 	vmul.f32	s15, s15, s10
 80097f2:	42a6      	cmp	r6, r4
 80097f4:	eee5 7a86 	vfma.f32	s15, s11, s12
 80097f8:	f101 0108 	add.w	r1, r1, #8
 80097fc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009800:	d1e4      	bne.n	80097cc <forward_dense+0x66c>
 8009802:	f109 0901 	add.w	r9, r9, #1
 8009806:	44c8      	add	r8, r9
 8009808:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 800980c:	9a07      	ldr	r2, [sp, #28]
 800980e:	b322      	cbz	r2, 800985a <forward_dense+0x6fa>
 8009810:	f898 2000 	ldrb.w	r2, [r8]
 8009814:	edde 7a00 	vldr	s15, [lr]
 8009818:	0912      	lsrs	r2, r2, #4
 800981a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800981e:	ed92 6a00 	vldr	s12, [r2]
 8009822:	9a02      	ldr	r2, [sp, #8]
 8009824:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009828:	445f      	add	r7, fp
 800982a:	44dc      	add	ip, fp
 800982c:	ee32 2a26 	vadd.f32	s4, s4, s13
 8009830:	eca2 2a01 	vstmia	r2!, {s4}
 8009834:	4592      	cmp	sl, r2
 8009836:	9202      	str	r2, [sp, #8]
 8009838:	f67f ae05 	bls.w	8009446 <forward_dense+0x2e6>
 800983c:	2d00      	cmp	r5, #0
 800983e:	f47f af4e 	bne.w	80096de <forward_dense+0x57e>
 8009842:	9a06      	ldr	r2, [sp, #24]
 8009844:	eddf 6a24 	vldr	s13, [pc, #144]	; 80098d8 <forward_dense+0x778>
 8009848:	eeb0 2a47 	vmov.f32	s4, s14
 800984c:	2a00      	cmp	r2, #0
 800984e:	f47f af4e 	bne.w	80096ee <forward_dense+0x58e>
 8009852:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8009856:	46b8      	mov	r8, r7
 8009858:	e7aa      	b.n	80097b0 <forward_dense+0x650>
 800985a:	9a02      	ldr	r2, [sp, #8]
 800985c:	ee72 6a26 	vadd.f32	s13, s4, s13
 8009860:	445f      	add	r7, fp
 8009862:	ece2 6a01 	vstmia	r2!, {s13}
 8009866:	4552      	cmp	r2, sl
 8009868:	9202      	str	r2, [sp, #8]
 800986a:	44dc      	add	ip, fp
 800986c:	f4ff af34 	bcc.w	80096d8 <forward_dense+0x578>
 8009870:	e5e9      	b.n	8009446 <forward_dense+0x2e6>
 8009872:	280f      	cmp	r0, #15
 8009874:	eddf 6a18 	vldr	s13, [pc, #96]	; 80098d8 <forward_dense+0x778>
 8009878:	eeb0 0a47 	vmov.f32	s0, s14
 800987c:	f63f ae2e 	bhi.w	80094dc <forward_dense+0x37c>
 8009880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009882:	4603      	mov	r3, r0
 8009884:	4639      	mov	r1, r7
 8009886:	e69b      	b.n	80095c0 <forward_dense+0x460>
 8009888:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800988c:	f1ba 0f00 	cmp.w	sl, #0
 8009890:	d016      	beq.n	80098c0 <forward_dense+0x760>
 8009892:	e9da 0100 	ldrd	r0, r1, [sl]
 8009896:	f000 fd77 	bl	800a388 <ai_array_get_byte_size>
 800989a:	f8da b00c 	ldr.w	fp, [sl, #12]
 800989e:	4602      	mov	r2, r0
 80098a0:	4649      	mov	r1, r9
 80098a2:	4658      	mov	r0, fp
 80098a4:	f000 fdd4 	bl	800a450 <memcpy>
 80098a8:	e4af      	b.n	800920a <forward_dense+0xaa>
 80098aa:	2b04      	cmp	r3, #4
 80098ac:	d00a      	beq.n	80098c4 <forward_dense+0x764>
 80098ae:	f04f 0a00 	mov.w	sl, #0
 80098b2:	e4a5      	b.n	8009200 <forward_dense+0xa0>
 80098b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80098b6:	e47d      	b.n	80091b4 <forward_dense+0x54>
 80098b8:	2300      	movs	r3, #0
 80098ba:	930a      	str	r3, [sp, #40]	; 0x28
 80098bc:	460b      	mov	r3, r1
 80098be:	e479      	b.n	80091b4 <forward_dense+0x54>
 80098c0:	46cb      	mov	fp, r9
 80098c2:	e4a2      	b.n	800920a <forward_dense+0xaa>
 80098c4:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 80098c8:	e49f      	b.n	800920a <forward_dense+0xaa>
 80098ca:	2300      	movs	r3, #0
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	deff      	udf	#255	; 0xff
 80098d0:	2300      	movs	r3, #0
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	deff      	udf	#255	; 0xff
 80098d6:	bf00      	nop
 80098d8:	00000000 	.word	0x00000000

080098dc <pool_func_mp_array_f32>:
 80098dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e0:	b093      	sub	sp, #76	; 0x4c
 80098e2:	4698      	mov	r8, r3
 80098e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80098e6:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	9303      	str	r3, [sp, #12]
 80098ee:	4693      	mov	fp, r2
 80098f0:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 80098f4:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
 80098f8:	f8d0 a008 	ldr.w	sl, [r0, #8]
 80098fc:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8009900:	f8bd 7080 	ldrh.w	r7, [sp, #128]	; 0x80
 8009904:	f8bd 008c 	ldrh.w	r0, [sp, #140]	; 0x8c
 8009908:	9505      	str	r5, [sp, #20]
 800990a:	4689      	mov	r9, r1
 800990c:	f8bd 1084 	ldrh.w	r1, [sp, #132]	; 0x84
 8009910:	9104      	str	r1, [sp, #16]
 8009912:	ea52 0403 	orrs.w	r4, r2, r3
 8009916:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
 800991a:	9601      	str	r6, [sp, #4]
 800991c:	9706      	str	r7, [sp, #24]
 800991e:	9100      	str	r1, [sp, #0]
 8009920:	9002      	str	r0, [sp, #8]
 8009922:	d108      	bne.n	8009936 <pool_func_mp_array_f32+0x5a>
 8009924:	eba5 0009 	sub.w	r0, r5, r9
 8009928:	3801      	subs	r0, #1
 800992a:	3901      	subs	r1, #1
 800992c:	fb11 0107 	smlabb	r1, r1, r7, r0
 8009930:	0408      	lsls	r0, r1, #16
 8009932:	f100 8083 	bmi.w	8009a3c <pool_func_mp_array_f32+0x160>
 8009936:	9902      	ldr	r1, [sp, #8]
 8009938:	2900      	cmp	r1, #0
 800993a:	d07c      	beq.n	8009a36 <pool_func_mp_array_f32+0x15a>
 800993c:	9900      	ldr	r1, [sp, #0]
 800993e:	2900      	cmp	r1, #0
 8009940:	d079      	beq.n	8009a36 <pool_func_mp_array_f32+0x15a>
 8009942:	f1b8 0f00 	cmp.w	r8, #0
 8009946:	d076      	beq.n	8009a36 <pool_func_mp_array_f32+0x15a>
 8009948:	f1b8 0f01 	cmp.w	r8, #1
 800994c:	9901      	ldr	r1, [sp, #4]
 800994e:	f040 80e3 	bne.w	8009b18 <pool_func_mp_array_f32+0x23c>
 8009952:	1a8a      	subs	r2, r1, r2
 8009954:	9905      	ldr	r1, [sp, #20]
 8009956:	1ac9      	subs	r1, r1, r3
 8009958:	425b      	negs	r3, r3
 800995a:	b292      	uxth	r2, r2
 800995c:	b29b      	uxth	r3, r3
 800995e:	9207      	str	r2, [sp, #28]
 8009960:	930c      	str	r3, [sp, #48]	; 0x30
 8009962:	b28a      	uxth	r2, r1
 8009964:	2300      	movs	r3, #0
 8009966:	920b      	str	r2, [sp, #44]	; 0x2c
 8009968:	9308      	str	r3, [sp, #32]
 800996a:	9a00      	ldr	r2, [sp, #0]
 800996c:	fb02 f303 	mul.w	r3, r2, r3
 8009970:	9309      	str	r3, [sp, #36]	; 0x24
 8009972:	9a07      	ldr	r2, [sp, #28]
 8009974:	9b01      	ldr	r3, [sp, #4]
 8009976:	1ad3      	subs	r3, r2, r3
 8009978:	b21b      	sxth	r3, r3
 800997a:	930a      	str	r3, [sp, #40]	; 0x28
 800997c:	e9dd 830b 	ldrd	r8, r3, [sp, #44]	; 0x2c
 8009980:	f04f 0c00 	mov.w	ip, #0
 8009984:	9305      	str	r3, [sp, #20]
 8009986:	b217      	sxth	r7, r2
 8009988:	46e6      	mov	lr, ip
 800998a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800998c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800998e:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 8009992:	eddf 7aad 	vldr	s15, [pc, #692]	; 8009c48 <pool_func_mp_array_f32+0x36c>
 8009996:	428f      	cmp	r7, r1
 8009998:	449e      	add	lr, r3
 800999a:	fa0f f088 	sxth.w	r0, r8
 800999e:	dd28      	ble.n	80099f2 <pool_func_mp_array_f32+0x116>
 80099a0:	ea00 75e0 	and.w	r5, r0, r0, asr #31
 80099a4:	4286      	cmp	r6, r0
 80099a6:	da20      	bge.n	80099ea <pool_func_mp_array_f32+0x10e>
 80099a8:	2900      	cmp	r1, #0
 80099aa:	fb09 f401 	mul.w	r4, r9, r1
 80099ae:	db1c      	blt.n	80099ea <pool_func_mp_array_f32+0x10e>
 80099b0:	4559      	cmp	r1, fp
 80099b2:	da1a      	bge.n	80099ea <pool_func_mp_array_f32+0x10e>
 80099b4:	2e00      	cmp	r6, #0
 80099b6:	4633      	mov	r3, r6
 80099b8:	da05      	bge.n	80099c6 <pool_func_mp_array_f32+0xea>
 80099ba:	3301      	adds	r3, #1
 80099bc:	b21b      	sxth	r3, r3
 80099be:	429d      	cmp	r5, r3
 80099c0:	dcfb      	bgt.n	80099ba <pool_func_mp_array_f32+0xde>
 80099c2:	4283      	cmp	r3, r0
 80099c4:	da11      	bge.n	80099ea <pool_func_mp_array_f32+0x10e>
 80099c6:	191a      	adds	r2, r3, r4
 80099c8:	454b      	cmp	r3, r9
 80099ca:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 80099ce:	da08      	bge.n	80099e2 <pool_func_mp_array_f32+0x106>
 80099d0:	ed92 7a00 	vldr	s14, [r2]
 80099d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80099d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099dc:	bfb8      	it	lt
 80099de:	eef0 7a47 	vmovlt.f32	s15, s14
 80099e2:	3301      	adds	r3, #1
 80099e4:	b21b      	sxth	r3, r3
 80099e6:	4283      	cmp	r3, r0
 80099e8:	dbed      	blt.n	80099c6 <pool_func_mp_array_f32+0xea>
 80099ea:	3101      	adds	r1, #1
 80099ec:	b209      	sxth	r1, r1
 80099ee:	42b9      	cmp	r1, r7
 80099f0:	dbd8      	blt.n	80099a4 <pool_func_mp_array_f32+0xc8>
 80099f2:	9b03      	ldr	r3, [sp, #12]
 80099f4:	9a06      	ldr	r2, [sp, #24]
 80099f6:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 80099fa:	9b05      	ldr	r3, [sp, #20]
 80099fc:	edce 7a00 	vstr	s15, [lr]
 8009a00:	4413      	add	r3, r2
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	f10c 0c01 	add.w	ip, ip, #1
 8009a08:	9305      	str	r3, [sp, #20]
 8009a0a:	9b00      	ldr	r3, [sp, #0]
 8009a0c:	fa0f fc8c 	sxth.w	ip, ip
 8009a10:	4490      	add	r8, r2
 8009a12:	4563      	cmp	r3, ip
 8009a14:	fa1f f888 	uxth.w	r8, r8
 8009a18:	46e6      	mov	lr, ip
 8009a1a:	dcb6      	bgt.n	800998a <pool_func_mp_array_f32+0xae>
 8009a1c:	9b08      	ldr	r3, [sp, #32]
 8009a1e:	9904      	ldr	r1, [sp, #16]
 8009a20:	3301      	adds	r3, #1
 8009a22:	b21a      	sxth	r2, r3
 8009a24:	9b07      	ldr	r3, [sp, #28]
 8009a26:	9208      	str	r2, [sp, #32]
 8009a28:	440b      	add	r3, r1
 8009a2a:	9902      	ldr	r1, [sp, #8]
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	4291      	cmp	r1, r2
 8009a30:	9307      	str	r3, [sp, #28]
 8009a32:	4613      	mov	r3, r2
 8009a34:	dc99      	bgt.n	800996a <pool_func_mp_array_f32+0x8e>
 8009a36:	b013      	add	sp, #76	; 0x4c
 8009a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a3c:	eba6 000b 	sub.w	r0, r6, fp
 8009a40:	9e02      	ldr	r6, [sp, #8]
 8009a42:	9d04      	ldr	r5, [sp, #16]
 8009a44:	3801      	subs	r0, #1
 8009a46:	1e71      	subs	r1, r6, #1
 8009a48:	fb11 0105 	smlabb	r1, r1, r5, r0
 8009a4c:	0409      	lsls	r1, r1, #16
 8009a4e:	f57f af72 	bpl.w	8009936 <pool_func_mp_array_f32+0x5a>
 8009a52:	2e00      	cmp	r6, #0
 8009a54:	d0ef      	beq.n	8009a36 <pool_func_mp_array_f32+0x15a>
 8009a56:	9b00      	ldr	r3, [sp, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d0ec      	beq.n	8009a36 <pool_func_mp_array_f32+0x15a>
 8009a5c:	f1b8 0f00 	cmp.w	r8, #0
 8009a60:	d0e9      	beq.n	8009a36 <pool_func_mp_array_f32+0x15a>
 8009a62:	f1b8 0f01 	cmp.w	r8, #1
 8009a66:	f040 80f3 	bne.w	8009c50 <pool_func_mp_array_f32+0x374>
 8009a6a:	46a3      	mov	fp, r4
 8009a6c:	9407      	str	r4, [sp, #28]
 8009a6e:	46a0      	mov	r8, r4
 8009a70:	9b00      	ldr	r3, [sp, #0]
 8009a72:	f8dd e014 	ldr.w	lr, [sp, #20]
 8009a76:	fb03 f308 	mul.w	r3, r3, r8
 8009a7a:	2600      	movs	r6, #0
 8009a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a7e:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
 8009a82:	fa0f f38b 	sxth.w	r3, fp
 8009a86:	9308      	str	r3, [sp, #32]
 8009a88:	46b4      	mov	ip, r6
 8009a8a:	4637      	mov	r7, r6
 8009a8c:	9c08      	ldr	r4, [sp, #32]
 8009a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a90:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8009c48 <pool_func_mp_array_f32+0x36c>
 8009a94:	4544      	cmp	r4, r8
 8009a96:	441f      	add	r7, r3
 8009a98:	b235      	sxth	r5, r6
 8009a9a:	fa0f f08e 	sxth.w	r0, lr
 8009a9e:	da17      	bge.n	8009ad0 <pool_func_mp_array_f32+0x1f4>
 8009aa0:	4285      	cmp	r5, r0
 8009aa2:	da11      	bge.n	8009ac8 <pool_func_mp_array_f32+0x1ec>
 8009aa4:	fb04 5209 	mla	r2, r4, r9, r5
 8009aa8:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8009aac:	462b      	mov	r3, r5
 8009aae:	ecb2 7a01 	vldmia	r2!, {s14}
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009abc:	b219      	sxth	r1, r3
 8009abe:	bfb8      	it	lt
 8009ac0:	eef0 7a47 	vmovlt.f32	s15, s14
 8009ac4:	4281      	cmp	r1, r0
 8009ac6:	dbf2      	blt.n	8009aae <pool_func_mp_array_f32+0x1d2>
 8009ac8:	3401      	adds	r4, #1
 8009aca:	b224      	sxth	r4, r4
 8009acc:	4544      	cmp	r4, r8
 8009ace:	dbe7      	blt.n	8009aa0 <pool_func_mp_array_f32+0x1c4>
 8009ad0:	9b03      	ldr	r3, [sp, #12]
 8009ad2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ad6:	9b06      	ldr	r3, [sp, #24]
 8009ad8:	edc7 7a00 	vstr	s15, [r7]
 8009adc:	449e      	add	lr, r3
 8009ade:	441e      	add	r6, r3
 8009ae0:	f10c 0c01 	add.w	ip, ip, #1
 8009ae4:	9b00      	ldr	r3, [sp, #0]
 8009ae6:	fa0f fc8c 	sxth.w	ip, ip
 8009aea:	4563      	cmp	r3, ip
 8009aec:	fa1f fe8e 	uxth.w	lr, lr
 8009af0:	b2b6      	uxth	r6, r6
 8009af2:	4667      	mov	r7, ip
 8009af4:	dcca      	bgt.n	8009a8c <pool_func_mp_array_f32+0x1b0>
 8009af6:	9b07      	ldr	r3, [sp, #28]
 8009af8:	9904      	ldr	r1, [sp, #16]
 8009afa:	3301      	adds	r3, #1
 8009afc:	b21a      	sxth	r2, r3
 8009afe:	9b01      	ldr	r3, [sp, #4]
 8009b00:	9207      	str	r2, [sp, #28]
 8009b02:	440b      	add	r3, r1
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	9301      	str	r3, [sp, #4]
 8009b08:	9b02      	ldr	r3, [sp, #8]
 8009b0a:	448b      	add	fp, r1
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	fa1f fb8b 	uxth.w	fp, fp
 8009b12:	4690      	mov	r8, r2
 8009b14:	dcac      	bgt.n	8009a70 <pool_func_mp_array_f32+0x194>
 8009b16:	e78e      	b.n	8009a36 <pool_func_mp_array_f32+0x15a>
 8009b18:	1a88      	subs	r0, r1, r2
 8009b1a:	9905      	ldr	r1, [sp, #20]
 8009b1c:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009b20:	1ac9      	subs	r1, r1, r3
 8009b22:	4252      	negs	r2, r2
 8009b24:	425b      	negs	r3, r3
 8009b26:	b292      	uxth	r2, r2
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	b280      	uxth	r0, r0
 8009b2c:	9208      	str	r2, [sp, #32]
 8009b2e:	9311      	str	r3, [sp, #68]	; 0x44
 8009b30:	b28a      	uxth	r2, r1
 8009b32:	2300      	movs	r3, #0
 8009b34:	9007      	str	r0, [sp, #28]
 8009b36:	9210      	str	r2, [sp, #64]	; 0x40
 8009b38:	930c      	str	r3, [sp, #48]	; 0x30
 8009b3a:	9a00      	ldr	r2, [sp, #0]
 8009b3c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8009b40:	fb03 f302 	mul.w	r3, r3, r2
 8009b44:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8009b48:	920b      	str	r2, [sp, #44]	; 0x2c
 8009b4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009b4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b4e:	9201      	str	r2, [sp, #4]
 8009b50:	2300      	movs	r3, #0
 8009b52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009b54:	930d      	str	r3, [sp, #52]	; 0x34
 8009b56:	9205      	str	r2, [sp, #20]
 8009b58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b5a:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8009b5e:	f9bd c014 	ldrsh.w	ip, [sp, #20]
 8009b62:	4413      	add	r3, r2
 8009b64:	fb08 f303 	mul.w	r3, r8, r3
 8009b68:	f04f 0e00 	mov.w	lr, #0
 8009b6c:	930a      	str	r3, [sp, #40]	; 0x28
 8009b6e:	4676      	mov	r6, lr
 8009b70:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 8009b74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b76:	eddf 7a34 	vldr	s15, [pc, #208]	; 8009c48 <pool_func_mp_array_f32+0x36c>
 8009b7a:	4559      	cmp	r1, fp
 8009b7c:	da2f      	bge.n	8009bde <pool_func_mp_array_f32+0x302>
 8009b7e:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8009b82:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8009b86:	45a4      	cmp	ip, r4
 8009b88:	da23      	bge.n	8009bd2 <pool_func_mp_array_f32+0x2f6>
 8009b8a:	2900      	cmp	r1, #0
 8009b8c:	fb09 f501 	mul.w	r5, r9, r1
 8009b90:	db1f      	blt.n	8009bd2 <pool_func_mp_array_f32+0x2f6>
 8009b92:	4571      	cmp	r1, lr
 8009b94:	da1d      	bge.n	8009bd2 <pool_func_mp_array_f32+0x2f6>
 8009b96:	f1bc 0f00 	cmp.w	ip, #0
 8009b9a:	4663      	mov	r3, ip
 8009b9c:	da05      	bge.n	8009baa <pool_func_mp_array_f32+0x2ce>
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	b21b      	sxth	r3, r3
 8009ba2:	429f      	cmp	r7, r3
 8009ba4:	dcfb      	bgt.n	8009b9e <pool_func_mp_array_f32+0x2c2>
 8009ba6:	42a3      	cmp	r3, r4
 8009ba8:	da13      	bge.n	8009bd2 <pool_func_mp_array_f32+0x2f6>
 8009baa:	18ea      	adds	r2, r5, r3
 8009bac:	fb08 6202 	mla	r2, r8, r2, r6
 8009bb0:	1c58      	adds	r0, r3, #1
 8009bb2:	4599      	cmp	r9, r3
 8009bb4:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8009bb8:	b203      	sxth	r3, r0
 8009bba:	dd08      	ble.n	8009bce <pool_func_mp_array_f32+0x2f2>
 8009bbc:	ed92 7a00 	vldr	s14, [r2]
 8009bc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bc8:	bfb8      	it	lt
 8009bca:	eef0 7a47 	vmovlt.f32	s15, s14
 8009bce:	42a3      	cmp	r3, r4
 8009bd0:	dbeb      	blt.n	8009baa <pool_func_mp_array_f32+0x2ce>
 8009bd2:	3101      	adds	r1, #1
 8009bd4:	b209      	sxth	r1, r1
 8009bd6:	4559      	cmp	r1, fp
 8009bd8:	dbd5      	blt.n	8009b86 <pool_func_mp_array_f32+0x2aa>
 8009bda:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8009bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009be0:	9a03      	ldr	r2, [sp, #12]
 8009be2:	f10e 0e01 	add.w	lr, lr, #1
 8009be6:	4433      	add	r3, r6
 8009be8:	fa0f fe8e 	sxth.w	lr, lr
 8009bec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009bf0:	45c6      	cmp	lr, r8
 8009bf2:	edc3 7a00 	vstr	s15, [r3]
 8009bf6:	4676      	mov	r6, lr
 8009bf8:	dbbc      	blt.n	8009b74 <pool_func_mp_array_f32+0x298>
 8009bfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bfc:	9a01      	ldr	r2, [sp, #4]
 8009bfe:	9806      	ldr	r0, [sp, #24]
 8009c00:	3301      	adds	r3, #1
 8009c02:	4402      	add	r2, r0
 8009c04:	b219      	sxth	r1, r3
 8009c06:	b292      	uxth	r2, r2
 8009c08:	9b05      	ldr	r3, [sp, #20]
 8009c0a:	9201      	str	r2, [sp, #4]
 8009c0c:	9a00      	ldr	r2, [sp, #0]
 8009c0e:	910d      	str	r1, [sp, #52]	; 0x34
 8009c10:	4403      	add	r3, r0
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	428a      	cmp	r2, r1
 8009c16:	9305      	str	r3, [sp, #20]
 8009c18:	460b      	mov	r3, r1
 8009c1a:	dc9d      	bgt.n	8009b58 <pool_func_mp_array_f32+0x27c>
 8009c1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c1e:	9a07      	ldr	r2, [sp, #28]
 8009c20:	9804      	ldr	r0, [sp, #16]
 8009c22:	3301      	adds	r3, #1
 8009c24:	4402      	add	r2, r0
 8009c26:	b219      	sxth	r1, r3
 8009c28:	b292      	uxth	r2, r2
 8009c2a:	9b08      	ldr	r3, [sp, #32]
 8009c2c:	9207      	str	r2, [sp, #28]
 8009c2e:	9a02      	ldr	r2, [sp, #8]
 8009c30:	910c      	str	r1, [sp, #48]	; 0x30
 8009c32:	4403      	add	r3, r0
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	428a      	cmp	r2, r1
 8009c38:	9308      	str	r3, [sp, #32]
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	f73f af7d 	bgt.w	8009b3a <pool_func_mp_array_f32+0x25e>
 8009c40:	b013      	add	sp, #76	; 0x4c
 8009c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c46:	bf00      	nop
 8009c48:	cf000000 	.word	0xcf000000
 8009c4c:	cf000000 	.word	0xcf000000
 8009c50:	e9cd a90c 	strd	sl, r9, [sp, #48]	; 0x30
 8009c54:	46a4      	mov	ip, r4
 8009c56:	ea4f 0b88 	mov.w	fp, r8, lsl #2
 8009c5a:	9407      	str	r4, [sp, #28]
 8009c5c:	4623      	mov	r3, r4
 8009c5e:	9a00      	ldr	r2, [sp, #0]
 8009c60:	f8dd e014 	ldr.w	lr, [sp, #20]
 8009c64:	fb03 f302 	mul.w	r3, r3, r2
 8009c68:	930a      	str	r3, [sp, #40]	; 0x28
 8009c6a:	fa0f f38c 	sxth.w	r3, ip
 8009c6e:	2400      	movs	r4, #0
 8009c70:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c72:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8009c76:	9308      	str	r3, [sp, #32]
 8009c78:	4627      	mov	r7, r4
 8009c7a:	4623      	mov	r3, r4
 8009c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c7e:	4413      	add	r3, r2
 8009c80:	fb08 f303 	mul.w	r3, r8, r3
 8009c84:	2600      	movs	r6, #0
 8009c86:	9309      	str	r3, [sp, #36]	; 0x24
 8009c88:	fa0f fa84 	sxth.w	sl, r4
 8009c8c:	fa0f f08e 	sxth.w	r0, lr
 8009c90:	4635      	mov	r5, r6
 8009c92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c94:	9a08      	ldr	r2, [sp, #32]
 8009c96:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 8009c4c <pool_func_mp_array_f32+0x370>
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	da20      	bge.n	8009ce0 <pool_func_mp_array_f32+0x404>
 8009c9e:	4699      	mov	r9, r3
 8009ca0:	4582      	cmp	sl, r0
 8009ca2:	da16      	bge.n	8009cd2 <pool_func_mp_array_f32+0x3f6>
 8009ca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ca6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ca8:	fb03 a309 	mla	r3, r3, r9, sl
 8009cac:	fb08 5303 	mla	r3, r8, r3, r5
 8009cb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009cb4:	4652      	mov	r2, sl
 8009cb6:	ed93 7a00 	vldr	s14, [r3]
 8009cba:	3201      	adds	r2, #1
 8009cbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc4:	b211      	sxth	r1, r2
 8009cc6:	bfb8      	it	lt
 8009cc8:	eef0 7a47 	vmovlt.f32	s15, s14
 8009ccc:	4281      	cmp	r1, r0
 8009cce:	445b      	add	r3, fp
 8009cd0:	dbf1      	blt.n	8009cb6 <pool_func_mp_array_f32+0x3da>
 8009cd2:	9b08      	ldr	r3, [sp, #32]
 8009cd4:	f109 0901 	add.w	r9, r9, #1
 8009cd8:	fa0f f989 	sxth.w	r9, r9
 8009cdc:	4599      	cmp	r9, r3
 8009cde:	dbdf      	blt.n	8009ca0 <pool_func_mp_array_f32+0x3c4>
 8009ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce2:	9a03      	ldr	r2, [sp, #12]
 8009ce4:	3601      	adds	r6, #1
 8009ce6:	442b      	add	r3, r5
 8009ce8:	b236      	sxth	r6, r6
 8009cea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009cee:	4546      	cmp	r6, r8
 8009cf0:	edc3 7a00 	vstr	s15, [r3]
 8009cf4:	4635      	mov	r5, r6
 8009cf6:	dbcc      	blt.n	8009c92 <pool_func_mp_array_f32+0x3b6>
 8009cf8:	9b06      	ldr	r3, [sp, #24]
 8009cfa:	9a00      	ldr	r2, [sp, #0]
 8009cfc:	3701      	adds	r7, #1
 8009cfe:	b23f      	sxth	r7, r7
 8009d00:	449e      	add	lr, r3
 8009d02:	441c      	add	r4, r3
 8009d04:	42ba      	cmp	r2, r7
 8009d06:	fa1f fe8e 	uxth.w	lr, lr
 8009d0a:	b2a4      	uxth	r4, r4
 8009d0c:	463b      	mov	r3, r7
 8009d0e:	dcb5      	bgt.n	8009c7c <pool_func_mp_array_f32+0x3a0>
 8009d10:	9b07      	ldr	r3, [sp, #28]
 8009d12:	9904      	ldr	r1, [sp, #16]
 8009d14:	3301      	adds	r3, #1
 8009d16:	b21a      	sxth	r2, r3
 8009d18:	9b01      	ldr	r3, [sp, #4]
 8009d1a:	9207      	str	r2, [sp, #28]
 8009d1c:	440b      	add	r3, r1
 8009d1e:	448c      	add	ip, r1
 8009d20:	9902      	ldr	r1, [sp, #8]
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	4291      	cmp	r1, r2
 8009d26:	9301      	str	r3, [sp, #4]
 8009d28:	fa1f fc8c 	uxth.w	ip, ip
 8009d2c:	4613      	mov	r3, r2
 8009d2e:	dc96      	bgt.n	8009c5e <pool_func_mp_array_f32+0x382>
 8009d30:	e681      	b.n	8009a36 <pool_func_mp_array_f32+0x15a>
 8009d32:	bf00      	nop

08009d34 <nl_func_relu_array_f32>:
 8009d34:	b430      	push	{r4, r5}
 8009d36:	698c      	ldr	r4, [r1, #24]
 8009d38:	6981      	ldr	r1, [r0, #24]
 8009d3a:	68a5      	ldr	r5, [r4, #8]
 8009d3c:	6889      	ldr	r1, [r1, #8]
 8009d3e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8009d42:	3a01      	subs	r2, #1
 8009d44:	0093      	lsls	r3, r2, #2
 8009d46:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8009d4a:	4295      	cmp	r5, r2
 8009d4c:	d814      	bhi.n	8009d78 <nl_func_relu_array_f32+0x44>
 8009d4e:	1d18      	adds	r0, r3, #4
 8009d50:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8009d7c <nl_func_relu_array_f32+0x48>
 8009d54:	1d13      	adds	r3, r2, #4
 8009d56:	4401      	add	r1, r0
 8009d58:	461a      	mov	r2, r3
 8009d5a:	ed73 7a01 	vldmdb	r3!, {s15}
 8009d5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d66:	bfb8      	it	lt
 8009d68:	eef0 7a47 	vmovlt.f32	s15, s14
 8009d6c:	ed61 7a01 	vstmdb	r1!, {s15}
 8009d70:	68a0      	ldr	r0, [r4, #8]
 8009d72:	3a08      	subs	r2, #8
 8009d74:	4290      	cmp	r0, r2
 8009d76:	d9ef      	bls.n	8009d58 <nl_func_relu_array_f32+0x24>
 8009d78:	bc30      	pop	{r4, r5}
 8009d7a:	4770      	bx	lr
 8009d7c:	00000000 	.word	0x00000000

08009d80 <nl_func_sm_channel_f32>:
 8009d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d84:	ed2d 8b02 	vpush	{d8}
 8009d88:	6989      	ldr	r1, [r1, #24]
 8009d8a:	6983      	ldr	r3, [r0, #24]
 8009d8c:	688d      	ldr	r5, [r1, #8]
 8009d8e:	689e      	ldr	r6, [r3, #8]
 8009d90:	ed95 8a00 	vldr	s16, [r5]
 8009d94:	2a01      	cmp	r2, #1
 8009d96:	4617      	mov	r7, r2
 8009d98:	d935      	bls.n	8009e06 <nl_func_sm_channel_f32+0x86>
 8009d9a:	1d2b      	adds	r3, r5, #4
 8009d9c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8009da0:	ecf3 7a01 	vldmia	r3!, {s15}
 8009da4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dac:	bfb8      	it	lt
 8009dae:	eeb0 8a67 	vmovlt.f32	s16, s15
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d1f4      	bne.n	8009da0 <nl_func_sm_channel_f32+0x20>
 8009db6:	eddf 8a17 	vldr	s17, [pc, #92]	; 8009e14 <nl_func_sm_channel_f32+0x94>
 8009dba:	46b0      	mov	r8, r6
 8009dbc:	2400      	movs	r4, #0
 8009dbe:	ecb5 0a01 	vldmia	r5!, {s0}
 8009dc2:	ee30 0a48 	vsub.f32	s0, s0, s16
 8009dc6:	f001 fb5d 	bl	800b484 <expf>
 8009dca:	3401      	adds	r4, #1
 8009dcc:	42a7      	cmp	r7, r4
 8009dce:	ee78 8a80 	vadd.f32	s17, s17, s0
 8009dd2:	eca8 0a01 	vstmia	r8!, {s0}
 8009dd6:	d8f2      	bhi.n	8009dbe <nl_func_sm_channel_f32+0x3e>
 8009dd8:	eef5 8a40 	vcmp.f32	s17, #0.0
 8009ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009de0:	d00d      	beq.n	8009dfe <nl_func_sm_channel_f32+0x7e>
 8009de2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009de6:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8009dea:	2300      	movs	r3, #0
 8009dec:	3301      	adds	r3, #1
 8009dee:	429f      	cmp	r7, r3
 8009df0:	edd6 7a00 	vldr	s15, [r6]
 8009df4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009df8:	ece6 7a01 	vstmia	r6!, {s15}
 8009dfc:	d8f6      	bhi.n	8009dec <nl_func_sm_channel_f32+0x6c>
 8009dfe:	ecbd 8b02 	vpop	{d8}
 8009e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e06:	2a00      	cmp	r2, #0
 8009e08:	d1d5      	bne.n	8009db6 <nl_func_sm_channel_f32+0x36>
 8009e0a:	ecbd 8b02 	vpop	{d8}
 8009e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e12:	bf00      	nop
 8009e14:	00000000 	.word	0x00000000

08009e18 <nl_func_relu_generic_array_f32>:
 8009e18:	b430      	push	{r4, r5}
 8009e1a:	edd3 6a02 	vldr	s13, [r3, #8]
 8009e1e:	ed93 7a00 	vldr	s14, [r3]
 8009e22:	ed93 6a01 	vldr	s12, [r3, #4]
 8009e26:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8009e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e2e:	d430      	bmi.n	8009e92 <nl_func_relu_generic_array_f32+0x7a>
 8009e30:	698c      	ldr	r4, [r1, #24]
 8009e32:	6981      	ldr	r1, [r0, #24]
 8009e34:	68a5      	ldr	r5, [r4, #8]
 8009e36:	6889      	ldr	r1, [r1, #8]
 8009e38:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	009a      	lsls	r2, r3, #2
 8009e40:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009e44:	429d      	cmp	r5, r3
 8009e46:	d822      	bhi.n	8009e8e <nl_func_relu_generic_array_f32+0x76>
 8009e48:	3204      	adds	r2, #4
 8009e4a:	3304      	adds	r3, #4
 8009e4c:	4411      	add	r1, r2
 8009e4e:	e00e      	b.n	8009e6e <nl_func_relu_generic_array_f32+0x56>
 8009e50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e58:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8009e5c:	db01      	blt.n	8009e62 <nl_func_relu_generic_array_f32+0x4a>
 8009e5e:	ee65 7a86 	vmul.f32	s15, s11, s12
 8009e62:	ed61 7a01 	vstmdb	r1!, {s15}
 8009e66:	68a0      	ldr	r0, [r4, #8]
 8009e68:	3a08      	subs	r2, #8
 8009e6a:	4290      	cmp	r0, r2
 8009e6c:	d80f      	bhi.n	8009e8e <nl_func_relu_generic_array_f32+0x76>
 8009e6e:	461a      	mov	r2, r3
 8009e70:	ed73 7a01 	vldmdb	r3!, {s15}
 8009e74:	eef4 6ae7 	vcmpe.f32	s13, s15
 8009e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e7c:	dae8      	bge.n	8009e50 <nl_func_relu_generic_array_f32+0x38>
 8009e7e:	eef0 7a66 	vmov.f32	s15, s13
 8009e82:	ed61 7a01 	vstmdb	r1!, {s15}
 8009e86:	68a0      	ldr	r0, [r4, #8]
 8009e88:	3a08      	subs	r2, #8
 8009e8a:	4290      	cmp	r0, r2
 8009e8c:	d9ef      	bls.n	8009e6e <nl_func_relu_generic_array_f32+0x56>
 8009e8e:	bc30      	pop	{r4, r5}
 8009e90:	4770      	bx	lr
 8009e92:	698c      	ldr	r4, [r1, #24]
 8009e94:	6981      	ldr	r1, [r0, #24]
 8009e96:	68a5      	ldr	r5, [r4, #8]
 8009e98:	6889      	ldr	r1, [r1, #8]
 8009e9a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8009e9e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8009ea2:	3a01      	subs	r2, #1
 8009ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ea8:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8009eac:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8009eb0:	d01b      	beq.n	8009eea <nl_func_relu_generic_array_f32+0xd2>
 8009eb2:	4295      	cmp	r5, r2
 8009eb4:	d8eb      	bhi.n	8009e8e <nl_func_relu_generic_array_f32+0x76>
 8009eb6:	1d18      	adds	r0, r3, #4
 8009eb8:	1d13      	adds	r3, r2, #4
 8009eba:	180a      	adds	r2, r1, r0
 8009ebc:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009ec0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8009ec4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ec8:	f1a3 0008 	sub.w	r0, r3, #8
 8009ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ed0:	f1a3 0104 	sub.w	r1, r3, #4
 8009ed4:	ee66 6a86 	vmul.f32	s13, s13, s12
 8009ed8:	4603      	mov	r3, r0
 8009eda:	d81f      	bhi.n	8009f1c <nl_func_relu_generic_array_f32+0x104>
 8009edc:	ed62 6a01 	vstmdb	r2!, {s13}
 8009ee0:	68a3      	ldr	r3, [r4, #8]
 8009ee2:	4283      	cmp	r3, r0
 8009ee4:	d8d3      	bhi.n	8009e8e <nl_func_relu_generic_array_f32+0x76>
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	e7e8      	b.n	8009ebc <nl_func_relu_generic_array_f32+0xa4>
 8009eea:	4295      	cmp	r5, r2
 8009eec:	d8cf      	bhi.n	8009e8e <nl_func_relu_generic_array_f32+0x76>
 8009eee:	1d18      	adds	r0, r3, #4
 8009ef0:	2500      	movs	r5, #0
 8009ef2:	1d13      	adds	r3, r2, #4
 8009ef4:	180a      	adds	r2, r1, r0
 8009ef6:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009efa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009efe:	f1a3 0008 	sub.w	r0, r3, #8
 8009f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f06:	f1a3 0104 	sub.w	r1, r3, #4
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	dc0d      	bgt.n	8009f2a <nl_func_relu_generic_array_f32+0x112>
 8009f0e:	f842 5d04 	str.w	r5, [r2, #-4]!
 8009f12:	68a3      	ldr	r3, [r4, #8]
 8009f14:	4283      	cmp	r3, r0
 8009f16:	d8ba      	bhi.n	8009e8e <nl_func_relu_generic_array_f32+0x76>
 8009f18:	460b      	mov	r3, r1
 8009f1a:	e7ec      	b.n	8009ef6 <nl_func_relu_generic_array_f32+0xde>
 8009f1c:	ed62 7a01 	vstmdb	r2!, {s15}
 8009f20:	68a0      	ldr	r0, [r4, #8]
 8009f22:	4298      	cmp	r0, r3
 8009f24:	d8b3      	bhi.n	8009e8e <nl_func_relu_generic_array_f32+0x76>
 8009f26:	460b      	mov	r3, r1
 8009f28:	e7c8      	b.n	8009ebc <nl_func_relu_generic_array_f32+0xa4>
 8009f2a:	ed62 7a01 	vstmdb	r2!, {s15}
 8009f2e:	68a0      	ldr	r0, [r4, #8]
 8009f30:	4298      	cmp	r0, r3
 8009f32:	d8ac      	bhi.n	8009e8e <nl_func_relu_generic_array_f32+0x76>
 8009f34:	460b      	mov	r3, r1
 8009f36:	e7de      	b.n	8009ef6 <nl_func_relu_generic_array_f32+0xde>

08009f38 <forward_relu>:
 8009f38:	6982      	ldr	r2, [r0, #24]
 8009f3a:	8813      	ldrh	r3, [r2, #0]
 8009f3c:	b30b      	cbz	r3, 8009f82 <forward_relu+0x4a>
 8009f3e:	6852      	ldr	r2, [r2, #4]
 8009f40:	6851      	ldr	r1, [r2, #4]
 8009f42:	b101      	cbz	r1, 8009f46 <forward_relu+0xe>
 8009f44:	6809      	ldr	r1, [r1, #0]
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	f000 8094 	beq.w	800a074 <forward_relu+0x13c>
 8009f4c:	b470      	push	{r4, r5, r6}
 8009f4e:	6916      	ldr	r6, [r2, #16]
 8009f50:	b106      	cbz	r6, 8009f54 <forward_relu+0x1c>
 8009f52:	6836      	ldr	r6, [r6, #0]
 8009f54:	69c0      	ldr	r0, [r0, #28]
 8009f56:	b1b0      	cbz	r0, 8009f86 <forward_relu+0x4e>
 8009f58:	6843      	ldr	r3, [r0, #4]
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d043      	beq.n	8009fe6 <forward_relu+0xae>
 8009f5e:	688b      	ldr	r3, [r1, #8]
 8009f60:	0a1b      	lsrs	r3, r3, #8
 8009f62:	d078      	beq.n	800a056 <forward_relu+0x11e>
 8009f64:	68cd      	ldr	r5, [r1, #12]
 8009f66:	2201      	movs	r2, #1
 8009f68:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009f6c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8009f70:	42ab      	cmp	r3, r5
 8009f72:	fb04 f202 	mul.w	r2, r4, r2
 8009f76:	d1f9      	bne.n	8009f6c <forward_relu+0x34>
 8009f78:	6883      	ldr	r3, [r0, #8]
 8009f7a:	4630      	mov	r0, r6
 8009f7c:	bc70      	pop	{r4, r5, r6}
 8009f7e:	f7ff bf4b 	b.w	8009e18 <nl_func_relu_generic_array_f32>
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	deff      	udf	#255	; 0xff
 8009f86:	688b      	ldr	r3, [r1, #8]
 8009f88:	0a1b      	lsrs	r3, r3, #8
 8009f8a:	d066      	beq.n	800a05a <forward_relu+0x122>
 8009f8c:	68cc      	ldr	r4, [r1, #12]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f94:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8009f98:	429c      	cmp	r4, r3
 8009f9a:	fb00 f202 	mul.w	r2, r0, r2
 8009f9e:	d1f9      	bne.n	8009f94 <forward_relu+0x5c>
 8009fa0:	698c      	ldr	r4, [r1, #24]
 8009fa2:	69b1      	ldr	r1, [r6, #24]
 8009fa4:	68a0      	ldr	r0, [r4, #8]
 8009fa6:	6889      	ldr	r1, [r1, #8]
 8009fa8:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8009fac:	3b01      	subs	r3, #1
 8009fae:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8009fb2:	4290      	cmp	r0, r2
 8009fb4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8009fb8:	d813      	bhi.n	8009fe2 <forward_relu+0xaa>
 8009fba:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800a07c <forward_relu+0x144>
 8009fbe:	3204      	adds	r2, #4
 8009fc0:	3104      	adds	r1, #4
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	ed72 7a01 	vldmdb	r2!, {s15}
 8009fc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fd0:	bfb8      	it	lt
 8009fd2:	eef0 7a47 	vmovlt.f32	s15, s14
 8009fd6:	ed61 7a01 	vstmdb	r1!, {s15}
 8009fda:	68a0      	ldr	r0, [r4, #8]
 8009fdc:	3b08      	subs	r3, #8
 8009fde:	4298      	cmp	r0, r3
 8009fe0:	d9ef      	bls.n	8009fc2 <forward_relu+0x8a>
 8009fe2:	bc70      	pop	{r4, r5, r6}
 8009fe4:	4770      	bx	lr
 8009fe6:	688a      	ldr	r2, [r1, #8]
 8009fe8:	0a12      	lsrs	r2, r2, #8
 8009fea:	d03b      	beq.n	800a064 <forward_relu+0x12c>
 8009fec:	68cd      	ldr	r5, [r1, #12]
 8009fee:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8009ff2:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8009ff6:	4295      	cmp	r5, r2
 8009ff8:	fb04 f303 	mul.w	r3, r4, r3
 8009ffc:	d1f9      	bne.n	8009ff2 <forward_relu+0xba>
 8009ffe:	698c      	ldr	r4, [r1, #24]
 800a000:	69b2      	ldr	r2, [r6, #24]
 800a002:	68a1      	ldr	r1, [r4, #8]
 800a004:	6892      	ldr	r2, [r2, #8]
 800a006:	6880      	ldr	r0, [r0, #8]
 800a008:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a00c:	3b01      	subs	r3, #1
 800a00e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a012:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a016:	4299      	cmp	r1, r3
 800a018:	ed90 7a00 	vldr	s14, [r0]
 800a01c:	d8e1      	bhi.n	8009fe2 <forward_relu+0xaa>
 800a01e:	2500      	movs	r5, #0
 800a020:	3304      	adds	r3, #4
 800a022:	3204      	adds	r2, #4
 800a024:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a028:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a02c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a030:	f1a3 0104 	sub.w	r1, r3, #4
 800a034:	d507      	bpl.n	800a046 <forward_relu+0x10e>
 800a036:	ed62 7a01 	vstmdb	r2!, {s15}
 800a03a:	68a0      	ldr	r0, [r4, #8]
 800a03c:	3b08      	subs	r3, #8
 800a03e:	4298      	cmp	r0, r3
 800a040:	d8cf      	bhi.n	8009fe2 <forward_relu+0xaa>
 800a042:	460b      	mov	r3, r1
 800a044:	e7ee      	b.n	800a024 <forward_relu+0xec>
 800a046:	f842 5d04 	str.w	r5, [r2, #-4]!
 800a04a:	68a0      	ldr	r0, [r4, #8]
 800a04c:	3b08      	subs	r3, #8
 800a04e:	4298      	cmp	r0, r3
 800a050:	d8c7      	bhi.n	8009fe2 <forward_relu+0xaa>
 800a052:	460b      	mov	r3, r1
 800a054:	e7e6      	b.n	800a024 <forward_relu+0xec>
 800a056:	2201      	movs	r2, #1
 800a058:	e78e      	b.n	8009f78 <forward_relu+0x40>
 800a05a:	698c      	ldr	r4, [r1, #24]
 800a05c:	69b3      	ldr	r3, [r6, #24]
 800a05e:	68a2      	ldr	r2, [r4, #8]
 800a060:	6899      	ldr	r1, [r3, #8]
 800a062:	e7aa      	b.n	8009fba <forward_relu+0x82>
 800a064:	6883      	ldr	r3, [r0, #8]
 800a066:	698c      	ldr	r4, [r1, #24]
 800a068:	69b2      	ldr	r2, [r6, #24]
 800a06a:	ed93 7a00 	vldr	s14, [r3]
 800a06e:	6892      	ldr	r2, [r2, #8]
 800a070:	68a3      	ldr	r3, [r4, #8]
 800a072:	e7d4      	b.n	800a01e <forward_relu+0xe6>
 800a074:	2300      	movs	r3, #0
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	deff      	udf	#255	; 0xff
 800a07a:	bf00      	nop
 800a07c:	00000000 	.word	0x00000000

0800a080 <forward_sm>:
 800a080:	6982      	ldr	r2, [r0, #24]
 800a082:	8813      	ldrh	r3, [r2, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d054      	beq.n	800a132 <forward_sm+0xb2>
 800a088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08c:	6852      	ldr	r2, [r2, #4]
 800a08e:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800a092:	b083      	sub	sp, #12
 800a094:	f1b8 0f00 	cmp.w	r8, #0
 800a098:	d001      	beq.n	800a09e <forward_sm+0x1e>
 800a09a:	f8d8 8000 	ldr.w	r8, [r8]
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d04b      	beq.n	800a13a <forward_sm+0xba>
 800a0a2:	6913      	ldr	r3, [r2, #16]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d04b      	beq.n	800a140 <forward_sm+0xc0>
 800a0a8:	6818      	ldr	r0, [r3, #0]
 800a0aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0ae:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800a0b2:	68c2      	ldr	r2, [r0, #12]
 800a0b4:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800a0b8:	6857      	ldr	r7, [r2, #4]
 800a0ba:	0a1b      	lsrs	r3, r3, #8
 800a0bc:	d03b      	beq.n	800a136 <forward_sm+0xb6>
 800a0be:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a0c8:	429c      	cmp	r4, r3
 800a0ca:	fb01 f202 	mul.w	r2, r1, r2
 800a0ce:	d1f9      	bne.n	800a0c4 <forward_sm+0x44>
 800a0d0:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800a0d4:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800a0d8:	68b4      	ldr	r4, [r6, #8]
 800a0da:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800a0de:	eba2 030a 	sub.w	r3, r2, sl
 800a0e2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800a0e6:	68f3      	ldr	r3, [r6, #12]
 800a0e8:	1bd2      	subs	r2, r2, r7
 800a0ea:	429c      	cmp	r4, r3
 800a0ec:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800a0f0:	d317      	bcc.n	800a122 <forward_sm+0xa2>
 800a0f2:	00bf      	lsls	r7, r7, #2
 800a0f4:	427f      	negs	r7, r7
 800a0f6:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
 800a0fa:	4652      	mov	r2, sl
 800a0fc:	f1cb 0b00 	rsb	fp, fp, #0
 800a100:	46ba      	mov	sl, r7
 800a102:	4607      	mov	r7, r0
 800a104:	60b4      	str	r4, [r6, #8]
 800a106:	2300      	movs	r3, #0
 800a108:	f8c9 5008 	str.w	r5, [r9, #8]
 800a10c:	4641      	mov	r1, r8
 800a10e:	4638      	mov	r0, r7
 800a110:	9201      	str	r2, [sp, #4]
 800a112:	f7ff fe35 	bl	8009d80 <nl_func_sm_channel_f32>
 800a116:	68f3      	ldr	r3, [r6, #12]
 800a118:	9a01      	ldr	r2, [sp, #4]
 800a11a:	445c      	add	r4, fp
 800a11c:	429c      	cmp	r4, r3
 800a11e:	4455      	add	r5, sl
 800a120:	d2f0      	bcs.n	800a104 <forward_sm+0x84>
 800a122:	60b3      	str	r3, [r6, #8]
 800a124:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800a128:	f8c9 3008 	str.w	r3, [r9, #8]
 800a12c:	b003      	add	sp, #12
 800a12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	deff      	udf	#255	; 0xff
 800a136:	2201      	movs	r2, #1
 800a138:	e7ca      	b.n	800a0d0 <forward_sm+0x50>
 800a13a:	2300      	movs	r3, #0
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	deff      	udf	#255	; 0xff
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	deff      	udf	#255	; 0xff

0800a144 <ai_check_custom_types>:
 800a144:	b082      	sub	sp, #8
 800a146:	4b13      	ldr	r3, [pc, #76]	; (800a194 <ai_check_custom_types+0x50>)
 800a148:	9301      	str	r3, [sp, #4]
 800a14a:	b118      	cbz	r0, 800a154 <ai_check_custom_types+0x10>
 800a14c:	7803      	ldrb	r3, [r0, #0]
 800a14e:	2b03      	cmp	r3, #3
 800a150:	d002      	beq.n	800a158 <ai_check_custom_types+0x14>
 800a152:	2000      	movs	r0, #0
 800a154:	b002      	add	sp, #8
 800a156:	4770      	bx	lr
 800a158:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d004      	beq.n	800a16a <ai_check_custom_types+0x26>
 800a160:	2001      	movs	r0, #1
 800a162:	f080 0001 	eor.w	r0, r0, #1
 800a166:	b002      	add	sp, #8
 800a168:	4770      	bx	lr
 800a16a:	7842      	ldrb	r2, [r0, #1]
 800a16c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a170:	429a      	cmp	r2, r3
 800a172:	f100 0001 	add.w	r0, r0, #1
 800a176:	d1f3      	bne.n	800a160 <ai_check_custom_types+0x1c>
 800a178:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800a17c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a180:	429a      	cmp	r2, r3
 800a182:	d1ed      	bne.n	800a160 <ai_check_custom_types+0x1c>
 800a184:	7842      	ldrb	r2, [r0, #1]
 800a186:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d1e8      	bne.n	800a160 <ai_check_custom_types+0x1c>
 800a18e:	2000      	movs	r0, #0
 800a190:	e7e7      	b.n	800a162 <ai_check_custom_types+0x1e>
 800a192:	bf00      	nop
 800a194:	84048403 	.word	0x84048403

0800a198 <ai_layers_init_all>:
 800a198:	4601      	mov	r1, r0
 800a19a:	2000      	movs	r0, #0
 800a19c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a19e:	b143      	cbz	r3, 800a1b2 <ai_layers_init_all+0x1a>
 800a1a0:	691a      	ldr	r2, [r3, #16]
 800a1a2:	60d9      	str	r1, [r3, #12]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	f100 0001 	add.w	r0, r0, #1
 800a1aa:	d002      	beq.n	800a1b2 <ai_layers_init_all+0x1a>
 800a1ac:	b10a      	cbz	r2, 800a1b2 <ai_layers_init_all+0x1a>
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	e7f5      	b.n	800a19e <ai_layers_init_all+0x6>
 800a1b2:	4770      	bx	lr

0800a1b4 <ai_layers_post_init_all>:
 800a1b4:	b538      	push	{r3, r4, r5, lr}
 800a1b6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a1b8:	2500      	movs	r5, #0
 800a1ba:	b16c      	cbz	r4, 800a1d8 <ai_layers_post_init_all+0x24>
 800a1bc:	6863      	ldr	r3, [r4, #4]
 800a1be:	07db      	lsls	r3, r3, #31
 800a1c0:	d504      	bpl.n	800a1cc <ai_layers_post_init_all+0x18>
 800a1c2:	6a23      	ldr	r3, [r4, #32]
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	b10b      	cbz	r3, 800a1cc <ai_layers_post_init_all+0x18>
 800a1c8:	4798      	blx	r3
 800a1ca:	3501      	adds	r5, #1
 800a1cc:	6923      	ldr	r3, [r4, #16]
 800a1ce:	42a3      	cmp	r3, r4
 800a1d0:	d002      	beq.n	800a1d8 <ai_layers_post_init_all+0x24>
 800a1d2:	b10b      	cbz	r3, 800a1d8 <ai_layers_post_init_all+0x24>
 800a1d4:	461c      	mov	r4, r3
 800a1d6:	e7f0      	b.n	800a1ba <ai_layers_post_init_all+0x6>
 800a1d8:	4628      	mov	r0, r5
 800a1da:	bd38      	pop	{r3, r4, r5, pc}

0800a1dc <ai_layers_forward_all>:
 800a1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e0:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	2f00      	cmp	r7, #0
 800a1e6:	d02d      	beq.n	800a244 <ai_layers_forward_all+0x68>
 800a1e8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800a1ea:	b1e9      	cbz	r1, 800a228 <ai_layers_forward_all+0x4c>
 800a1ec:	6381      	str	r1, [r0, #56]	; 0x38
 800a1ee:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a1f0:	2001      	movs	r0, #1
 800a1f2:	47b8      	blx	r7
 800a1f4:	2600      	movs	r6, #0
 800a1f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a1f8:	46b0      	mov	r8, r6
 800a1fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a1fc:	2002      	movs	r0, #2
 800a1fe:	47b8      	blx	r7
 800a200:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800a202:	696b      	ldr	r3, [r5, #20]
 800a204:	4628      	mov	r0, r5
 800a206:	4798      	blx	r3
 800a208:	692b      	ldr	r3, [r5, #16]
 800a20a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a20c:	429d      	cmp	r5, r3
 800a20e:	f04f 0003 	mov.w	r0, #3
 800a212:	4619      	mov	r1, r3
 800a214:	d00c      	beq.n	800a230 <ai_layers_forward_all+0x54>
 800a216:	63a3      	str	r3, [r4, #56]	; 0x38
 800a218:	47b8      	blx	r7
 800a21a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a21c:	3601      	adds	r6, #1
 800a21e:	2900      	cmp	r1, #0
 800a220:	d1eb      	bne.n	800a1fa <ai_layers_forward_all+0x1e>
 800a222:	4630      	mov	r0, r6
 800a224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a228:	460e      	mov	r6, r1
 800a22a:	4630      	mov	r0, r6
 800a22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a230:	2100      	movs	r1, #0
 800a232:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800a236:	2003      	movs	r0, #3
 800a238:	47b8      	blx	r7
 800a23a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a23c:	3601      	adds	r6, #1
 800a23e:	2900      	cmp	r1, #0
 800a240:	d1db      	bne.n	800a1fa <ai_layers_forward_all+0x1e>
 800a242:	e7ee      	b.n	800a222 <ai_layers_forward_all+0x46>
 800a244:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800a246:	b19d      	cbz	r5, 800a270 <ai_layers_forward_all+0x94>
 800a248:	6385      	str	r5, [r0, #56]	; 0x38
 800a24a:	463e      	mov	r6, r7
 800a24c:	e003      	b.n	800a256 <ai_layers_forward_all+0x7a>
 800a24e:	63a5      	str	r5, [r4, #56]	; 0x38
 800a250:	3601      	adds	r6, #1
 800a252:	2d00      	cmp	r5, #0
 800a254:	d0e5      	beq.n	800a222 <ai_layers_forward_all+0x46>
 800a256:	696b      	ldr	r3, [r5, #20]
 800a258:	4628      	mov	r0, r5
 800a25a:	4798      	blx	r3
 800a25c:	462b      	mov	r3, r5
 800a25e:	692d      	ldr	r5, [r5, #16]
 800a260:	429d      	cmp	r5, r3
 800a262:	d1f4      	bne.n	800a24e <ai_layers_forward_all+0x72>
 800a264:	2300      	movs	r3, #0
 800a266:	3601      	adds	r6, #1
 800a268:	63a3      	str	r3, [r4, #56]	; 0x38
 800a26a:	4630      	mov	r0, r6
 800a26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a270:	462e      	mov	r6, r5
 800a272:	e7d6      	b.n	800a222 <ai_layers_forward_all+0x46>

0800a274 <ai_version_get>:
 800a274:	0212      	lsls	r2, r2, #8
 800a276:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a27a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800a27e:	4770      	bx	lr

0800a280 <get_tensor_byte_size>:
 800a280:	b410      	push	{r4}
 800a282:	6983      	ldr	r3, [r0, #24]
 800a284:	68c4      	ldr	r4, [r0, #12]
 800a286:	6941      	ldr	r1, [r0, #20]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	68e0      	ldr	r0, [r4, #12]
 800a28c:	4a07      	ldr	r2, [pc, #28]	; (800a2ac <get_tensor_byte_size+0x2c>)
 800a28e:	68c9      	ldr	r1, [r1, #12]
 800a290:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a294:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800a298:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a29c:	fb01 f000 	mul.w	r0, r1, r0
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	bf04      	itt	eq
 800a2a4:	3007      	addeq	r0, #7
 800a2a6:	08c0      	lsreq	r0, r0, #3
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	000400c0 	.word	0x000400c0

0800a2b0 <ai_array_to_buffer_fmt>:
 800a2b0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800a2b4:	2b02      	cmp	r3, #2
 800a2b6:	d050      	beq.n	800a35a <ai_array_to_buffer_fmt+0xaa>
 800a2b8:	4b2a      	ldr	r3, [pc, #168]	; (800a364 <ai_array_to_buffer_fmt+0xb4>)
 800a2ba:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d00b      	beq.n	800a2da <ai_array_to_buffer_fmt+0x2a>
 800a2c2:	dc1c      	bgt.n	800a2fe <ai_array_to_buffer_fmt+0x4e>
 800a2c4:	4b28      	ldr	r3, [pc, #160]	; (800a368 <ai_array_to_buffer_fmt+0xb8>)
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d007      	beq.n	800a2da <ai_array_to_buffer_fmt+0x2a>
 800a2ca:	dd0b      	ble.n	800a2e4 <ai_array_to_buffer_fmt+0x34>
 800a2cc:	4b27      	ldr	r3, [pc, #156]	; (800a36c <ai_array_to_buffer_fmt+0xbc>)
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d003      	beq.n	800a2da <ai_array_to_buffer_fmt+0x2a>
 800a2d2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d131      	bne.n	800a33e <ai_array_to_buffer_fmt+0x8e>
 800a2da:	4613      	mov	r3, r2
 800a2dc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a2e0:	4318      	orrs	r0, r3
 800a2e2:	4770      	bx	lr
 800a2e4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d0f6      	beq.n	800a2da <ai_array_to_buffer_fmt+0x2a>
 800a2ec:	dd2c      	ble.n	800a348 <ai_array_to_buffer_fmt+0x98>
 800a2ee:	4b20      	ldr	r3, [pc, #128]	; (800a370 <ai_array_to_buffer_fmt+0xc0>)
 800a2f0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	bf18      	it	ne
 800a2f8:	2340      	movne	r3, #64	; 0x40
 800a2fa:	4318      	orrs	r0, r3
 800a2fc:	4770      	bx	lr
 800a2fe:	4b1d      	ldr	r3, [pc, #116]	; (800a374 <ai_array_to_buffer_fmt+0xc4>)
 800a300:	429a      	cmp	r2, r3
 800a302:	d0ea      	beq.n	800a2da <ai_array_to_buffer_fmt+0x2a>
 800a304:	dd0e      	ble.n	800a324 <ai_array_to_buffer_fmt+0x74>
 800a306:	4b1c      	ldr	r3, [pc, #112]	; (800a378 <ai_array_to_buffer_fmt+0xc8>)
 800a308:	429a      	cmp	r2, r3
 800a30a:	d0e6      	beq.n	800a2da <ai_array_to_buffer_fmt+0x2a>
 800a30c:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800a310:	429a      	cmp	r2, r3
 800a312:	d0e2      	beq.n	800a2da <ai_array_to_buffer_fmt+0x2a>
 800a314:	4b19      	ldr	r3, [pc, #100]	; (800a37c <ai_array_to_buffer_fmt+0xcc>)
 800a316:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a31a:	429a      	cmp	r2, r3
 800a31c:	bf18      	it	ne
 800a31e:	2340      	movne	r3, #64	; 0x40
 800a320:	4318      	orrs	r0, r3
 800a322:	4770      	bx	lr
 800a324:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800a328:	429a      	cmp	r2, r3
 800a32a:	d0d6      	beq.n	800a2da <ai_array_to_buffer_fmt+0x2a>
 800a32c:	3307      	adds	r3, #7
 800a32e:	429a      	cmp	r2, r3
 800a330:	d0d3      	beq.n	800a2da <ai_array_to_buffer_fmt+0x2a>
 800a332:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800a336:	429a      	cmp	r2, r3
 800a338:	bf18      	it	ne
 800a33a:	2340      	movne	r3, #64	; 0x40
 800a33c:	e7ce      	b.n	800a2dc <ai_array_to_buffer_fmt+0x2c>
 800a33e:	4b10      	ldr	r3, [pc, #64]	; (800a380 <ai_array_to_buffer_fmt+0xd0>)
 800a340:	429a      	cmp	r2, r3
 800a342:	bf18      	it	ne
 800a344:	2340      	movne	r3, #64	; 0x40
 800a346:	e7c9      	b.n	800a2dc <ai_array_to_buffer_fmt+0x2c>
 800a348:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d0c4      	beq.n	800a2da <ai_array_to_buffer_fmt+0x2a>
 800a350:	3380      	adds	r3, #128	; 0x80
 800a352:	429a      	cmp	r2, r3
 800a354:	bf18      	it	ne
 800a356:	2340      	movne	r3, #64	; 0x40
 800a358:	e7c0      	b.n	800a2dc <ai_array_to_buffer_fmt+0x2c>
 800a35a:	4b0a      	ldr	r3, [pc, #40]	; (800a384 <ai_array_to_buffer_fmt+0xd4>)
 800a35c:	4003      	ands	r3, r0
 800a35e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a362:	e7bb      	b.n	800a2dc <ai_array_to_buffer_fmt+0x2c>
 800a364:	00840040 	.word	0x00840040
 800a368:	00040840 	.word	0x00040840
 800a36c:	00041040 	.word	0x00041040
 800a370:	00040447 	.word	0x00040447
 800a374:	00840840 	.word	0x00840840
 800a378:	00841040 	.word	0x00841040
 800a37c:	0084084f 	.word	0x0084084f
 800a380:	0004084f 	.word	0x0004084f
 800a384:	00803fff 	.word	0x00803fff

0800a388 <ai_array_get_byte_size>:
 800a388:	b319      	cbz	r1, 800a3d2 <ai_array_get_byte_size+0x4a>
 800a38a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800a38e:	fb03 f101 	mul.w	r1, r3, r1
 800a392:	3107      	adds	r1, #7
 800a394:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800a398:	f021 0307 	bic.w	r3, r1, #7
 800a39c:	2a04      	cmp	r2, #4
 800a39e:	f3c0 5141 	ubfx	r1, r0, #21, #2
 800a3a2:	fa23 f101 	lsr.w	r1, r3, r1
 800a3a6:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800a3aa:	d00b      	beq.n	800a3c4 <ai_array_get_byte_size+0x3c>
 800a3ac:	2a08      	cmp	r2, #8
 800a3ae:	d002      	beq.n	800a3b6 <ai_array_get_byte_size+0x2e>
 800a3b0:	3107      	adds	r1, #7
 800a3b2:	08c8      	lsrs	r0, r1, #3
 800a3b4:	4770      	bx	lr
 800a3b6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a3ba:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800a3be:	3107      	adds	r1, #7
 800a3c0:	08c8      	lsrs	r0, r1, #3
 800a3c2:	4770      	bx	lr
 800a3c4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a3c8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800a3cc:	3107      	adds	r1, #7
 800a3ce:	08c8      	lsrs	r0, r1, #3
 800a3d0:	4770      	bx	lr
 800a3d2:	4608      	mov	r0, r1
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop

0800a3d8 <ai_array_get_data_byte_size>:
 800a3d8:	b169      	cbz	r1, 800a3f6 <ai_array_get_data_byte_size+0x1e>
 800a3da:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800a3de:	fb02 f101 	mul.w	r1, r2, r1
 800a3e2:	1dcb      	adds	r3, r1, #7
 800a3e4:	f023 0307 	bic.w	r3, r3, #7
 800a3e8:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800a3ec:	fa23 f000 	lsr.w	r0, r3, r0
 800a3f0:	3007      	adds	r0, #7
 800a3f2:	08c0      	lsrs	r0, r0, #3
 800a3f4:	4770      	bx	lr
 800a3f6:	4608      	mov	r0, r1
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop

0800a3fc <__errno>:
 800a3fc:	4b01      	ldr	r3, [pc, #4]	; (800a404 <__errno+0x8>)
 800a3fe:	6818      	ldr	r0, [r3, #0]
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	20000ca8 	.word	0x20000ca8

0800a408 <__libc_init_array>:
 800a408:	b570      	push	{r4, r5, r6, lr}
 800a40a:	4d0d      	ldr	r5, [pc, #52]	; (800a440 <__libc_init_array+0x38>)
 800a40c:	4c0d      	ldr	r4, [pc, #52]	; (800a444 <__libc_init_array+0x3c>)
 800a40e:	1b64      	subs	r4, r4, r5
 800a410:	10a4      	asrs	r4, r4, #2
 800a412:	2600      	movs	r6, #0
 800a414:	42a6      	cmp	r6, r4
 800a416:	d109      	bne.n	800a42c <__libc_init_array+0x24>
 800a418:	4d0b      	ldr	r5, [pc, #44]	; (800a448 <__libc_init_array+0x40>)
 800a41a:	4c0c      	ldr	r4, [pc, #48]	; (800a44c <__libc_init_array+0x44>)
 800a41c:	f001 f996 	bl	800b74c <_init>
 800a420:	1b64      	subs	r4, r4, r5
 800a422:	10a4      	asrs	r4, r4, #2
 800a424:	2600      	movs	r6, #0
 800a426:	42a6      	cmp	r6, r4
 800a428:	d105      	bne.n	800a436 <__libc_init_array+0x2e>
 800a42a:	bd70      	pop	{r4, r5, r6, pc}
 800a42c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a430:	4798      	blx	r3
 800a432:	3601      	adds	r6, #1
 800a434:	e7ee      	b.n	800a414 <__libc_init_array+0xc>
 800a436:	f855 3b04 	ldr.w	r3, [r5], #4
 800a43a:	4798      	blx	r3
 800a43c:	3601      	adds	r6, #1
 800a43e:	e7f2      	b.n	800a426 <__libc_init_array+0x1e>
 800a440:	081d44a8 	.word	0x081d44a8
 800a444:	081d44a8 	.word	0x081d44a8
 800a448:	081d44a8 	.word	0x081d44a8
 800a44c:	081d44ac 	.word	0x081d44ac

0800a450 <memcpy>:
 800a450:	440a      	add	r2, r1
 800a452:	4291      	cmp	r1, r2
 800a454:	f100 33ff 	add.w	r3, r0, #4294967295
 800a458:	d100      	bne.n	800a45c <memcpy+0xc>
 800a45a:	4770      	bx	lr
 800a45c:	b510      	push	{r4, lr}
 800a45e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a462:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a466:	4291      	cmp	r1, r2
 800a468:	d1f9      	bne.n	800a45e <memcpy+0xe>
 800a46a:	bd10      	pop	{r4, pc}

0800a46c <memset>:
 800a46c:	4402      	add	r2, r0
 800a46e:	4603      	mov	r3, r0
 800a470:	4293      	cmp	r3, r2
 800a472:	d100      	bne.n	800a476 <memset+0xa>
 800a474:	4770      	bx	lr
 800a476:	f803 1b01 	strb.w	r1, [r3], #1
 800a47a:	e7f9      	b.n	800a470 <memset+0x4>

0800a47c <_free_r>:
 800a47c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a47e:	2900      	cmp	r1, #0
 800a480:	d044      	beq.n	800a50c <_free_r+0x90>
 800a482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a486:	9001      	str	r0, [sp, #4]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f1a1 0404 	sub.w	r4, r1, #4
 800a48e:	bfb8      	it	lt
 800a490:	18e4      	addlt	r4, r4, r3
 800a492:	f000 fc51 	bl	800ad38 <__malloc_lock>
 800a496:	4a1e      	ldr	r2, [pc, #120]	; (800a510 <_free_r+0x94>)
 800a498:	9801      	ldr	r0, [sp, #4]
 800a49a:	6813      	ldr	r3, [r2, #0]
 800a49c:	b933      	cbnz	r3, 800a4ac <_free_r+0x30>
 800a49e:	6063      	str	r3, [r4, #4]
 800a4a0:	6014      	str	r4, [r2, #0]
 800a4a2:	b003      	add	sp, #12
 800a4a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4a8:	f000 bc4c 	b.w	800ad44 <__malloc_unlock>
 800a4ac:	42a3      	cmp	r3, r4
 800a4ae:	d908      	bls.n	800a4c2 <_free_r+0x46>
 800a4b0:	6825      	ldr	r5, [r4, #0]
 800a4b2:	1961      	adds	r1, r4, r5
 800a4b4:	428b      	cmp	r3, r1
 800a4b6:	bf01      	itttt	eq
 800a4b8:	6819      	ldreq	r1, [r3, #0]
 800a4ba:	685b      	ldreq	r3, [r3, #4]
 800a4bc:	1949      	addeq	r1, r1, r5
 800a4be:	6021      	streq	r1, [r4, #0]
 800a4c0:	e7ed      	b.n	800a49e <_free_r+0x22>
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	b10b      	cbz	r3, 800a4cc <_free_r+0x50>
 800a4c8:	42a3      	cmp	r3, r4
 800a4ca:	d9fa      	bls.n	800a4c2 <_free_r+0x46>
 800a4cc:	6811      	ldr	r1, [r2, #0]
 800a4ce:	1855      	adds	r5, r2, r1
 800a4d0:	42a5      	cmp	r5, r4
 800a4d2:	d10b      	bne.n	800a4ec <_free_r+0x70>
 800a4d4:	6824      	ldr	r4, [r4, #0]
 800a4d6:	4421      	add	r1, r4
 800a4d8:	1854      	adds	r4, r2, r1
 800a4da:	42a3      	cmp	r3, r4
 800a4dc:	6011      	str	r1, [r2, #0]
 800a4de:	d1e0      	bne.n	800a4a2 <_free_r+0x26>
 800a4e0:	681c      	ldr	r4, [r3, #0]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	6053      	str	r3, [r2, #4]
 800a4e6:	4421      	add	r1, r4
 800a4e8:	6011      	str	r1, [r2, #0]
 800a4ea:	e7da      	b.n	800a4a2 <_free_r+0x26>
 800a4ec:	d902      	bls.n	800a4f4 <_free_r+0x78>
 800a4ee:	230c      	movs	r3, #12
 800a4f0:	6003      	str	r3, [r0, #0]
 800a4f2:	e7d6      	b.n	800a4a2 <_free_r+0x26>
 800a4f4:	6825      	ldr	r5, [r4, #0]
 800a4f6:	1961      	adds	r1, r4, r5
 800a4f8:	428b      	cmp	r3, r1
 800a4fa:	bf04      	itt	eq
 800a4fc:	6819      	ldreq	r1, [r3, #0]
 800a4fe:	685b      	ldreq	r3, [r3, #4]
 800a500:	6063      	str	r3, [r4, #4]
 800a502:	bf04      	itt	eq
 800a504:	1949      	addeq	r1, r1, r5
 800a506:	6021      	streq	r1, [r4, #0]
 800a508:	6054      	str	r4, [r2, #4]
 800a50a:	e7ca      	b.n	800a4a2 <_free_r+0x26>
 800a50c:	b003      	add	sp, #12
 800a50e:	bd30      	pop	{r4, r5, pc}
 800a510:	20028718 	.word	0x20028718

0800a514 <sbrk_aligned>:
 800a514:	b570      	push	{r4, r5, r6, lr}
 800a516:	4e0e      	ldr	r6, [pc, #56]	; (800a550 <sbrk_aligned+0x3c>)
 800a518:	460c      	mov	r4, r1
 800a51a:	6831      	ldr	r1, [r6, #0]
 800a51c:	4605      	mov	r5, r0
 800a51e:	b911      	cbnz	r1, 800a526 <sbrk_aligned+0x12>
 800a520:	f000 f91a 	bl	800a758 <_sbrk_r>
 800a524:	6030      	str	r0, [r6, #0]
 800a526:	4621      	mov	r1, r4
 800a528:	4628      	mov	r0, r5
 800a52a:	f000 f915 	bl	800a758 <_sbrk_r>
 800a52e:	1c43      	adds	r3, r0, #1
 800a530:	d00a      	beq.n	800a548 <sbrk_aligned+0x34>
 800a532:	1cc4      	adds	r4, r0, #3
 800a534:	f024 0403 	bic.w	r4, r4, #3
 800a538:	42a0      	cmp	r0, r4
 800a53a:	d007      	beq.n	800a54c <sbrk_aligned+0x38>
 800a53c:	1a21      	subs	r1, r4, r0
 800a53e:	4628      	mov	r0, r5
 800a540:	f000 f90a 	bl	800a758 <_sbrk_r>
 800a544:	3001      	adds	r0, #1
 800a546:	d101      	bne.n	800a54c <sbrk_aligned+0x38>
 800a548:	f04f 34ff 	mov.w	r4, #4294967295
 800a54c:	4620      	mov	r0, r4
 800a54e:	bd70      	pop	{r4, r5, r6, pc}
 800a550:	2002871c 	.word	0x2002871c

0800a554 <_malloc_r>:
 800a554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a558:	1ccd      	adds	r5, r1, #3
 800a55a:	f025 0503 	bic.w	r5, r5, #3
 800a55e:	3508      	adds	r5, #8
 800a560:	2d0c      	cmp	r5, #12
 800a562:	bf38      	it	cc
 800a564:	250c      	movcc	r5, #12
 800a566:	2d00      	cmp	r5, #0
 800a568:	4607      	mov	r7, r0
 800a56a:	db01      	blt.n	800a570 <_malloc_r+0x1c>
 800a56c:	42a9      	cmp	r1, r5
 800a56e:	d905      	bls.n	800a57c <_malloc_r+0x28>
 800a570:	230c      	movs	r3, #12
 800a572:	603b      	str	r3, [r7, #0]
 800a574:	2600      	movs	r6, #0
 800a576:	4630      	mov	r0, r6
 800a578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a57c:	4e2e      	ldr	r6, [pc, #184]	; (800a638 <_malloc_r+0xe4>)
 800a57e:	f000 fbdb 	bl	800ad38 <__malloc_lock>
 800a582:	6833      	ldr	r3, [r6, #0]
 800a584:	461c      	mov	r4, r3
 800a586:	bb34      	cbnz	r4, 800a5d6 <_malloc_r+0x82>
 800a588:	4629      	mov	r1, r5
 800a58a:	4638      	mov	r0, r7
 800a58c:	f7ff ffc2 	bl	800a514 <sbrk_aligned>
 800a590:	1c43      	adds	r3, r0, #1
 800a592:	4604      	mov	r4, r0
 800a594:	d14d      	bne.n	800a632 <_malloc_r+0xde>
 800a596:	6834      	ldr	r4, [r6, #0]
 800a598:	4626      	mov	r6, r4
 800a59a:	2e00      	cmp	r6, #0
 800a59c:	d140      	bne.n	800a620 <_malloc_r+0xcc>
 800a59e:	6823      	ldr	r3, [r4, #0]
 800a5a0:	4631      	mov	r1, r6
 800a5a2:	4638      	mov	r0, r7
 800a5a4:	eb04 0803 	add.w	r8, r4, r3
 800a5a8:	f000 f8d6 	bl	800a758 <_sbrk_r>
 800a5ac:	4580      	cmp	r8, r0
 800a5ae:	d13a      	bne.n	800a626 <_malloc_r+0xd2>
 800a5b0:	6821      	ldr	r1, [r4, #0]
 800a5b2:	3503      	adds	r5, #3
 800a5b4:	1a6d      	subs	r5, r5, r1
 800a5b6:	f025 0503 	bic.w	r5, r5, #3
 800a5ba:	3508      	adds	r5, #8
 800a5bc:	2d0c      	cmp	r5, #12
 800a5be:	bf38      	it	cc
 800a5c0:	250c      	movcc	r5, #12
 800a5c2:	4629      	mov	r1, r5
 800a5c4:	4638      	mov	r0, r7
 800a5c6:	f7ff ffa5 	bl	800a514 <sbrk_aligned>
 800a5ca:	3001      	adds	r0, #1
 800a5cc:	d02b      	beq.n	800a626 <_malloc_r+0xd2>
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	442b      	add	r3, r5
 800a5d2:	6023      	str	r3, [r4, #0]
 800a5d4:	e00e      	b.n	800a5f4 <_malloc_r+0xa0>
 800a5d6:	6822      	ldr	r2, [r4, #0]
 800a5d8:	1b52      	subs	r2, r2, r5
 800a5da:	d41e      	bmi.n	800a61a <_malloc_r+0xc6>
 800a5dc:	2a0b      	cmp	r2, #11
 800a5de:	d916      	bls.n	800a60e <_malloc_r+0xba>
 800a5e0:	1961      	adds	r1, r4, r5
 800a5e2:	42a3      	cmp	r3, r4
 800a5e4:	6025      	str	r5, [r4, #0]
 800a5e6:	bf18      	it	ne
 800a5e8:	6059      	strne	r1, [r3, #4]
 800a5ea:	6863      	ldr	r3, [r4, #4]
 800a5ec:	bf08      	it	eq
 800a5ee:	6031      	streq	r1, [r6, #0]
 800a5f0:	5162      	str	r2, [r4, r5]
 800a5f2:	604b      	str	r3, [r1, #4]
 800a5f4:	4638      	mov	r0, r7
 800a5f6:	f104 060b 	add.w	r6, r4, #11
 800a5fa:	f000 fba3 	bl	800ad44 <__malloc_unlock>
 800a5fe:	f026 0607 	bic.w	r6, r6, #7
 800a602:	1d23      	adds	r3, r4, #4
 800a604:	1af2      	subs	r2, r6, r3
 800a606:	d0b6      	beq.n	800a576 <_malloc_r+0x22>
 800a608:	1b9b      	subs	r3, r3, r6
 800a60a:	50a3      	str	r3, [r4, r2]
 800a60c:	e7b3      	b.n	800a576 <_malloc_r+0x22>
 800a60e:	6862      	ldr	r2, [r4, #4]
 800a610:	42a3      	cmp	r3, r4
 800a612:	bf0c      	ite	eq
 800a614:	6032      	streq	r2, [r6, #0]
 800a616:	605a      	strne	r2, [r3, #4]
 800a618:	e7ec      	b.n	800a5f4 <_malloc_r+0xa0>
 800a61a:	4623      	mov	r3, r4
 800a61c:	6864      	ldr	r4, [r4, #4]
 800a61e:	e7b2      	b.n	800a586 <_malloc_r+0x32>
 800a620:	4634      	mov	r4, r6
 800a622:	6876      	ldr	r6, [r6, #4]
 800a624:	e7b9      	b.n	800a59a <_malloc_r+0x46>
 800a626:	230c      	movs	r3, #12
 800a628:	603b      	str	r3, [r7, #0]
 800a62a:	4638      	mov	r0, r7
 800a62c:	f000 fb8a 	bl	800ad44 <__malloc_unlock>
 800a630:	e7a1      	b.n	800a576 <_malloc_r+0x22>
 800a632:	6025      	str	r5, [r4, #0]
 800a634:	e7de      	b.n	800a5f4 <_malloc_r+0xa0>
 800a636:	bf00      	nop
 800a638:	20028718 	.word	0x20028718

0800a63c <iprintf>:
 800a63c:	b40f      	push	{r0, r1, r2, r3}
 800a63e:	4b0a      	ldr	r3, [pc, #40]	; (800a668 <iprintf+0x2c>)
 800a640:	b513      	push	{r0, r1, r4, lr}
 800a642:	681c      	ldr	r4, [r3, #0]
 800a644:	b124      	cbz	r4, 800a650 <iprintf+0x14>
 800a646:	69a3      	ldr	r3, [r4, #24]
 800a648:	b913      	cbnz	r3, 800a650 <iprintf+0x14>
 800a64a:	4620      	mov	r0, r4
 800a64c:	f000 fa6e 	bl	800ab2c <__sinit>
 800a650:	ab05      	add	r3, sp, #20
 800a652:	9a04      	ldr	r2, [sp, #16]
 800a654:	68a1      	ldr	r1, [r4, #8]
 800a656:	9301      	str	r3, [sp, #4]
 800a658:	4620      	mov	r0, r4
 800a65a:	f000 fba3 	bl	800ada4 <_vfiprintf_r>
 800a65e:	b002      	add	sp, #8
 800a660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a664:	b004      	add	sp, #16
 800a666:	4770      	bx	lr
 800a668:	20000ca8 	.word	0x20000ca8

0800a66c <_puts_r>:
 800a66c:	b570      	push	{r4, r5, r6, lr}
 800a66e:	460e      	mov	r6, r1
 800a670:	4605      	mov	r5, r0
 800a672:	b118      	cbz	r0, 800a67c <_puts_r+0x10>
 800a674:	6983      	ldr	r3, [r0, #24]
 800a676:	b90b      	cbnz	r3, 800a67c <_puts_r+0x10>
 800a678:	f000 fa58 	bl	800ab2c <__sinit>
 800a67c:	69ab      	ldr	r3, [r5, #24]
 800a67e:	68ac      	ldr	r4, [r5, #8]
 800a680:	b913      	cbnz	r3, 800a688 <_puts_r+0x1c>
 800a682:	4628      	mov	r0, r5
 800a684:	f000 fa52 	bl	800ab2c <__sinit>
 800a688:	4b2c      	ldr	r3, [pc, #176]	; (800a73c <_puts_r+0xd0>)
 800a68a:	429c      	cmp	r4, r3
 800a68c:	d120      	bne.n	800a6d0 <_puts_r+0x64>
 800a68e:	686c      	ldr	r4, [r5, #4]
 800a690:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a692:	07db      	lsls	r3, r3, #31
 800a694:	d405      	bmi.n	800a6a2 <_puts_r+0x36>
 800a696:	89a3      	ldrh	r3, [r4, #12]
 800a698:	0598      	lsls	r0, r3, #22
 800a69a:	d402      	bmi.n	800a6a2 <_puts_r+0x36>
 800a69c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a69e:	f000 fae3 	bl	800ac68 <__retarget_lock_acquire_recursive>
 800a6a2:	89a3      	ldrh	r3, [r4, #12]
 800a6a4:	0719      	lsls	r1, r3, #28
 800a6a6:	d51d      	bpl.n	800a6e4 <_puts_r+0x78>
 800a6a8:	6923      	ldr	r3, [r4, #16]
 800a6aa:	b1db      	cbz	r3, 800a6e4 <_puts_r+0x78>
 800a6ac:	3e01      	subs	r6, #1
 800a6ae:	68a3      	ldr	r3, [r4, #8]
 800a6b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	60a3      	str	r3, [r4, #8]
 800a6b8:	bb39      	cbnz	r1, 800a70a <_puts_r+0x9e>
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	da38      	bge.n	800a730 <_puts_r+0xc4>
 800a6be:	4622      	mov	r2, r4
 800a6c0:	210a      	movs	r1, #10
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f000 f858 	bl	800a778 <__swbuf_r>
 800a6c8:	3001      	adds	r0, #1
 800a6ca:	d011      	beq.n	800a6f0 <_puts_r+0x84>
 800a6cc:	250a      	movs	r5, #10
 800a6ce:	e011      	b.n	800a6f4 <_puts_r+0x88>
 800a6d0:	4b1b      	ldr	r3, [pc, #108]	; (800a740 <_puts_r+0xd4>)
 800a6d2:	429c      	cmp	r4, r3
 800a6d4:	d101      	bne.n	800a6da <_puts_r+0x6e>
 800a6d6:	68ac      	ldr	r4, [r5, #8]
 800a6d8:	e7da      	b.n	800a690 <_puts_r+0x24>
 800a6da:	4b1a      	ldr	r3, [pc, #104]	; (800a744 <_puts_r+0xd8>)
 800a6dc:	429c      	cmp	r4, r3
 800a6de:	bf08      	it	eq
 800a6e0:	68ec      	ldreq	r4, [r5, #12]
 800a6e2:	e7d5      	b.n	800a690 <_puts_r+0x24>
 800a6e4:	4621      	mov	r1, r4
 800a6e6:	4628      	mov	r0, r5
 800a6e8:	f000 f898 	bl	800a81c <__swsetup_r>
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	d0dd      	beq.n	800a6ac <_puts_r+0x40>
 800a6f0:	f04f 35ff 	mov.w	r5, #4294967295
 800a6f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6f6:	07da      	lsls	r2, r3, #31
 800a6f8:	d405      	bmi.n	800a706 <_puts_r+0x9a>
 800a6fa:	89a3      	ldrh	r3, [r4, #12]
 800a6fc:	059b      	lsls	r3, r3, #22
 800a6fe:	d402      	bmi.n	800a706 <_puts_r+0x9a>
 800a700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a702:	f000 fab2 	bl	800ac6a <__retarget_lock_release_recursive>
 800a706:	4628      	mov	r0, r5
 800a708:	bd70      	pop	{r4, r5, r6, pc}
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	da04      	bge.n	800a718 <_puts_r+0xac>
 800a70e:	69a2      	ldr	r2, [r4, #24]
 800a710:	429a      	cmp	r2, r3
 800a712:	dc06      	bgt.n	800a722 <_puts_r+0xb6>
 800a714:	290a      	cmp	r1, #10
 800a716:	d004      	beq.n	800a722 <_puts_r+0xb6>
 800a718:	6823      	ldr	r3, [r4, #0]
 800a71a:	1c5a      	adds	r2, r3, #1
 800a71c:	6022      	str	r2, [r4, #0]
 800a71e:	7019      	strb	r1, [r3, #0]
 800a720:	e7c5      	b.n	800a6ae <_puts_r+0x42>
 800a722:	4622      	mov	r2, r4
 800a724:	4628      	mov	r0, r5
 800a726:	f000 f827 	bl	800a778 <__swbuf_r>
 800a72a:	3001      	adds	r0, #1
 800a72c:	d1bf      	bne.n	800a6ae <_puts_r+0x42>
 800a72e:	e7df      	b.n	800a6f0 <_puts_r+0x84>
 800a730:	6823      	ldr	r3, [r4, #0]
 800a732:	250a      	movs	r5, #10
 800a734:	1c5a      	adds	r2, r3, #1
 800a736:	6022      	str	r2, [r4, #0]
 800a738:	701d      	strb	r5, [r3, #0]
 800a73a:	e7db      	b.n	800a6f4 <_puts_r+0x88>
 800a73c:	081d4414 	.word	0x081d4414
 800a740:	081d4434 	.word	0x081d4434
 800a744:	081d43f4 	.word	0x081d43f4

0800a748 <puts>:
 800a748:	4b02      	ldr	r3, [pc, #8]	; (800a754 <puts+0xc>)
 800a74a:	4601      	mov	r1, r0
 800a74c:	6818      	ldr	r0, [r3, #0]
 800a74e:	f7ff bf8d 	b.w	800a66c <_puts_r>
 800a752:	bf00      	nop
 800a754:	20000ca8 	.word	0x20000ca8

0800a758 <_sbrk_r>:
 800a758:	b538      	push	{r3, r4, r5, lr}
 800a75a:	4d06      	ldr	r5, [pc, #24]	; (800a774 <_sbrk_r+0x1c>)
 800a75c:	2300      	movs	r3, #0
 800a75e:	4604      	mov	r4, r0
 800a760:	4608      	mov	r0, r1
 800a762:	602b      	str	r3, [r5, #0]
 800a764:	f7f6 fed4 	bl	8001510 <_sbrk>
 800a768:	1c43      	adds	r3, r0, #1
 800a76a:	d102      	bne.n	800a772 <_sbrk_r+0x1a>
 800a76c:	682b      	ldr	r3, [r5, #0]
 800a76e:	b103      	cbz	r3, 800a772 <_sbrk_r+0x1a>
 800a770:	6023      	str	r3, [r4, #0]
 800a772:	bd38      	pop	{r3, r4, r5, pc}
 800a774:	20028724 	.word	0x20028724

0800a778 <__swbuf_r>:
 800a778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a77a:	460e      	mov	r6, r1
 800a77c:	4614      	mov	r4, r2
 800a77e:	4605      	mov	r5, r0
 800a780:	b118      	cbz	r0, 800a78a <__swbuf_r+0x12>
 800a782:	6983      	ldr	r3, [r0, #24]
 800a784:	b90b      	cbnz	r3, 800a78a <__swbuf_r+0x12>
 800a786:	f000 f9d1 	bl	800ab2c <__sinit>
 800a78a:	4b21      	ldr	r3, [pc, #132]	; (800a810 <__swbuf_r+0x98>)
 800a78c:	429c      	cmp	r4, r3
 800a78e:	d12b      	bne.n	800a7e8 <__swbuf_r+0x70>
 800a790:	686c      	ldr	r4, [r5, #4]
 800a792:	69a3      	ldr	r3, [r4, #24]
 800a794:	60a3      	str	r3, [r4, #8]
 800a796:	89a3      	ldrh	r3, [r4, #12]
 800a798:	071a      	lsls	r2, r3, #28
 800a79a:	d52f      	bpl.n	800a7fc <__swbuf_r+0x84>
 800a79c:	6923      	ldr	r3, [r4, #16]
 800a79e:	b36b      	cbz	r3, 800a7fc <__swbuf_r+0x84>
 800a7a0:	6923      	ldr	r3, [r4, #16]
 800a7a2:	6820      	ldr	r0, [r4, #0]
 800a7a4:	1ac0      	subs	r0, r0, r3
 800a7a6:	6963      	ldr	r3, [r4, #20]
 800a7a8:	b2f6      	uxtb	r6, r6
 800a7aa:	4283      	cmp	r3, r0
 800a7ac:	4637      	mov	r7, r6
 800a7ae:	dc04      	bgt.n	800a7ba <__swbuf_r+0x42>
 800a7b0:	4621      	mov	r1, r4
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	f000 f926 	bl	800aa04 <_fflush_r>
 800a7b8:	bb30      	cbnz	r0, 800a808 <__swbuf_r+0x90>
 800a7ba:	68a3      	ldr	r3, [r4, #8]
 800a7bc:	3b01      	subs	r3, #1
 800a7be:	60a3      	str	r3, [r4, #8]
 800a7c0:	6823      	ldr	r3, [r4, #0]
 800a7c2:	1c5a      	adds	r2, r3, #1
 800a7c4:	6022      	str	r2, [r4, #0]
 800a7c6:	701e      	strb	r6, [r3, #0]
 800a7c8:	6963      	ldr	r3, [r4, #20]
 800a7ca:	3001      	adds	r0, #1
 800a7cc:	4283      	cmp	r3, r0
 800a7ce:	d004      	beq.n	800a7da <__swbuf_r+0x62>
 800a7d0:	89a3      	ldrh	r3, [r4, #12]
 800a7d2:	07db      	lsls	r3, r3, #31
 800a7d4:	d506      	bpl.n	800a7e4 <__swbuf_r+0x6c>
 800a7d6:	2e0a      	cmp	r6, #10
 800a7d8:	d104      	bne.n	800a7e4 <__swbuf_r+0x6c>
 800a7da:	4621      	mov	r1, r4
 800a7dc:	4628      	mov	r0, r5
 800a7de:	f000 f911 	bl	800aa04 <_fflush_r>
 800a7e2:	b988      	cbnz	r0, 800a808 <__swbuf_r+0x90>
 800a7e4:	4638      	mov	r0, r7
 800a7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7e8:	4b0a      	ldr	r3, [pc, #40]	; (800a814 <__swbuf_r+0x9c>)
 800a7ea:	429c      	cmp	r4, r3
 800a7ec:	d101      	bne.n	800a7f2 <__swbuf_r+0x7a>
 800a7ee:	68ac      	ldr	r4, [r5, #8]
 800a7f0:	e7cf      	b.n	800a792 <__swbuf_r+0x1a>
 800a7f2:	4b09      	ldr	r3, [pc, #36]	; (800a818 <__swbuf_r+0xa0>)
 800a7f4:	429c      	cmp	r4, r3
 800a7f6:	bf08      	it	eq
 800a7f8:	68ec      	ldreq	r4, [r5, #12]
 800a7fa:	e7ca      	b.n	800a792 <__swbuf_r+0x1a>
 800a7fc:	4621      	mov	r1, r4
 800a7fe:	4628      	mov	r0, r5
 800a800:	f000 f80c 	bl	800a81c <__swsetup_r>
 800a804:	2800      	cmp	r0, #0
 800a806:	d0cb      	beq.n	800a7a0 <__swbuf_r+0x28>
 800a808:	f04f 37ff 	mov.w	r7, #4294967295
 800a80c:	e7ea      	b.n	800a7e4 <__swbuf_r+0x6c>
 800a80e:	bf00      	nop
 800a810:	081d4414 	.word	0x081d4414
 800a814:	081d4434 	.word	0x081d4434
 800a818:	081d43f4 	.word	0x081d43f4

0800a81c <__swsetup_r>:
 800a81c:	4b32      	ldr	r3, [pc, #200]	; (800a8e8 <__swsetup_r+0xcc>)
 800a81e:	b570      	push	{r4, r5, r6, lr}
 800a820:	681d      	ldr	r5, [r3, #0]
 800a822:	4606      	mov	r6, r0
 800a824:	460c      	mov	r4, r1
 800a826:	b125      	cbz	r5, 800a832 <__swsetup_r+0x16>
 800a828:	69ab      	ldr	r3, [r5, #24]
 800a82a:	b913      	cbnz	r3, 800a832 <__swsetup_r+0x16>
 800a82c:	4628      	mov	r0, r5
 800a82e:	f000 f97d 	bl	800ab2c <__sinit>
 800a832:	4b2e      	ldr	r3, [pc, #184]	; (800a8ec <__swsetup_r+0xd0>)
 800a834:	429c      	cmp	r4, r3
 800a836:	d10f      	bne.n	800a858 <__swsetup_r+0x3c>
 800a838:	686c      	ldr	r4, [r5, #4]
 800a83a:	89a3      	ldrh	r3, [r4, #12]
 800a83c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a840:	0719      	lsls	r1, r3, #28
 800a842:	d42c      	bmi.n	800a89e <__swsetup_r+0x82>
 800a844:	06dd      	lsls	r5, r3, #27
 800a846:	d411      	bmi.n	800a86c <__swsetup_r+0x50>
 800a848:	2309      	movs	r3, #9
 800a84a:	6033      	str	r3, [r6, #0]
 800a84c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a850:	81a3      	strh	r3, [r4, #12]
 800a852:	f04f 30ff 	mov.w	r0, #4294967295
 800a856:	e03e      	b.n	800a8d6 <__swsetup_r+0xba>
 800a858:	4b25      	ldr	r3, [pc, #148]	; (800a8f0 <__swsetup_r+0xd4>)
 800a85a:	429c      	cmp	r4, r3
 800a85c:	d101      	bne.n	800a862 <__swsetup_r+0x46>
 800a85e:	68ac      	ldr	r4, [r5, #8]
 800a860:	e7eb      	b.n	800a83a <__swsetup_r+0x1e>
 800a862:	4b24      	ldr	r3, [pc, #144]	; (800a8f4 <__swsetup_r+0xd8>)
 800a864:	429c      	cmp	r4, r3
 800a866:	bf08      	it	eq
 800a868:	68ec      	ldreq	r4, [r5, #12]
 800a86a:	e7e6      	b.n	800a83a <__swsetup_r+0x1e>
 800a86c:	0758      	lsls	r0, r3, #29
 800a86e:	d512      	bpl.n	800a896 <__swsetup_r+0x7a>
 800a870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a872:	b141      	cbz	r1, 800a886 <__swsetup_r+0x6a>
 800a874:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a878:	4299      	cmp	r1, r3
 800a87a:	d002      	beq.n	800a882 <__swsetup_r+0x66>
 800a87c:	4630      	mov	r0, r6
 800a87e:	f7ff fdfd 	bl	800a47c <_free_r>
 800a882:	2300      	movs	r3, #0
 800a884:	6363      	str	r3, [r4, #52]	; 0x34
 800a886:	89a3      	ldrh	r3, [r4, #12]
 800a888:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a88c:	81a3      	strh	r3, [r4, #12]
 800a88e:	2300      	movs	r3, #0
 800a890:	6063      	str	r3, [r4, #4]
 800a892:	6923      	ldr	r3, [r4, #16]
 800a894:	6023      	str	r3, [r4, #0]
 800a896:	89a3      	ldrh	r3, [r4, #12]
 800a898:	f043 0308 	orr.w	r3, r3, #8
 800a89c:	81a3      	strh	r3, [r4, #12]
 800a89e:	6923      	ldr	r3, [r4, #16]
 800a8a0:	b94b      	cbnz	r3, 800a8b6 <__swsetup_r+0x9a>
 800a8a2:	89a3      	ldrh	r3, [r4, #12]
 800a8a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8ac:	d003      	beq.n	800a8b6 <__swsetup_r+0x9a>
 800a8ae:	4621      	mov	r1, r4
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	f000 fa01 	bl	800acb8 <__smakebuf_r>
 800a8b6:	89a0      	ldrh	r0, [r4, #12]
 800a8b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8bc:	f010 0301 	ands.w	r3, r0, #1
 800a8c0:	d00a      	beq.n	800a8d8 <__swsetup_r+0xbc>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	60a3      	str	r3, [r4, #8]
 800a8c6:	6963      	ldr	r3, [r4, #20]
 800a8c8:	425b      	negs	r3, r3
 800a8ca:	61a3      	str	r3, [r4, #24]
 800a8cc:	6923      	ldr	r3, [r4, #16]
 800a8ce:	b943      	cbnz	r3, 800a8e2 <__swsetup_r+0xc6>
 800a8d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8d4:	d1ba      	bne.n	800a84c <__swsetup_r+0x30>
 800a8d6:	bd70      	pop	{r4, r5, r6, pc}
 800a8d8:	0781      	lsls	r1, r0, #30
 800a8da:	bf58      	it	pl
 800a8dc:	6963      	ldrpl	r3, [r4, #20]
 800a8de:	60a3      	str	r3, [r4, #8]
 800a8e0:	e7f4      	b.n	800a8cc <__swsetup_r+0xb0>
 800a8e2:	2000      	movs	r0, #0
 800a8e4:	e7f7      	b.n	800a8d6 <__swsetup_r+0xba>
 800a8e6:	bf00      	nop
 800a8e8:	20000ca8 	.word	0x20000ca8
 800a8ec:	081d4414 	.word	0x081d4414
 800a8f0:	081d4434 	.word	0x081d4434
 800a8f4:	081d43f4 	.word	0x081d43f4

0800a8f8 <__sflush_r>:
 800a8f8:	898a      	ldrh	r2, [r1, #12]
 800a8fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8fe:	4605      	mov	r5, r0
 800a900:	0710      	lsls	r0, r2, #28
 800a902:	460c      	mov	r4, r1
 800a904:	d458      	bmi.n	800a9b8 <__sflush_r+0xc0>
 800a906:	684b      	ldr	r3, [r1, #4]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	dc05      	bgt.n	800a918 <__sflush_r+0x20>
 800a90c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a90e:	2b00      	cmp	r3, #0
 800a910:	dc02      	bgt.n	800a918 <__sflush_r+0x20>
 800a912:	2000      	movs	r0, #0
 800a914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a918:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a91a:	2e00      	cmp	r6, #0
 800a91c:	d0f9      	beq.n	800a912 <__sflush_r+0x1a>
 800a91e:	2300      	movs	r3, #0
 800a920:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a924:	682f      	ldr	r7, [r5, #0]
 800a926:	602b      	str	r3, [r5, #0]
 800a928:	d032      	beq.n	800a990 <__sflush_r+0x98>
 800a92a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a92c:	89a3      	ldrh	r3, [r4, #12]
 800a92e:	075a      	lsls	r2, r3, #29
 800a930:	d505      	bpl.n	800a93e <__sflush_r+0x46>
 800a932:	6863      	ldr	r3, [r4, #4]
 800a934:	1ac0      	subs	r0, r0, r3
 800a936:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a938:	b10b      	cbz	r3, 800a93e <__sflush_r+0x46>
 800a93a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a93c:	1ac0      	subs	r0, r0, r3
 800a93e:	2300      	movs	r3, #0
 800a940:	4602      	mov	r2, r0
 800a942:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a944:	6a21      	ldr	r1, [r4, #32]
 800a946:	4628      	mov	r0, r5
 800a948:	47b0      	blx	r6
 800a94a:	1c43      	adds	r3, r0, #1
 800a94c:	89a3      	ldrh	r3, [r4, #12]
 800a94e:	d106      	bne.n	800a95e <__sflush_r+0x66>
 800a950:	6829      	ldr	r1, [r5, #0]
 800a952:	291d      	cmp	r1, #29
 800a954:	d82c      	bhi.n	800a9b0 <__sflush_r+0xb8>
 800a956:	4a2a      	ldr	r2, [pc, #168]	; (800aa00 <__sflush_r+0x108>)
 800a958:	40ca      	lsrs	r2, r1
 800a95a:	07d6      	lsls	r6, r2, #31
 800a95c:	d528      	bpl.n	800a9b0 <__sflush_r+0xb8>
 800a95e:	2200      	movs	r2, #0
 800a960:	6062      	str	r2, [r4, #4]
 800a962:	04d9      	lsls	r1, r3, #19
 800a964:	6922      	ldr	r2, [r4, #16]
 800a966:	6022      	str	r2, [r4, #0]
 800a968:	d504      	bpl.n	800a974 <__sflush_r+0x7c>
 800a96a:	1c42      	adds	r2, r0, #1
 800a96c:	d101      	bne.n	800a972 <__sflush_r+0x7a>
 800a96e:	682b      	ldr	r3, [r5, #0]
 800a970:	b903      	cbnz	r3, 800a974 <__sflush_r+0x7c>
 800a972:	6560      	str	r0, [r4, #84]	; 0x54
 800a974:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a976:	602f      	str	r7, [r5, #0]
 800a978:	2900      	cmp	r1, #0
 800a97a:	d0ca      	beq.n	800a912 <__sflush_r+0x1a>
 800a97c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a980:	4299      	cmp	r1, r3
 800a982:	d002      	beq.n	800a98a <__sflush_r+0x92>
 800a984:	4628      	mov	r0, r5
 800a986:	f7ff fd79 	bl	800a47c <_free_r>
 800a98a:	2000      	movs	r0, #0
 800a98c:	6360      	str	r0, [r4, #52]	; 0x34
 800a98e:	e7c1      	b.n	800a914 <__sflush_r+0x1c>
 800a990:	6a21      	ldr	r1, [r4, #32]
 800a992:	2301      	movs	r3, #1
 800a994:	4628      	mov	r0, r5
 800a996:	47b0      	blx	r6
 800a998:	1c41      	adds	r1, r0, #1
 800a99a:	d1c7      	bne.n	800a92c <__sflush_r+0x34>
 800a99c:	682b      	ldr	r3, [r5, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d0c4      	beq.n	800a92c <__sflush_r+0x34>
 800a9a2:	2b1d      	cmp	r3, #29
 800a9a4:	d001      	beq.n	800a9aa <__sflush_r+0xb2>
 800a9a6:	2b16      	cmp	r3, #22
 800a9a8:	d101      	bne.n	800a9ae <__sflush_r+0xb6>
 800a9aa:	602f      	str	r7, [r5, #0]
 800a9ac:	e7b1      	b.n	800a912 <__sflush_r+0x1a>
 800a9ae:	89a3      	ldrh	r3, [r4, #12]
 800a9b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9b4:	81a3      	strh	r3, [r4, #12]
 800a9b6:	e7ad      	b.n	800a914 <__sflush_r+0x1c>
 800a9b8:	690f      	ldr	r7, [r1, #16]
 800a9ba:	2f00      	cmp	r7, #0
 800a9bc:	d0a9      	beq.n	800a912 <__sflush_r+0x1a>
 800a9be:	0793      	lsls	r3, r2, #30
 800a9c0:	680e      	ldr	r6, [r1, #0]
 800a9c2:	bf08      	it	eq
 800a9c4:	694b      	ldreq	r3, [r1, #20]
 800a9c6:	600f      	str	r7, [r1, #0]
 800a9c8:	bf18      	it	ne
 800a9ca:	2300      	movne	r3, #0
 800a9cc:	eba6 0807 	sub.w	r8, r6, r7
 800a9d0:	608b      	str	r3, [r1, #8]
 800a9d2:	f1b8 0f00 	cmp.w	r8, #0
 800a9d6:	dd9c      	ble.n	800a912 <__sflush_r+0x1a>
 800a9d8:	6a21      	ldr	r1, [r4, #32]
 800a9da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a9dc:	4643      	mov	r3, r8
 800a9de:	463a      	mov	r2, r7
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	47b0      	blx	r6
 800a9e4:	2800      	cmp	r0, #0
 800a9e6:	dc06      	bgt.n	800a9f6 <__sflush_r+0xfe>
 800a9e8:	89a3      	ldrh	r3, [r4, #12]
 800a9ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9ee:	81a3      	strh	r3, [r4, #12]
 800a9f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f4:	e78e      	b.n	800a914 <__sflush_r+0x1c>
 800a9f6:	4407      	add	r7, r0
 800a9f8:	eba8 0800 	sub.w	r8, r8, r0
 800a9fc:	e7e9      	b.n	800a9d2 <__sflush_r+0xda>
 800a9fe:	bf00      	nop
 800aa00:	20400001 	.word	0x20400001

0800aa04 <_fflush_r>:
 800aa04:	b538      	push	{r3, r4, r5, lr}
 800aa06:	690b      	ldr	r3, [r1, #16]
 800aa08:	4605      	mov	r5, r0
 800aa0a:	460c      	mov	r4, r1
 800aa0c:	b913      	cbnz	r3, 800aa14 <_fflush_r+0x10>
 800aa0e:	2500      	movs	r5, #0
 800aa10:	4628      	mov	r0, r5
 800aa12:	bd38      	pop	{r3, r4, r5, pc}
 800aa14:	b118      	cbz	r0, 800aa1e <_fflush_r+0x1a>
 800aa16:	6983      	ldr	r3, [r0, #24]
 800aa18:	b90b      	cbnz	r3, 800aa1e <_fflush_r+0x1a>
 800aa1a:	f000 f887 	bl	800ab2c <__sinit>
 800aa1e:	4b14      	ldr	r3, [pc, #80]	; (800aa70 <_fflush_r+0x6c>)
 800aa20:	429c      	cmp	r4, r3
 800aa22:	d11b      	bne.n	800aa5c <_fflush_r+0x58>
 800aa24:	686c      	ldr	r4, [r5, #4]
 800aa26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d0ef      	beq.n	800aa0e <_fflush_r+0xa>
 800aa2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa30:	07d0      	lsls	r0, r2, #31
 800aa32:	d404      	bmi.n	800aa3e <_fflush_r+0x3a>
 800aa34:	0599      	lsls	r1, r3, #22
 800aa36:	d402      	bmi.n	800aa3e <_fflush_r+0x3a>
 800aa38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa3a:	f000 f915 	bl	800ac68 <__retarget_lock_acquire_recursive>
 800aa3e:	4628      	mov	r0, r5
 800aa40:	4621      	mov	r1, r4
 800aa42:	f7ff ff59 	bl	800a8f8 <__sflush_r>
 800aa46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa48:	07da      	lsls	r2, r3, #31
 800aa4a:	4605      	mov	r5, r0
 800aa4c:	d4e0      	bmi.n	800aa10 <_fflush_r+0xc>
 800aa4e:	89a3      	ldrh	r3, [r4, #12]
 800aa50:	059b      	lsls	r3, r3, #22
 800aa52:	d4dd      	bmi.n	800aa10 <_fflush_r+0xc>
 800aa54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa56:	f000 f908 	bl	800ac6a <__retarget_lock_release_recursive>
 800aa5a:	e7d9      	b.n	800aa10 <_fflush_r+0xc>
 800aa5c:	4b05      	ldr	r3, [pc, #20]	; (800aa74 <_fflush_r+0x70>)
 800aa5e:	429c      	cmp	r4, r3
 800aa60:	d101      	bne.n	800aa66 <_fflush_r+0x62>
 800aa62:	68ac      	ldr	r4, [r5, #8]
 800aa64:	e7df      	b.n	800aa26 <_fflush_r+0x22>
 800aa66:	4b04      	ldr	r3, [pc, #16]	; (800aa78 <_fflush_r+0x74>)
 800aa68:	429c      	cmp	r4, r3
 800aa6a:	bf08      	it	eq
 800aa6c:	68ec      	ldreq	r4, [r5, #12]
 800aa6e:	e7da      	b.n	800aa26 <_fflush_r+0x22>
 800aa70:	081d4414 	.word	0x081d4414
 800aa74:	081d4434 	.word	0x081d4434
 800aa78:	081d43f4 	.word	0x081d43f4

0800aa7c <std>:
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	b510      	push	{r4, lr}
 800aa80:	4604      	mov	r4, r0
 800aa82:	e9c0 3300 	strd	r3, r3, [r0]
 800aa86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa8a:	6083      	str	r3, [r0, #8]
 800aa8c:	8181      	strh	r1, [r0, #12]
 800aa8e:	6643      	str	r3, [r0, #100]	; 0x64
 800aa90:	81c2      	strh	r2, [r0, #14]
 800aa92:	6183      	str	r3, [r0, #24]
 800aa94:	4619      	mov	r1, r3
 800aa96:	2208      	movs	r2, #8
 800aa98:	305c      	adds	r0, #92	; 0x5c
 800aa9a:	f7ff fce7 	bl	800a46c <memset>
 800aa9e:	4b05      	ldr	r3, [pc, #20]	; (800aab4 <std+0x38>)
 800aaa0:	6263      	str	r3, [r4, #36]	; 0x24
 800aaa2:	4b05      	ldr	r3, [pc, #20]	; (800aab8 <std+0x3c>)
 800aaa4:	62a3      	str	r3, [r4, #40]	; 0x28
 800aaa6:	4b05      	ldr	r3, [pc, #20]	; (800aabc <std+0x40>)
 800aaa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aaaa:	4b05      	ldr	r3, [pc, #20]	; (800aac0 <std+0x44>)
 800aaac:	6224      	str	r4, [r4, #32]
 800aaae:	6323      	str	r3, [r4, #48]	; 0x30
 800aab0:	bd10      	pop	{r4, pc}
 800aab2:	bf00      	nop
 800aab4:	0800b32d 	.word	0x0800b32d
 800aab8:	0800b34f 	.word	0x0800b34f
 800aabc:	0800b387 	.word	0x0800b387
 800aac0:	0800b3ab 	.word	0x0800b3ab

0800aac4 <_cleanup_r>:
 800aac4:	4901      	ldr	r1, [pc, #4]	; (800aacc <_cleanup_r+0x8>)
 800aac6:	f000 b8af 	b.w	800ac28 <_fwalk_reent>
 800aaca:	bf00      	nop
 800aacc:	0800aa05 	.word	0x0800aa05

0800aad0 <__sfmoreglue>:
 800aad0:	b570      	push	{r4, r5, r6, lr}
 800aad2:	2268      	movs	r2, #104	; 0x68
 800aad4:	1e4d      	subs	r5, r1, #1
 800aad6:	4355      	muls	r5, r2
 800aad8:	460e      	mov	r6, r1
 800aada:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aade:	f7ff fd39 	bl	800a554 <_malloc_r>
 800aae2:	4604      	mov	r4, r0
 800aae4:	b140      	cbz	r0, 800aaf8 <__sfmoreglue+0x28>
 800aae6:	2100      	movs	r1, #0
 800aae8:	e9c0 1600 	strd	r1, r6, [r0]
 800aaec:	300c      	adds	r0, #12
 800aaee:	60a0      	str	r0, [r4, #8]
 800aaf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aaf4:	f7ff fcba 	bl	800a46c <memset>
 800aaf8:	4620      	mov	r0, r4
 800aafa:	bd70      	pop	{r4, r5, r6, pc}

0800aafc <__sfp_lock_acquire>:
 800aafc:	4801      	ldr	r0, [pc, #4]	; (800ab04 <__sfp_lock_acquire+0x8>)
 800aafe:	f000 b8b3 	b.w	800ac68 <__retarget_lock_acquire_recursive>
 800ab02:	bf00      	nop
 800ab04:	20028721 	.word	0x20028721

0800ab08 <__sfp_lock_release>:
 800ab08:	4801      	ldr	r0, [pc, #4]	; (800ab10 <__sfp_lock_release+0x8>)
 800ab0a:	f000 b8ae 	b.w	800ac6a <__retarget_lock_release_recursive>
 800ab0e:	bf00      	nop
 800ab10:	20028721 	.word	0x20028721

0800ab14 <__sinit_lock_acquire>:
 800ab14:	4801      	ldr	r0, [pc, #4]	; (800ab1c <__sinit_lock_acquire+0x8>)
 800ab16:	f000 b8a7 	b.w	800ac68 <__retarget_lock_acquire_recursive>
 800ab1a:	bf00      	nop
 800ab1c:	20028722 	.word	0x20028722

0800ab20 <__sinit_lock_release>:
 800ab20:	4801      	ldr	r0, [pc, #4]	; (800ab28 <__sinit_lock_release+0x8>)
 800ab22:	f000 b8a2 	b.w	800ac6a <__retarget_lock_release_recursive>
 800ab26:	bf00      	nop
 800ab28:	20028722 	.word	0x20028722

0800ab2c <__sinit>:
 800ab2c:	b510      	push	{r4, lr}
 800ab2e:	4604      	mov	r4, r0
 800ab30:	f7ff fff0 	bl	800ab14 <__sinit_lock_acquire>
 800ab34:	69a3      	ldr	r3, [r4, #24]
 800ab36:	b11b      	cbz	r3, 800ab40 <__sinit+0x14>
 800ab38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab3c:	f7ff bff0 	b.w	800ab20 <__sinit_lock_release>
 800ab40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab44:	6523      	str	r3, [r4, #80]	; 0x50
 800ab46:	4b13      	ldr	r3, [pc, #76]	; (800ab94 <__sinit+0x68>)
 800ab48:	4a13      	ldr	r2, [pc, #76]	; (800ab98 <__sinit+0x6c>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab4e:	42a3      	cmp	r3, r4
 800ab50:	bf04      	itt	eq
 800ab52:	2301      	moveq	r3, #1
 800ab54:	61a3      	streq	r3, [r4, #24]
 800ab56:	4620      	mov	r0, r4
 800ab58:	f000 f820 	bl	800ab9c <__sfp>
 800ab5c:	6060      	str	r0, [r4, #4]
 800ab5e:	4620      	mov	r0, r4
 800ab60:	f000 f81c 	bl	800ab9c <__sfp>
 800ab64:	60a0      	str	r0, [r4, #8]
 800ab66:	4620      	mov	r0, r4
 800ab68:	f000 f818 	bl	800ab9c <__sfp>
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	60e0      	str	r0, [r4, #12]
 800ab70:	2104      	movs	r1, #4
 800ab72:	6860      	ldr	r0, [r4, #4]
 800ab74:	f7ff ff82 	bl	800aa7c <std>
 800ab78:	68a0      	ldr	r0, [r4, #8]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	2109      	movs	r1, #9
 800ab7e:	f7ff ff7d 	bl	800aa7c <std>
 800ab82:	68e0      	ldr	r0, [r4, #12]
 800ab84:	2202      	movs	r2, #2
 800ab86:	2112      	movs	r1, #18
 800ab88:	f7ff ff78 	bl	800aa7c <std>
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	61a3      	str	r3, [r4, #24]
 800ab90:	e7d2      	b.n	800ab38 <__sinit+0xc>
 800ab92:	bf00      	nop
 800ab94:	081d43f0 	.word	0x081d43f0
 800ab98:	0800aac5 	.word	0x0800aac5

0800ab9c <__sfp>:
 800ab9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9e:	4607      	mov	r7, r0
 800aba0:	f7ff ffac 	bl	800aafc <__sfp_lock_acquire>
 800aba4:	4b1e      	ldr	r3, [pc, #120]	; (800ac20 <__sfp+0x84>)
 800aba6:	681e      	ldr	r6, [r3, #0]
 800aba8:	69b3      	ldr	r3, [r6, #24]
 800abaa:	b913      	cbnz	r3, 800abb2 <__sfp+0x16>
 800abac:	4630      	mov	r0, r6
 800abae:	f7ff ffbd 	bl	800ab2c <__sinit>
 800abb2:	3648      	adds	r6, #72	; 0x48
 800abb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800abb8:	3b01      	subs	r3, #1
 800abba:	d503      	bpl.n	800abc4 <__sfp+0x28>
 800abbc:	6833      	ldr	r3, [r6, #0]
 800abbe:	b30b      	cbz	r3, 800ac04 <__sfp+0x68>
 800abc0:	6836      	ldr	r6, [r6, #0]
 800abc2:	e7f7      	b.n	800abb4 <__sfp+0x18>
 800abc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800abc8:	b9d5      	cbnz	r5, 800ac00 <__sfp+0x64>
 800abca:	4b16      	ldr	r3, [pc, #88]	; (800ac24 <__sfp+0x88>)
 800abcc:	60e3      	str	r3, [r4, #12]
 800abce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800abd2:	6665      	str	r5, [r4, #100]	; 0x64
 800abd4:	f000 f847 	bl	800ac66 <__retarget_lock_init_recursive>
 800abd8:	f7ff ff96 	bl	800ab08 <__sfp_lock_release>
 800abdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800abe0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800abe4:	6025      	str	r5, [r4, #0]
 800abe6:	61a5      	str	r5, [r4, #24]
 800abe8:	2208      	movs	r2, #8
 800abea:	4629      	mov	r1, r5
 800abec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800abf0:	f7ff fc3c 	bl	800a46c <memset>
 800abf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800abf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800abfc:	4620      	mov	r0, r4
 800abfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac00:	3468      	adds	r4, #104	; 0x68
 800ac02:	e7d9      	b.n	800abb8 <__sfp+0x1c>
 800ac04:	2104      	movs	r1, #4
 800ac06:	4638      	mov	r0, r7
 800ac08:	f7ff ff62 	bl	800aad0 <__sfmoreglue>
 800ac0c:	4604      	mov	r4, r0
 800ac0e:	6030      	str	r0, [r6, #0]
 800ac10:	2800      	cmp	r0, #0
 800ac12:	d1d5      	bne.n	800abc0 <__sfp+0x24>
 800ac14:	f7ff ff78 	bl	800ab08 <__sfp_lock_release>
 800ac18:	230c      	movs	r3, #12
 800ac1a:	603b      	str	r3, [r7, #0]
 800ac1c:	e7ee      	b.n	800abfc <__sfp+0x60>
 800ac1e:	bf00      	nop
 800ac20:	081d43f0 	.word	0x081d43f0
 800ac24:	ffff0001 	.word	0xffff0001

0800ac28 <_fwalk_reent>:
 800ac28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac2c:	4606      	mov	r6, r0
 800ac2e:	4688      	mov	r8, r1
 800ac30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac34:	2700      	movs	r7, #0
 800ac36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac3a:	f1b9 0901 	subs.w	r9, r9, #1
 800ac3e:	d505      	bpl.n	800ac4c <_fwalk_reent+0x24>
 800ac40:	6824      	ldr	r4, [r4, #0]
 800ac42:	2c00      	cmp	r4, #0
 800ac44:	d1f7      	bne.n	800ac36 <_fwalk_reent+0xe>
 800ac46:	4638      	mov	r0, r7
 800ac48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac4c:	89ab      	ldrh	r3, [r5, #12]
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d907      	bls.n	800ac62 <_fwalk_reent+0x3a>
 800ac52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac56:	3301      	adds	r3, #1
 800ac58:	d003      	beq.n	800ac62 <_fwalk_reent+0x3a>
 800ac5a:	4629      	mov	r1, r5
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	47c0      	blx	r8
 800ac60:	4307      	orrs	r7, r0
 800ac62:	3568      	adds	r5, #104	; 0x68
 800ac64:	e7e9      	b.n	800ac3a <_fwalk_reent+0x12>

0800ac66 <__retarget_lock_init_recursive>:
 800ac66:	4770      	bx	lr

0800ac68 <__retarget_lock_acquire_recursive>:
 800ac68:	4770      	bx	lr

0800ac6a <__retarget_lock_release_recursive>:
 800ac6a:	4770      	bx	lr

0800ac6c <__swhatbuf_r>:
 800ac6c:	b570      	push	{r4, r5, r6, lr}
 800ac6e:	460e      	mov	r6, r1
 800ac70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac74:	2900      	cmp	r1, #0
 800ac76:	b096      	sub	sp, #88	; 0x58
 800ac78:	4614      	mov	r4, r2
 800ac7a:	461d      	mov	r5, r3
 800ac7c:	da08      	bge.n	800ac90 <__swhatbuf_r+0x24>
 800ac7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ac82:	2200      	movs	r2, #0
 800ac84:	602a      	str	r2, [r5, #0]
 800ac86:	061a      	lsls	r2, r3, #24
 800ac88:	d410      	bmi.n	800acac <__swhatbuf_r+0x40>
 800ac8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac8e:	e00e      	b.n	800acae <__swhatbuf_r+0x42>
 800ac90:	466a      	mov	r2, sp
 800ac92:	f000 fbb1 	bl	800b3f8 <_fstat_r>
 800ac96:	2800      	cmp	r0, #0
 800ac98:	dbf1      	blt.n	800ac7e <__swhatbuf_r+0x12>
 800ac9a:	9a01      	ldr	r2, [sp, #4]
 800ac9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aca0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aca4:	425a      	negs	r2, r3
 800aca6:	415a      	adcs	r2, r3
 800aca8:	602a      	str	r2, [r5, #0]
 800acaa:	e7ee      	b.n	800ac8a <__swhatbuf_r+0x1e>
 800acac:	2340      	movs	r3, #64	; 0x40
 800acae:	2000      	movs	r0, #0
 800acb0:	6023      	str	r3, [r4, #0]
 800acb2:	b016      	add	sp, #88	; 0x58
 800acb4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800acb8 <__smakebuf_r>:
 800acb8:	898b      	ldrh	r3, [r1, #12]
 800acba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800acbc:	079d      	lsls	r5, r3, #30
 800acbe:	4606      	mov	r6, r0
 800acc0:	460c      	mov	r4, r1
 800acc2:	d507      	bpl.n	800acd4 <__smakebuf_r+0x1c>
 800acc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800acc8:	6023      	str	r3, [r4, #0]
 800acca:	6123      	str	r3, [r4, #16]
 800accc:	2301      	movs	r3, #1
 800acce:	6163      	str	r3, [r4, #20]
 800acd0:	b002      	add	sp, #8
 800acd2:	bd70      	pop	{r4, r5, r6, pc}
 800acd4:	ab01      	add	r3, sp, #4
 800acd6:	466a      	mov	r2, sp
 800acd8:	f7ff ffc8 	bl	800ac6c <__swhatbuf_r>
 800acdc:	9900      	ldr	r1, [sp, #0]
 800acde:	4605      	mov	r5, r0
 800ace0:	4630      	mov	r0, r6
 800ace2:	f7ff fc37 	bl	800a554 <_malloc_r>
 800ace6:	b948      	cbnz	r0, 800acfc <__smakebuf_r+0x44>
 800ace8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acec:	059a      	lsls	r2, r3, #22
 800acee:	d4ef      	bmi.n	800acd0 <__smakebuf_r+0x18>
 800acf0:	f023 0303 	bic.w	r3, r3, #3
 800acf4:	f043 0302 	orr.w	r3, r3, #2
 800acf8:	81a3      	strh	r3, [r4, #12]
 800acfa:	e7e3      	b.n	800acc4 <__smakebuf_r+0xc>
 800acfc:	4b0d      	ldr	r3, [pc, #52]	; (800ad34 <__smakebuf_r+0x7c>)
 800acfe:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad00:	89a3      	ldrh	r3, [r4, #12]
 800ad02:	6020      	str	r0, [r4, #0]
 800ad04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad08:	81a3      	strh	r3, [r4, #12]
 800ad0a:	9b00      	ldr	r3, [sp, #0]
 800ad0c:	6163      	str	r3, [r4, #20]
 800ad0e:	9b01      	ldr	r3, [sp, #4]
 800ad10:	6120      	str	r0, [r4, #16]
 800ad12:	b15b      	cbz	r3, 800ad2c <__smakebuf_r+0x74>
 800ad14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad18:	4630      	mov	r0, r6
 800ad1a:	f000 fb7f 	bl	800b41c <_isatty_r>
 800ad1e:	b128      	cbz	r0, 800ad2c <__smakebuf_r+0x74>
 800ad20:	89a3      	ldrh	r3, [r4, #12]
 800ad22:	f023 0303 	bic.w	r3, r3, #3
 800ad26:	f043 0301 	orr.w	r3, r3, #1
 800ad2a:	81a3      	strh	r3, [r4, #12]
 800ad2c:	89a0      	ldrh	r0, [r4, #12]
 800ad2e:	4305      	orrs	r5, r0
 800ad30:	81a5      	strh	r5, [r4, #12]
 800ad32:	e7cd      	b.n	800acd0 <__smakebuf_r+0x18>
 800ad34:	0800aac5 	.word	0x0800aac5

0800ad38 <__malloc_lock>:
 800ad38:	4801      	ldr	r0, [pc, #4]	; (800ad40 <__malloc_lock+0x8>)
 800ad3a:	f7ff bf95 	b.w	800ac68 <__retarget_lock_acquire_recursive>
 800ad3e:	bf00      	nop
 800ad40:	20028720 	.word	0x20028720

0800ad44 <__malloc_unlock>:
 800ad44:	4801      	ldr	r0, [pc, #4]	; (800ad4c <__malloc_unlock+0x8>)
 800ad46:	f7ff bf90 	b.w	800ac6a <__retarget_lock_release_recursive>
 800ad4a:	bf00      	nop
 800ad4c:	20028720 	.word	0x20028720

0800ad50 <__sfputc_r>:
 800ad50:	6893      	ldr	r3, [r2, #8]
 800ad52:	3b01      	subs	r3, #1
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	b410      	push	{r4}
 800ad58:	6093      	str	r3, [r2, #8]
 800ad5a:	da08      	bge.n	800ad6e <__sfputc_r+0x1e>
 800ad5c:	6994      	ldr	r4, [r2, #24]
 800ad5e:	42a3      	cmp	r3, r4
 800ad60:	db01      	blt.n	800ad66 <__sfputc_r+0x16>
 800ad62:	290a      	cmp	r1, #10
 800ad64:	d103      	bne.n	800ad6e <__sfputc_r+0x1e>
 800ad66:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad6a:	f7ff bd05 	b.w	800a778 <__swbuf_r>
 800ad6e:	6813      	ldr	r3, [r2, #0]
 800ad70:	1c58      	adds	r0, r3, #1
 800ad72:	6010      	str	r0, [r2, #0]
 800ad74:	7019      	strb	r1, [r3, #0]
 800ad76:	4608      	mov	r0, r1
 800ad78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad7c:	4770      	bx	lr

0800ad7e <__sfputs_r>:
 800ad7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad80:	4606      	mov	r6, r0
 800ad82:	460f      	mov	r7, r1
 800ad84:	4614      	mov	r4, r2
 800ad86:	18d5      	adds	r5, r2, r3
 800ad88:	42ac      	cmp	r4, r5
 800ad8a:	d101      	bne.n	800ad90 <__sfputs_r+0x12>
 800ad8c:	2000      	movs	r0, #0
 800ad8e:	e007      	b.n	800ada0 <__sfputs_r+0x22>
 800ad90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad94:	463a      	mov	r2, r7
 800ad96:	4630      	mov	r0, r6
 800ad98:	f7ff ffda 	bl	800ad50 <__sfputc_r>
 800ad9c:	1c43      	adds	r3, r0, #1
 800ad9e:	d1f3      	bne.n	800ad88 <__sfputs_r+0xa>
 800ada0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ada4 <_vfiprintf_r>:
 800ada4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada8:	460d      	mov	r5, r1
 800adaa:	b09d      	sub	sp, #116	; 0x74
 800adac:	4614      	mov	r4, r2
 800adae:	4698      	mov	r8, r3
 800adb0:	4606      	mov	r6, r0
 800adb2:	b118      	cbz	r0, 800adbc <_vfiprintf_r+0x18>
 800adb4:	6983      	ldr	r3, [r0, #24]
 800adb6:	b90b      	cbnz	r3, 800adbc <_vfiprintf_r+0x18>
 800adb8:	f7ff feb8 	bl	800ab2c <__sinit>
 800adbc:	4b89      	ldr	r3, [pc, #548]	; (800afe4 <_vfiprintf_r+0x240>)
 800adbe:	429d      	cmp	r5, r3
 800adc0:	d11b      	bne.n	800adfa <_vfiprintf_r+0x56>
 800adc2:	6875      	ldr	r5, [r6, #4]
 800adc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adc6:	07d9      	lsls	r1, r3, #31
 800adc8:	d405      	bmi.n	800add6 <_vfiprintf_r+0x32>
 800adca:	89ab      	ldrh	r3, [r5, #12]
 800adcc:	059a      	lsls	r2, r3, #22
 800adce:	d402      	bmi.n	800add6 <_vfiprintf_r+0x32>
 800add0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800add2:	f7ff ff49 	bl	800ac68 <__retarget_lock_acquire_recursive>
 800add6:	89ab      	ldrh	r3, [r5, #12]
 800add8:	071b      	lsls	r3, r3, #28
 800adda:	d501      	bpl.n	800ade0 <_vfiprintf_r+0x3c>
 800addc:	692b      	ldr	r3, [r5, #16]
 800adde:	b9eb      	cbnz	r3, 800ae1c <_vfiprintf_r+0x78>
 800ade0:	4629      	mov	r1, r5
 800ade2:	4630      	mov	r0, r6
 800ade4:	f7ff fd1a 	bl	800a81c <__swsetup_r>
 800ade8:	b1c0      	cbz	r0, 800ae1c <_vfiprintf_r+0x78>
 800adea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adec:	07dc      	lsls	r4, r3, #31
 800adee:	d50e      	bpl.n	800ae0e <_vfiprintf_r+0x6a>
 800adf0:	f04f 30ff 	mov.w	r0, #4294967295
 800adf4:	b01d      	add	sp, #116	; 0x74
 800adf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adfa:	4b7b      	ldr	r3, [pc, #492]	; (800afe8 <_vfiprintf_r+0x244>)
 800adfc:	429d      	cmp	r5, r3
 800adfe:	d101      	bne.n	800ae04 <_vfiprintf_r+0x60>
 800ae00:	68b5      	ldr	r5, [r6, #8]
 800ae02:	e7df      	b.n	800adc4 <_vfiprintf_r+0x20>
 800ae04:	4b79      	ldr	r3, [pc, #484]	; (800afec <_vfiprintf_r+0x248>)
 800ae06:	429d      	cmp	r5, r3
 800ae08:	bf08      	it	eq
 800ae0a:	68f5      	ldreq	r5, [r6, #12]
 800ae0c:	e7da      	b.n	800adc4 <_vfiprintf_r+0x20>
 800ae0e:	89ab      	ldrh	r3, [r5, #12]
 800ae10:	0598      	lsls	r0, r3, #22
 800ae12:	d4ed      	bmi.n	800adf0 <_vfiprintf_r+0x4c>
 800ae14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae16:	f7ff ff28 	bl	800ac6a <__retarget_lock_release_recursive>
 800ae1a:	e7e9      	b.n	800adf0 <_vfiprintf_r+0x4c>
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae20:	2320      	movs	r3, #32
 800ae22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae26:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae2a:	2330      	movs	r3, #48	; 0x30
 800ae2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aff0 <_vfiprintf_r+0x24c>
 800ae30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae34:	f04f 0901 	mov.w	r9, #1
 800ae38:	4623      	mov	r3, r4
 800ae3a:	469a      	mov	sl, r3
 800ae3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae40:	b10a      	cbz	r2, 800ae46 <_vfiprintf_r+0xa2>
 800ae42:	2a25      	cmp	r2, #37	; 0x25
 800ae44:	d1f9      	bne.n	800ae3a <_vfiprintf_r+0x96>
 800ae46:	ebba 0b04 	subs.w	fp, sl, r4
 800ae4a:	d00b      	beq.n	800ae64 <_vfiprintf_r+0xc0>
 800ae4c:	465b      	mov	r3, fp
 800ae4e:	4622      	mov	r2, r4
 800ae50:	4629      	mov	r1, r5
 800ae52:	4630      	mov	r0, r6
 800ae54:	f7ff ff93 	bl	800ad7e <__sfputs_r>
 800ae58:	3001      	adds	r0, #1
 800ae5a:	f000 80aa 	beq.w	800afb2 <_vfiprintf_r+0x20e>
 800ae5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae60:	445a      	add	r2, fp
 800ae62:	9209      	str	r2, [sp, #36]	; 0x24
 800ae64:	f89a 3000 	ldrb.w	r3, [sl]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f000 80a2 	beq.w	800afb2 <_vfiprintf_r+0x20e>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	f04f 32ff 	mov.w	r2, #4294967295
 800ae74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae78:	f10a 0a01 	add.w	sl, sl, #1
 800ae7c:	9304      	str	r3, [sp, #16]
 800ae7e:	9307      	str	r3, [sp, #28]
 800ae80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae84:	931a      	str	r3, [sp, #104]	; 0x68
 800ae86:	4654      	mov	r4, sl
 800ae88:	2205      	movs	r2, #5
 800ae8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae8e:	4858      	ldr	r0, [pc, #352]	; (800aff0 <_vfiprintf_r+0x24c>)
 800ae90:	f7f5 f9b6 	bl	8000200 <memchr>
 800ae94:	9a04      	ldr	r2, [sp, #16]
 800ae96:	b9d8      	cbnz	r0, 800aed0 <_vfiprintf_r+0x12c>
 800ae98:	06d1      	lsls	r1, r2, #27
 800ae9a:	bf44      	itt	mi
 800ae9c:	2320      	movmi	r3, #32
 800ae9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aea2:	0713      	lsls	r3, r2, #28
 800aea4:	bf44      	itt	mi
 800aea6:	232b      	movmi	r3, #43	; 0x2b
 800aea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aeac:	f89a 3000 	ldrb.w	r3, [sl]
 800aeb0:	2b2a      	cmp	r3, #42	; 0x2a
 800aeb2:	d015      	beq.n	800aee0 <_vfiprintf_r+0x13c>
 800aeb4:	9a07      	ldr	r2, [sp, #28]
 800aeb6:	4654      	mov	r4, sl
 800aeb8:	2000      	movs	r0, #0
 800aeba:	f04f 0c0a 	mov.w	ip, #10
 800aebe:	4621      	mov	r1, r4
 800aec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aec4:	3b30      	subs	r3, #48	; 0x30
 800aec6:	2b09      	cmp	r3, #9
 800aec8:	d94e      	bls.n	800af68 <_vfiprintf_r+0x1c4>
 800aeca:	b1b0      	cbz	r0, 800aefa <_vfiprintf_r+0x156>
 800aecc:	9207      	str	r2, [sp, #28]
 800aece:	e014      	b.n	800aefa <_vfiprintf_r+0x156>
 800aed0:	eba0 0308 	sub.w	r3, r0, r8
 800aed4:	fa09 f303 	lsl.w	r3, r9, r3
 800aed8:	4313      	orrs	r3, r2
 800aeda:	9304      	str	r3, [sp, #16]
 800aedc:	46a2      	mov	sl, r4
 800aede:	e7d2      	b.n	800ae86 <_vfiprintf_r+0xe2>
 800aee0:	9b03      	ldr	r3, [sp, #12]
 800aee2:	1d19      	adds	r1, r3, #4
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	9103      	str	r1, [sp, #12]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	bfbb      	ittet	lt
 800aeec:	425b      	neglt	r3, r3
 800aeee:	f042 0202 	orrlt.w	r2, r2, #2
 800aef2:	9307      	strge	r3, [sp, #28]
 800aef4:	9307      	strlt	r3, [sp, #28]
 800aef6:	bfb8      	it	lt
 800aef8:	9204      	strlt	r2, [sp, #16]
 800aefa:	7823      	ldrb	r3, [r4, #0]
 800aefc:	2b2e      	cmp	r3, #46	; 0x2e
 800aefe:	d10c      	bne.n	800af1a <_vfiprintf_r+0x176>
 800af00:	7863      	ldrb	r3, [r4, #1]
 800af02:	2b2a      	cmp	r3, #42	; 0x2a
 800af04:	d135      	bne.n	800af72 <_vfiprintf_r+0x1ce>
 800af06:	9b03      	ldr	r3, [sp, #12]
 800af08:	1d1a      	adds	r2, r3, #4
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	9203      	str	r2, [sp, #12]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	bfb8      	it	lt
 800af12:	f04f 33ff 	movlt.w	r3, #4294967295
 800af16:	3402      	adds	r4, #2
 800af18:	9305      	str	r3, [sp, #20]
 800af1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b000 <_vfiprintf_r+0x25c>
 800af1e:	7821      	ldrb	r1, [r4, #0]
 800af20:	2203      	movs	r2, #3
 800af22:	4650      	mov	r0, sl
 800af24:	f7f5 f96c 	bl	8000200 <memchr>
 800af28:	b140      	cbz	r0, 800af3c <_vfiprintf_r+0x198>
 800af2a:	2340      	movs	r3, #64	; 0x40
 800af2c:	eba0 000a 	sub.w	r0, r0, sl
 800af30:	fa03 f000 	lsl.w	r0, r3, r0
 800af34:	9b04      	ldr	r3, [sp, #16]
 800af36:	4303      	orrs	r3, r0
 800af38:	3401      	adds	r4, #1
 800af3a:	9304      	str	r3, [sp, #16]
 800af3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af40:	482c      	ldr	r0, [pc, #176]	; (800aff4 <_vfiprintf_r+0x250>)
 800af42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af46:	2206      	movs	r2, #6
 800af48:	f7f5 f95a 	bl	8000200 <memchr>
 800af4c:	2800      	cmp	r0, #0
 800af4e:	d03f      	beq.n	800afd0 <_vfiprintf_r+0x22c>
 800af50:	4b29      	ldr	r3, [pc, #164]	; (800aff8 <_vfiprintf_r+0x254>)
 800af52:	bb1b      	cbnz	r3, 800af9c <_vfiprintf_r+0x1f8>
 800af54:	9b03      	ldr	r3, [sp, #12]
 800af56:	3307      	adds	r3, #7
 800af58:	f023 0307 	bic.w	r3, r3, #7
 800af5c:	3308      	adds	r3, #8
 800af5e:	9303      	str	r3, [sp, #12]
 800af60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af62:	443b      	add	r3, r7
 800af64:	9309      	str	r3, [sp, #36]	; 0x24
 800af66:	e767      	b.n	800ae38 <_vfiprintf_r+0x94>
 800af68:	fb0c 3202 	mla	r2, ip, r2, r3
 800af6c:	460c      	mov	r4, r1
 800af6e:	2001      	movs	r0, #1
 800af70:	e7a5      	b.n	800aebe <_vfiprintf_r+0x11a>
 800af72:	2300      	movs	r3, #0
 800af74:	3401      	adds	r4, #1
 800af76:	9305      	str	r3, [sp, #20]
 800af78:	4619      	mov	r1, r3
 800af7a:	f04f 0c0a 	mov.w	ip, #10
 800af7e:	4620      	mov	r0, r4
 800af80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af84:	3a30      	subs	r2, #48	; 0x30
 800af86:	2a09      	cmp	r2, #9
 800af88:	d903      	bls.n	800af92 <_vfiprintf_r+0x1ee>
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d0c5      	beq.n	800af1a <_vfiprintf_r+0x176>
 800af8e:	9105      	str	r1, [sp, #20]
 800af90:	e7c3      	b.n	800af1a <_vfiprintf_r+0x176>
 800af92:	fb0c 2101 	mla	r1, ip, r1, r2
 800af96:	4604      	mov	r4, r0
 800af98:	2301      	movs	r3, #1
 800af9a:	e7f0      	b.n	800af7e <_vfiprintf_r+0x1da>
 800af9c:	ab03      	add	r3, sp, #12
 800af9e:	9300      	str	r3, [sp, #0]
 800afa0:	462a      	mov	r2, r5
 800afa2:	4b16      	ldr	r3, [pc, #88]	; (800affc <_vfiprintf_r+0x258>)
 800afa4:	a904      	add	r1, sp, #16
 800afa6:	4630      	mov	r0, r6
 800afa8:	f3af 8000 	nop.w
 800afac:	4607      	mov	r7, r0
 800afae:	1c78      	adds	r0, r7, #1
 800afb0:	d1d6      	bne.n	800af60 <_vfiprintf_r+0x1bc>
 800afb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afb4:	07d9      	lsls	r1, r3, #31
 800afb6:	d405      	bmi.n	800afc4 <_vfiprintf_r+0x220>
 800afb8:	89ab      	ldrh	r3, [r5, #12]
 800afba:	059a      	lsls	r2, r3, #22
 800afbc:	d402      	bmi.n	800afc4 <_vfiprintf_r+0x220>
 800afbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afc0:	f7ff fe53 	bl	800ac6a <__retarget_lock_release_recursive>
 800afc4:	89ab      	ldrh	r3, [r5, #12]
 800afc6:	065b      	lsls	r3, r3, #25
 800afc8:	f53f af12 	bmi.w	800adf0 <_vfiprintf_r+0x4c>
 800afcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afce:	e711      	b.n	800adf4 <_vfiprintf_r+0x50>
 800afd0:	ab03      	add	r3, sp, #12
 800afd2:	9300      	str	r3, [sp, #0]
 800afd4:	462a      	mov	r2, r5
 800afd6:	4b09      	ldr	r3, [pc, #36]	; (800affc <_vfiprintf_r+0x258>)
 800afd8:	a904      	add	r1, sp, #16
 800afda:	4630      	mov	r0, r6
 800afdc:	f000 f880 	bl	800b0e0 <_printf_i>
 800afe0:	e7e4      	b.n	800afac <_vfiprintf_r+0x208>
 800afe2:	bf00      	nop
 800afe4:	081d4414 	.word	0x081d4414
 800afe8:	081d4434 	.word	0x081d4434
 800afec:	081d43f4 	.word	0x081d43f4
 800aff0:	081d4454 	.word	0x081d4454
 800aff4:	081d445e 	.word	0x081d445e
 800aff8:	00000000 	.word	0x00000000
 800affc:	0800ad7f 	.word	0x0800ad7f
 800b000:	081d445a 	.word	0x081d445a

0800b004 <_printf_common>:
 800b004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b008:	4616      	mov	r6, r2
 800b00a:	4699      	mov	r9, r3
 800b00c:	688a      	ldr	r2, [r1, #8]
 800b00e:	690b      	ldr	r3, [r1, #16]
 800b010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b014:	4293      	cmp	r3, r2
 800b016:	bfb8      	it	lt
 800b018:	4613      	movlt	r3, r2
 800b01a:	6033      	str	r3, [r6, #0]
 800b01c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b020:	4607      	mov	r7, r0
 800b022:	460c      	mov	r4, r1
 800b024:	b10a      	cbz	r2, 800b02a <_printf_common+0x26>
 800b026:	3301      	adds	r3, #1
 800b028:	6033      	str	r3, [r6, #0]
 800b02a:	6823      	ldr	r3, [r4, #0]
 800b02c:	0699      	lsls	r1, r3, #26
 800b02e:	bf42      	ittt	mi
 800b030:	6833      	ldrmi	r3, [r6, #0]
 800b032:	3302      	addmi	r3, #2
 800b034:	6033      	strmi	r3, [r6, #0]
 800b036:	6825      	ldr	r5, [r4, #0]
 800b038:	f015 0506 	ands.w	r5, r5, #6
 800b03c:	d106      	bne.n	800b04c <_printf_common+0x48>
 800b03e:	f104 0a19 	add.w	sl, r4, #25
 800b042:	68e3      	ldr	r3, [r4, #12]
 800b044:	6832      	ldr	r2, [r6, #0]
 800b046:	1a9b      	subs	r3, r3, r2
 800b048:	42ab      	cmp	r3, r5
 800b04a:	dc26      	bgt.n	800b09a <_printf_common+0x96>
 800b04c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b050:	1e13      	subs	r3, r2, #0
 800b052:	6822      	ldr	r2, [r4, #0]
 800b054:	bf18      	it	ne
 800b056:	2301      	movne	r3, #1
 800b058:	0692      	lsls	r2, r2, #26
 800b05a:	d42b      	bmi.n	800b0b4 <_printf_common+0xb0>
 800b05c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b060:	4649      	mov	r1, r9
 800b062:	4638      	mov	r0, r7
 800b064:	47c0      	blx	r8
 800b066:	3001      	adds	r0, #1
 800b068:	d01e      	beq.n	800b0a8 <_printf_common+0xa4>
 800b06a:	6823      	ldr	r3, [r4, #0]
 800b06c:	68e5      	ldr	r5, [r4, #12]
 800b06e:	6832      	ldr	r2, [r6, #0]
 800b070:	f003 0306 	and.w	r3, r3, #6
 800b074:	2b04      	cmp	r3, #4
 800b076:	bf08      	it	eq
 800b078:	1aad      	subeq	r5, r5, r2
 800b07a:	68a3      	ldr	r3, [r4, #8]
 800b07c:	6922      	ldr	r2, [r4, #16]
 800b07e:	bf0c      	ite	eq
 800b080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b084:	2500      	movne	r5, #0
 800b086:	4293      	cmp	r3, r2
 800b088:	bfc4      	itt	gt
 800b08a:	1a9b      	subgt	r3, r3, r2
 800b08c:	18ed      	addgt	r5, r5, r3
 800b08e:	2600      	movs	r6, #0
 800b090:	341a      	adds	r4, #26
 800b092:	42b5      	cmp	r5, r6
 800b094:	d11a      	bne.n	800b0cc <_printf_common+0xc8>
 800b096:	2000      	movs	r0, #0
 800b098:	e008      	b.n	800b0ac <_printf_common+0xa8>
 800b09a:	2301      	movs	r3, #1
 800b09c:	4652      	mov	r2, sl
 800b09e:	4649      	mov	r1, r9
 800b0a0:	4638      	mov	r0, r7
 800b0a2:	47c0      	blx	r8
 800b0a4:	3001      	adds	r0, #1
 800b0a6:	d103      	bne.n	800b0b0 <_printf_common+0xac>
 800b0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0b0:	3501      	adds	r5, #1
 800b0b2:	e7c6      	b.n	800b042 <_printf_common+0x3e>
 800b0b4:	18e1      	adds	r1, r4, r3
 800b0b6:	1c5a      	adds	r2, r3, #1
 800b0b8:	2030      	movs	r0, #48	; 0x30
 800b0ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0be:	4422      	add	r2, r4
 800b0c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0c8:	3302      	adds	r3, #2
 800b0ca:	e7c7      	b.n	800b05c <_printf_common+0x58>
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	4622      	mov	r2, r4
 800b0d0:	4649      	mov	r1, r9
 800b0d2:	4638      	mov	r0, r7
 800b0d4:	47c0      	blx	r8
 800b0d6:	3001      	adds	r0, #1
 800b0d8:	d0e6      	beq.n	800b0a8 <_printf_common+0xa4>
 800b0da:	3601      	adds	r6, #1
 800b0dc:	e7d9      	b.n	800b092 <_printf_common+0x8e>
	...

0800b0e0 <_printf_i>:
 800b0e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0e4:	7e0f      	ldrb	r7, [r1, #24]
 800b0e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b0e8:	2f78      	cmp	r7, #120	; 0x78
 800b0ea:	4691      	mov	r9, r2
 800b0ec:	4680      	mov	r8, r0
 800b0ee:	460c      	mov	r4, r1
 800b0f0:	469a      	mov	sl, r3
 800b0f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b0f6:	d807      	bhi.n	800b108 <_printf_i+0x28>
 800b0f8:	2f62      	cmp	r7, #98	; 0x62
 800b0fa:	d80a      	bhi.n	800b112 <_printf_i+0x32>
 800b0fc:	2f00      	cmp	r7, #0
 800b0fe:	f000 80d8 	beq.w	800b2b2 <_printf_i+0x1d2>
 800b102:	2f58      	cmp	r7, #88	; 0x58
 800b104:	f000 80a3 	beq.w	800b24e <_printf_i+0x16e>
 800b108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b10c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b110:	e03a      	b.n	800b188 <_printf_i+0xa8>
 800b112:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b116:	2b15      	cmp	r3, #21
 800b118:	d8f6      	bhi.n	800b108 <_printf_i+0x28>
 800b11a:	a101      	add	r1, pc, #4	; (adr r1, 800b120 <_printf_i+0x40>)
 800b11c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b120:	0800b179 	.word	0x0800b179
 800b124:	0800b18d 	.word	0x0800b18d
 800b128:	0800b109 	.word	0x0800b109
 800b12c:	0800b109 	.word	0x0800b109
 800b130:	0800b109 	.word	0x0800b109
 800b134:	0800b109 	.word	0x0800b109
 800b138:	0800b18d 	.word	0x0800b18d
 800b13c:	0800b109 	.word	0x0800b109
 800b140:	0800b109 	.word	0x0800b109
 800b144:	0800b109 	.word	0x0800b109
 800b148:	0800b109 	.word	0x0800b109
 800b14c:	0800b299 	.word	0x0800b299
 800b150:	0800b1bd 	.word	0x0800b1bd
 800b154:	0800b27b 	.word	0x0800b27b
 800b158:	0800b109 	.word	0x0800b109
 800b15c:	0800b109 	.word	0x0800b109
 800b160:	0800b2bb 	.word	0x0800b2bb
 800b164:	0800b109 	.word	0x0800b109
 800b168:	0800b1bd 	.word	0x0800b1bd
 800b16c:	0800b109 	.word	0x0800b109
 800b170:	0800b109 	.word	0x0800b109
 800b174:	0800b283 	.word	0x0800b283
 800b178:	682b      	ldr	r3, [r5, #0]
 800b17a:	1d1a      	adds	r2, r3, #4
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	602a      	str	r2, [r5, #0]
 800b180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b188:	2301      	movs	r3, #1
 800b18a:	e0a3      	b.n	800b2d4 <_printf_i+0x1f4>
 800b18c:	6820      	ldr	r0, [r4, #0]
 800b18e:	6829      	ldr	r1, [r5, #0]
 800b190:	0606      	lsls	r6, r0, #24
 800b192:	f101 0304 	add.w	r3, r1, #4
 800b196:	d50a      	bpl.n	800b1ae <_printf_i+0xce>
 800b198:	680e      	ldr	r6, [r1, #0]
 800b19a:	602b      	str	r3, [r5, #0]
 800b19c:	2e00      	cmp	r6, #0
 800b19e:	da03      	bge.n	800b1a8 <_printf_i+0xc8>
 800b1a0:	232d      	movs	r3, #45	; 0x2d
 800b1a2:	4276      	negs	r6, r6
 800b1a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1a8:	485e      	ldr	r0, [pc, #376]	; (800b324 <_printf_i+0x244>)
 800b1aa:	230a      	movs	r3, #10
 800b1ac:	e019      	b.n	800b1e2 <_printf_i+0x102>
 800b1ae:	680e      	ldr	r6, [r1, #0]
 800b1b0:	602b      	str	r3, [r5, #0]
 800b1b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b1b6:	bf18      	it	ne
 800b1b8:	b236      	sxthne	r6, r6
 800b1ba:	e7ef      	b.n	800b19c <_printf_i+0xbc>
 800b1bc:	682b      	ldr	r3, [r5, #0]
 800b1be:	6820      	ldr	r0, [r4, #0]
 800b1c0:	1d19      	adds	r1, r3, #4
 800b1c2:	6029      	str	r1, [r5, #0]
 800b1c4:	0601      	lsls	r1, r0, #24
 800b1c6:	d501      	bpl.n	800b1cc <_printf_i+0xec>
 800b1c8:	681e      	ldr	r6, [r3, #0]
 800b1ca:	e002      	b.n	800b1d2 <_printf_i+0xf2>
 800b1cc:	0646      	lsls	r6, r0, #25
 800b1ce:	d5fb      	bpl.n	800b1c8 <_printf_i+0xe8>
 800b1d0:	881e      	ldrh	r6, [r3, #0]
 800b1d2:	4854      	ldr	r0, [pc, #336]	; (800b324 <_printf_i+0x244>)
 800b1d4:	2f6f      	cmp	r7, #111	; 0x6f
 800b1d6:	bf0c      	ite	eq
 800b1d8:	2308      	moveq	r3, #8
 800b1da:	230a      	movne	r3, #10
 800b1dc:	2100      	movs	r1, #0
 800b1de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b1e2:	6865      	ldr	r5, [r4, #4]
 800b1e4:	60a5      	str	r5, [r4, #8]
 800b1e6:	2d00      	cmp	r5, #0
 800b1e8:	bfa2      	ittt	ge
 800b1ea:	6821      	ldrge	r1, [r4, #0]
 800b1ec:	f021 0104 	bicge.w	r1, r1, #4
 800b1f0:	6021      	strge	r1, [r4, #0]
 800b1f2:	b90e      	cbnz	r6, 800b1f8 <_printf_i+0x118>
 800b1f4:	2d00      	cmp	r5, #0
 800b1f6:	d04d      	beq.n	800b294 <_printf_i+0x1b4>
 800b1f8:	4615      	mov	r5, r2
 800b1fa:	fbb6 f1f3 	udiv	r1, r6, r3
 800b1fe:	fb03 6711 	mls	r7, r3, r1, r6
 800b202:	5dc7      	ldrb	r7, [r0, r7]
 800b204:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b208:	4637      	mov	r7, r6
 800b20a:	42bb      	cmp	r3, r7
 800b20c:	460e      	mov	r6, r1
 800b20e:	d9f4      	bls.n	800b1fa <_printf_i+0x11a>
 800b210:	2b08      	cmp	r3, #8
 800b212:	d10b      	bne.n	800b22c <_printf_i+0x14c>
 800b214:	6823      	ldr	r3, [r4, #0]
 800b216:	07de      	lsls	r6, r3, #31
 800b218:	d508      	bpl.n	800b22c <_printf_i+0x14c>
 800b21a:	6923      	ldr	r3, [r4, #16]
 800b21c:	6861      	ldr	r1, [r4, #4]
 800b21e:	4299      	cmp	r1, r3
 800b220:	bfde      	ittt	le
 800b222:	2330      	movle	r3, #48	; 0x30
 800b224:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b228:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b22c:	1b52      	subs	r2, r2, r5
 800b22e:	6122      	str	r2, [r4, #16]
 800b230:	f8cd a000 	str.w	sl, [sp]
 800b234:	464b      	mov	r3, r9
 800b236:	aa03      	add	r2, sp, #12
 800b238:	4621      	mov	r1, r4
 800b23a:	4640      	mov	r0, r8
 800b23c:	f7ff fee2 	bl	800b004 <_printf_common>
 800b240:	3001      	adds	r0, #1
 800b242:	d14c      	bne.n	800b2de <_printf_i+0x1fe>
 800b244:	f04f 30ff 	mov.w	r0, #4294967295
 800b248:	b004      	add	sp, #16
 800b24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b24e:	4835      	ldr	r0, [pc, #212]	; (800b324 <_printf_i+0x244>)
 800b250:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b254:	6829      	ldr	r1, [r5, #0]
 800b256:	6823      	ldr	r3, [r4, #0]
 800b258:	f851 6b04 	ldr.w	r6, [r1], #4
 800b25c:	6029      	str	r1, [r5, #0]
 800b25e:	061d      	lsls	r5, r3, #24
 800b260:	d514      	bpl.n	800b28c <_printf_i+0x1ac>
 800b262:	07df      	lsls	r7, r3, #31
 800b264:	bf44      	itt	mi
 800b266:	f043 0320 	orrmi.w	r3, r3, #32
 800b26a:	6023      	strmi	r3, [r4, #0]
 800b26c:	b91e      	cbnz	r6, 800b276 <_printf_i+0x196>
 800b26e:	6823      	ldr	r3, [r4, #0]
 800b270:	f023 0320 	bic.w	r3, r3, #32
 800b274:	6023      	str	r3, [r4, #0]
 800b276:	2310      	movs	r3, #16
 800b278:	e7b0      	b.n	800b1dc <_printf_i+0xfc>
 800b27a:	6823      	ldr	r3, [r4, #0]
 800b27c:	f043 0320 	orr.w	r3, r3, #32
 800b280:	6023      	str	r3, [r4, #0]
 800b282:	2378      	movs	r3, #120	; 0x78
 800b284:	4828      	ldr	r0, [pc, #160]	; (800b328 <_printf_i+0x248>)
 800b286:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b28a:	e7e3      	b.n	800b254 <_printf_i+0x174>
 800b28c:	0659      	lsls	r1, r3, #25
 800b28e:	bf48      	it	mi
 800b290:	b2b6      	uxthmi	r6, r6
 800b292:	e7e6      	b.n	800b262 <_printf_i+0x182>
 800b294:	4615      	mov	r5, r2
 800b296:	e7bb      	b.n	800b210 <_printf_i+0x130>
 800b298:	682b      	ldr	r3, [r5, #0]
 800b29a:	6826      	ldr	r6, [r4, #0]
 800b29c:	6961      	ldr	r1, [r4, #20]
 800b29e:	1d18      	adds	r0, r3, #4
 800b2a0:	6028      	str	r0, [r5, #0]
 800b2a2:	0635      	lsls	r5, r6, #24
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	d501      	bpl.n	800b2ac <_printf_i+0x1cc>
 800b2a8:	6019      	str	r1, [r3, #0]
 800b2aa:	e002      	b.n	800b2b2 <_printf_i+0x1d2>
 800b2ac:	0670      	lsls	r0, r6, #25
 800b2ae:	d5fb      	bpl.n	800b2a8 <_printf_i+0x1c8>
 800b2b0:	8019      	strh	r1, [r3, #0]
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	6123      	str	r3, [r4, #16]
 800b2b6:	4615      	mov	r5, r2
 800b2b8:	e7ba      	b.n	800b230 <_printf_i+0x150>
 800b2ba:	682b      	ldr	r3, [r5, #0]
 800b2bc:	1d1a      	adds	r2, r3, #4
 800b2be:	602a      	str	r2, [r5, #0]
 800b2c0:	681d      	ldr	r5, [r3, #0]
 800b2c2:	6862      	ldr	r2, [r4, #4]
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	4628      	mov	r0, r5
 800b2c8:	f7f4 ff9a 	bl	8000200 <memchr>
 800b2cc:	b108      	cbz	r0, 800b2d2 <_printf_i+0x1f2>
 800b2ce:	1b40      	subs	r0, r0, r5
 800b2d0:	6060      	str	r0, [r4, #4]
 800b2d2:	6863      	ldr	r3, [r4, #4]
 800b2d4:	6123      	str	r3, [r4, #16]
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2dc:	e7a8      	b.n	800b230 <_printf_i+0x150>
 800b2de:	6923      	ldr	r3, [r4, #16]
 800b2e0:	462a      	mov	r2, r5
 800b2e2:	4649      	mov	r1, r9
 800b2e4:	4640      	mov	r0, r8
 800b2e6:	47d0      	blx	sl
 800b2e8:	3001      	adds	r0, #1
 800b2ea:	d0ab      	beq.n	800b244 <_printf_i+0x164>
 800b2ec:	6823      	ldr	r3, [r4, #0]
 800b2ee:	079b      	lsls	r3, r3, #30
 800b2f0:	d413      	bmi.n	800b31a <_printf_i+0x23a>
 800b2f2:	68e0      	ldr	r0, [r4, #12]
 800b2f4:	9b03      	ldr	r3, [sp, #12]
 800b2f6:	4298      	cmp	r0, r3
 800b2f8:	bfb8      	it	lt
 800b2fa:	4618      	movlt	r0, r3
 800b2fc:	e7a4      	b.n	800b248 <_printf_i+0x168>
 800b2fe:	2301      	movs	r3, #1
 800b300:	4632      	mov	r2, r6
 800b302:	4649      	mov	r1, r9
 800b304:	4640      	mov	r0, r8
 800b306:	47d0      	blx	sl
 800b308:	3001      	adds	r0, #1
 800b30a:	d09b      	beq.n	800b244 <_printf_i+0x164>
 800b30c:	3501      	adds	r5, #1
 800b30e:	68e3      	ldr	r3, [r4, #12]
 800b310:	9903      	ldr	r1, [sp, #12]
 800b312:	1a5b      	subs	r3, r3, r1
 800b314:	42ab      	cmp	r3, r5
 800b316:	dcf2      	bgt.n	800b2fe <_printf_i+0x21e>
 800b318:	e7eb      	b.n	800b2f2 <_printf_i+0x212>
 800b31a:	2500      	movs	r5, #0
 800b31c:	f104 0619 	add.w	r6, r4, #25
 800b320:	e7f5      	b.n	800b30e <_printf_i+0x22e>
 800b322:	bf00      	nop
 800b324:	081d4465 	.word	0x081d4465
 800b328:	081d4476 	.word	0x081d4476

0800b32c <__sread>:
 800b32c:	b510      	push	{r4, lr}
 800b32e:	460c      	mov	r4, r1
 800b330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b334:	f000 f894 	bl	800b460 <_read_r>
 800b338:	2800      	cmp	r0, #0
 800b33a:	bfab      	itete	ge
 800b33c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b33e:	89a3      	ldrhlt	r3, [r4, #12]
 800b340:	181b      	addge	r3, r3, r0
 800b342:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b346:	bfac      	ite	ge
 800b348:	6563      	strge	r3, [r4, #84]	; 0x54
 800b34a:	81a3      	strhlt	r3, [r4, #12]
 800b34c:	bd10      	pop	{r4, pc}

0800b34e <__swrite>:
 800b34e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b352:	461f      	mov	r7, r3
 800b354:	898b      	ldrh	r3, [r1, #12]
 800b356:	05db      	lsls	r3, r3, #23
 800b358:	4605      	mov	r5, r0
 800b35a:	460c      	mov	r4, r1
 800b35c:	4616      	mov	r6, r2
 800b35e:	d505      	bpl.n	800b36c <__swrite+0x1e>
 800b360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b364:	2302      	movs	r3, #2
 800b366:	2200      	movs	r2, #0
 800b368:	f000 f868 	bl	800b43c <_lseek_r>
 800b36c:	89a3      	ldrh	r3, [r4, #12]
 800b36e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b372:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b376:	81a3      	strh	r3, [r4, #12]
 800b378:	4632      	mov	r2, r6
 800b37a:	463b      	mov	r3, r7
 800b37c:	4628      	mov	r0, r5
 800b37e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b382:	f000 b817 	b.w	800b3b4 <_write_r>

0800b386 <__sseek>:
 800b386:	b510      	push	{r4, lr}
 800b388:	460c      	mov	r4, r1
 800b38a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b38e:	f000 f855 	bl	800b43c <_lseek_r>
 800b392:	1c43      	adds	r3, r0, #1
 800b394:	89a3      	ldrh	r3, [r4, #12]
 800b396:	bf15      	itete	ne
 800b398:	6560      	strne	r0, [r4, #84]	; 0x54
 800b39a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b39e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3a2:	81a3      	strheq	r3, [r4, #12]
 800b3a4:	bf18      	it	ne
 800b3a6:	81a3      	strhne	r3, [r4, #12]
 800b3a8:	bd10      	pop	{r4, pc}

0800b3aa <__sclose>:
 800b3aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ae:	f000 b813 	b.w	800b3d8 <_close_r>
	...

0800b3b4 <_write_r>:
 800b3b4:	b538      	push	{r3, r4, r5, lr}
 800b3b6:	4d07      	ldr	r5, [pc, #28]	; (800b3d4 <_write_r+0x20>)
 800b3b8:	4604      	mov	r4, r0
 800b3ba:	4608      	mov	r0, r1
 800b3bc:	4611      	mov	r1, r2
 800b3be:	2200      	movs	r2, #0
 800b3c0:	602a      	str	r2, [r5, #0]
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	f000 f9ba 	bl	800b73c <_write>
 800b3c8:	1c43      	adds	r3, r0, #1
 800b3ca:	d102      	bne.n	800b3d2 <_write_r+0x1e>
 800b3cc:	682b      	ldr	r3, [r5, #0]
 800b3ce:	b103      	cbz	r3, 800b3d2 <_write_r+0x1e>
 800b3d0:	6023      	str	r3, [r4, #0]
 800b3d2:	bd38      	pop	{r3, r4, r5, pc}
 800b3d4:	20028724 	.word	0x20028724

0800b3d8 <_close_r>:
 800b3d8:	b538      	push	{r3, r4, r5, lr}
 800b3da:	4d06      	ldr	r5, [pc, #24]	; (800b3f4 <_close_r+0x1c>)
 800b3dc:	2300      	movs	r3, #0
 800b3de:	4604      	mov	r4, r0
 800b3e0:	4608      	mov	r0, r1
 800b3e2:	602b      	str	r3, [r5, #0]
 800b3e4:	f000 f982 	bl	800b6ec <_close>
 800b3e8:	1c43      	adds	r3, r0, #1
 800b3ea:	d102      	bne.n	800b3f2 <_close_r+0x1a>
 800b3ec:	682b      	ldr	r3, [r5, #0]
 800b3ee:	b103      	cbz	r3, 800b3f2 <_close_r+0x1a>
 800b3f0:	6023      	str	r3, [r4, #0]
 800b3f2:	bd38      	pop	{r3, r4, r5, pc}
 800b3f4:	20028724 	.word	0x20028724

0800b3f8 <_fstat_r>:
 800b3f8:	b538      	push	{r3, r4, r5, lr}
 800b3fa:	4d07      	ldr	r5, [pc, #28]	; (800b418 <_fstat_r+0x20>)
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	4604      	mov	r4, r0
 800b400:	4608      	mov	r0, r1
 800b402:	4611      	mov	r1, r2
 800b404:	602b      	str	r3, [r5, #0]
 800b406:	f000 f979 	bl	800b6fc <_fstat>
 800b40a:	1c43      	adds	r3, r0, #1
 800b40c:	d102      	bne.n	800b414 <_fstat_r+0x1c>
 800b40e:	682b      	ldr	r3, [r5, #0]
 800b410:	b103      	cbz	r3, 800b414 <_fstat_r+0x1c>
 800b412:	6023      	str	r3, [r4, #0]
 800b414:	bd38      	pop	{r3, r4, r5, pc}
 800b416:	bf00      	nop
 800b418:	20028724 	.word	0x20028724

0800b41c <_isatty_r>:
 800b41c:	b538      	push	{r3, r4, r5, lr}
 800b41e:	4d06      	ldr	r5, [pc, #24]	; (800b438 <_isatty_r+0x1c>)
 800b420:	2300      	movs	r3, #0
 800b422:	4604      	mov	r4, r0
 800b424:	4608      	mov	r0, r1
 800b426:	602b      	str	r3, [r5, #0]
 800b428:	f000 f970 	bl	800b70c <_isatty>
 800b42c:	1c43      	adds	r3, r0, #1
 800b42e:	d102      	bne.n	800b436 <_isatty_r+0x1a>
 800b430:	682b      	ldr	r3, [r5, #0]
 800b432:	b103      	cbz	r3, 800b436 <_isatty_r+0x1a>
 800b434:	6023      	str	r3, [r4, #0]
 800b436:	bd38      	pop	{r3, r4, r5, pc}
 800b438:	20028724 	.word	0x20028724

0800b43c <_lseek_r>:
 800b43c:	b538      	push	{r3, r4, r5, lr}
 800b43e:	4d07      	ldr	r5, [pc, #28]	; (800b45c <_lseek_r+0x20>)
 800b440:	4604      	mov	r4, r0
 800b442:	4608      	mov	r0, r1
 800b444:	4611      	mov	r1, r2
 800b446:	2200      	movs	r2, #0
 800b448:	602a      	str	r2, [r5, #0]
 800b44a:	461a      	mov	r2, r3
 800b44c:	f000 f966 	bl	800b71c <_lseek>
 800b450:	1c43      	adds	r3, r0, #1
 800b452:	d102      	bne.n	800b45a <_lseek_r+0x1e>
 800b454:	682b      	ldr	r3, [r5, #0]
 800b456:	b103      	cbz	r3, 800b45a <_lseek_r+0x1e>
 800b458:	6023      	str	r3, [r4, #0]
 800b45a:	bd38      	pop	{r3, r4, r5, pc}
 800b45c:	20028724 	.word	0x20028724

0800b460 <_read_r>:
 800b460:	b538      	push	{r3, r4, r5, lr}
 800b462:	4d07      	ldr	r5, [pc, #28]	; (800b480 <_read_r+0x20>)
 800b464:	4604      	mov	r4, r0
 800b466:	4608      	mov	r0, r1
 800b468:	4611      	mov	r1, r2
 800b46a:	2200      	movs	r2, #0
 800b46c:	602a      	str	r2, [r5, #0]
 800b46e:	461a      	mov	r2, r3
 800b470:	f000 f95c 	bl	800b72c <_read>
 800b474:	1c43      	adds	r3, r0, #1
 800b476:	d102      	bne.n	800b47e <_read_r+0x1e>
 800b478:	682b      	ldr	r3, [r5, #0]
 800b47a:	b103      	cbz	r3, 800b47e <_read_r+0x1e>
 800b47c:	6023      	str	r3, [r4, #0]
 800b47e:	bd38      	pop	{r3, r4, r5, pc}
 800b480:	20028724 	.word	0x20028724

0800b484 <expf>:
 800b484:	b508      	push	{r3, lr}
 800b486:	ed2d 8b02 	vpush	{d8}
 800b48a:	eef0 8a40 	vmov.f32	s17, s0
 800b48e:	f000 f82f 	bl	800b4f0 <__ieee754_expf>
 800b492:	eeb0 8a40 	vmov.f32	s16, s0
 800b496:	eeb0 0a68 	vmov.f32	s0, s17
 800b49a:	f000 f919 	bl	800b6d0 <finitef>
 800b49e:	b160      	cbz	r0, 800b4ba <expf+0x36>
 800b4a0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800b4e0 <expf+0x5c>
 800b4a4:	eef4 8ae7 	vcmpe.f32	s17, s15
 800b4a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ac:	dd0a      	ble.n	800b4c4 <expf+0x40>
 800b4ae:	f7fe ffa5 	bl	800a3fc <__errno>
 800b4b2:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800b4e4 <expf+0x60>
 800b4b6:	2322      	movs	r3, #34	; 0x22
 800b4b8:	6003      	str	r3, [r0, #0]
 800b4ba:	eeb0 0a48 	vmov.f32	s0, s16
 800b4be:	ecbd 8b02 	vpop	{d8}
 800b4c2:	bd08      	pop	{r3, pc}
 800b4c4:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b4e8 <expf+0x64>
 800b4c8:	eef4 8ae7 	vcmpe.f32	s17, s15
 800b4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4d0:	d5f3      	bpl.n	800b4ba <expf+0x36>
 800b4d2:	f7fe ff93 	bl	800a3fc <__errno>
 800b4d6:	2322      	movs	r3, #34	; 0x22
 800b4d8:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800b4ec <expf+0x68>
 800b4dc:	6003      	str	r3, [r0, #0]
 800b4de:	e7ec      	b.n	800b4ba <expf+0x36>
 800b4e0:	42b17180 	.word	0x42b17180
 800b4e4:	7f800000 	.word	0x7f800000
 800b4e8:	c2cff1b5 	.word	0xc2cff1b5
 800b4ec:	00000000 	.word	0x00000000

0800b4f0 <__ieee754_expf>:
 800b4f0:	ee10 2a10 	vmov	r2, s0
 800b4f4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800b4f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b4fc:	d902      	bls.n	800b504 <__ieee754_expf+0x14>
 800b4fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b502:	4770      	bx	lr
 800b504:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800b508:	d106      	bne.n	800b518 <__ieee754_expf+0x28>
 800b50a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800b644 <__ieee754_expf+0x154>
 800b50e:	2b00      	cmp	r3, #0
 800b510:	bf18      	it	ne
 800b512:	eeb0 0a67 	vmovne.f32	s0, s15
 800b516:	4770      	bx	lr
 800b518:	484b      	ldr	r0, [pc, #300]	; (800b648 <__ieee754_expf+0x158>)
 800b51a:	4282      	cmp	r2, r0
 800b51c:	dd02      	ble.n	800b524 <__ieee754_expf+0x34>
 800b51e:	2000      	movs	r0, #0
 800b520:	f000 b8d0 	b.w	800b6c4 <__math_oflowf>
 800b524:	2a00      	cmp	r2, #0
 800b526:	da05      	bge.n	800b534 <__ieee754_expf+0x44>
 800b528:	4a48      	ldr	r2, [pc, #288]	; (800b64c <__ieee754_expf+0x15c>)
 800b52a:	4291      	cmp	r1, r2
 800b52c:	d902      	bls.n	800b534 <__ieee754_expf+0x44>
 800b52e:	2000      	movs	r0, #0
 800b530:	f000 b8c2 	b.w	800b6b8 <__math_uflowf>
 800b534:	4a46      	ldr	r2, [pc, #280]	; (800b650 <__ieee754_expf+0x160>)
 800b536:	4291      	cmp	r1, r2
 800b538:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800b53c:	d952      	bls.n	800b5e4 <__ieee754_expf+0xf4>
 800b53e:	4a45      	ldr	r2, [pc, #276]	; (800b654 <__ieee754_expf+0x164>)
 800b540:	4291      	cmp	r1, r2
 800b542:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800b546:	d834      	bhi.n	800b5b2 <__ieee754_expf+0xc2>
 800b548:	4943      	ldr	r1, [pc, #268]	; (800b658 <__ieee754_expf+0x168>)
 800b54a:	4411      	add	r1, r2
 800b54c:	ed91 7a00 	vldr	s14, [r1]
 800b550:	4942      	ldr	r1, [pc, #264]	; (800b65c <__ieee754_expf+0x16c>)
 800b552:	440a      	add	r2, r1
 800b554:	edd2 7a00 	vldr	s15, [r2]
 800b558:	ee30 7a47 	vsub.f32	s14, s0, s14
 800b55c:	f1c3 0201 	rsb	r2, r3, #1
 800b560:	1ad2      	subs	r2, r2, r3
 800b562:	ee37 0a67 	vsub.f32	s0, s14, s15
 800b566:	ee20 6a00 	vmul.f32	s12, s0, s0
 800b56a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800b660 <__ieee754_expf+0x170>
 800b56e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b664 <__ieee754_expf+0x174>
 800b572:	eee6 6a05 	vfma.f32	s13, s12, s10
 800b576:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800b668 <__ieee754_expf+0x178>
 800b57a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800b57e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b66c <__ieee754_expf+0x17c>
 800b582:	eee5 6a06 	vfma.f32	s13, s10, s12
 800b586:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800b670 <__ieee754_expf+0x180>
 800b58a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800b58e:	eef0 6a40 	vmov.f32	s13, s0
 800b592:	eee5 6a46 	vfms.f32	s13, s10, s12
 800b596:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800b59a:	ee20 5a26 	vmul.f32	s10, s0, s13
 800b59e:	bb92      	cbnz	r2, 800b606 <__ieee754_expf+0x116>
 800b5a0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800b5a4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800b5a8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b5ac:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800b5b0:	4770      	bx	lr
 800b5b2:	4b30      	ldr	r3, [pc, #192]	; (800b674 <__ieee754_expf+0x184>)
 800b5b4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800b678 <__ieee754_expf+0x188>
 800b5b8:	eddf 6a30 	vldr	s13, [pc, #192]	; 800b67c <__ieee754_expf+0x18c>
 800b5bc:	4413      	add	r3, r2
 800b5be:	edd3 7a00 	vldr	s15, [r3]
 800b5c2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b5c6:	eeb0 7a40 	vmov.f32	s14, s0
 800b5ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b5ce:	ee17 2a90 	vmov	r2, s15
 800b5d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5d6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800b5da:	eddf 6a29 	vldr	s13, [pc, #164]	; 800b680 <__ieee754_expf+0x190>
 800b5de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b5e2:	e7be      	b.n	800b562 <__ieee754_expf+0x72>
 800b5e4:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800b5e8:	d20b      	bcs.n	800b602 <__ieee754_expf+0x112>
 800b5ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b684 <__ieee754_expf+0x194>
 800b5ee:	ee70 6a26 	vadd.f32	s13, s0, s13
 800b5f2:	eef4 6ae5 	vcmpe.f32	s13, s11
 800b5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5fa:	dd02      	ble.n	800b602 <__ieee754_expf+0x112>
 800b5fc:	ee30 0a25 	vadd.f32	s0, s0, s11
 800b600:	4770      	bx	lr
 800b602:	2200      	movs	r2, #0
 800b604:	e7af      	b.n	800b566 <__ieee754_expf+0x76>
 800b606:	ee76 6a66 	vsub.f32	s13, s12, s13
 800b60a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800b60e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800b612:	bfb8      	it	lt
 800b614:	3264      	addlt	r2, #100	; 0x64
 800b616:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b61a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800b61e:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800b622:	ee17 3a90 	vmov	r3, s15
 800b626:	bfab      	itete	ge
 800b628:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800b62c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800b630:	ee00 3a10 	vmovge	s0, r3
 800b634:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800b688 <__ieee754_expf+0x198>
 800b638:	bfbc      	itt	lt
 800b63a:	ee00 3a10 	vmovlt	s0, r3
 800b63e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800b642:	4770      	bx	lr
 800b644:	00000000 	.word	0x00000000
 800b648:	42b17217 	.word	0x42b17217
 800b64c:	42cff1b5 	.word	0x42cff1b5
 800b650:	3eb17218 	.word	0x3eb17218
 800b654:	3f851591 	.word	0x3f851591
 800b658:	081d4490 	.word	0x081d4490
 800b65c:	081d4498 	.word	0x081d4498
 800b660:	3331bb4c 	.word	0x3331bb4c
 800b664:	b5ddea0e 	.word	0xb5ddea0e
 800b668:	388ab355 	.word	0x388ab355
 800b66c:	bb360b61 	.word	0xbb360b61
 800b670:	3e2aaaab 	.word	0x3e2aaaab
 800b674:	081d4488 	.word	0x081d4488
 800b678:	3fb8aa3b 	.word	0x3fb8aa3b
 800b67c:	3f317180 	.word	0x3f317180
 800b680:	3717f7d1 	.word	0x3717f7d1
 800b684:	7149f2ca 	.word	0x7149f2ca
 800b688:	0d800000 	.word	0x0d800000

0800b68c <with_errnof>:
 800b68c:	b513      	push	{r0, r1, r4, lr}
 800b68e:	4604      	mov	r4, r0
 800b690:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b694:	f7fe feb2 	bl	800a3fc <__errno>
 800b698:	ed9d 0a01 	vldr	s0, [sp, #4]
 800b69c:	6004      	str	r4, [r0, #0]
 800b69e:	b002      	add	sp, #8
 800b6a0:	bd10      	pop	{r4, pc}

0800b6a2 <xflowf>:
 800b6a2:	b130      	cbz	r0, 800b6b2 <xflowf+0x10>
 800b6a4:	eef1 7a40 	vneg.f32	s15, s0
 800b6a8:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b6ac:	2022      	movs	r0, #34	; 0x22
 800b6ae:	f7ff bfed 	b.w	800b68c <with_errnof>
 800b6b2:	eef0 7a40 	vmov.f32	s15, s0
 800b6b6:	e7f7      	b.n	800b6a8 <xflowf+0x6>

0800b6b8 <__math_uflowf>:
 800b6b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b6c0 <__math_uflowf+0x8>
 800b6bc:	f7ff bff1 	b.w	800b6a2 <xflowf>
 800b6c0:	10000000 	.word	0x10000000

0800b6c4 <__math_oflowf>:
 800b6c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b6cc <__math_oflowf+0x8>
 800b6c8:	f7ff bfeb 	b.w	800b6a2 <xflowf>
 800b6cc:	70000000 	.word	0x70000000

0800b6d0 <finitef>:
 800b6d0:	b082      	sub	sp, #8
 800b6d2:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b6d6:	9801      	ldr	r0, [sp, #4]
 800b6d8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b6dc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800b6e0:	bfac      	ite	ge
 800b6e2:	2000      	movge	r0, #0
 800b6e4:	2001      	movlt	r0, #1
 800b6e6:	b002      	add	sp, #8
 800b6e8:	4770      	bx	lr
	...

0800b6ec <_close>:
 800b6ec:	4b02      	ldr	r3, [pc, #8]	; (800b6f8 <_close+0xc>)
 800b6ee:	2258      	movs	r2, #88	; 0x58
 800b6f0:	601a      	str	r2, [r3, #0]
 800b6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f6:	4770      	bx	lr
 800b6f8:	20028724 	.word	0x20028724

0800b6fc <_fstat>:
 800b6fc:	4b02      	ldr	r3, [pc, #8]	; (800b708 <_fstat+0xc>)
 800b6fe:	2258      	movs	r2, #88	; 0x58
 800b700:	601a      	str	r2, [r3, #0]
 800b702:	f04f 30ff 	mov.w	r0, #4294967295
 800b706:	4770      	bx	lr
 800b708:	20028724 	.word	0x20028724

0800b70c <_isatty>:
 800b70c:	4b02      	ldr	r3, [pc, #8]	; (800b718 <_isatty+0xc>)
 800b70e:	2258      	movs	r2, #88	; 0x58
 800b710:	601a      	str	r2, [r3, #0]
 800b712:	2000      	movs	r0, #0
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop
 800b718:	20028724 	.word	0x20028724

0800b71c <_lseek>:
 800b71c:	4b02      	ldr	r3, [pc, #8]	; (800b728 <_lseek+0xc>)
 800b71e:	2258      	movs	r2, #88	; 0x58
 800b720:	601a      	str	r2, [r3, #0]
 800b722:	f04f 30ff 	mov.w	r0, #4294967295
 800b726:	4770      	bx	lr
 800b728:	20028724 	.word	0x20028724

0800b72c <_read>:
 800b72c:	4b02      	ldr	r3, [pc, #8]	; (800b738 <_read+0xc>)
 800b72e:	2258      	movs	r2, #88	; 0x58
 800b730:	601a      	str	r2, [r3, #0]
 800b732:	f04f 30ff 	mov.w	r0, #4294967295
 800b736:	4770      	bx	lr
 800b738:	20028724 	.word	0x20028724

0800b73c <_write>:
 800b73c:	4b02      	ldr	r3, [pc, #8]	; (800b748 <_write+0xc>)
 800b73e:	2258      	movs	r2, #88	; 0x58
 800b740:	601a      	str	r2, [r3, #0]
 800b742:	f04f 30ff 	mov.w	r0, #4294967295
 800b746:	4770      	bx	lr
 800b748:	20028724 	.word	0x20028724

0800b74c <_init>:
 800b74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b74e:	bf00      	nop
 800b750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b752:	bc08      	pop	{r3}
 800b754:	469e      	mov	lr, r3
 800b756:	4770      	bx	lr

0800b758 <_fini>:
 800b758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b75a:	bf00      	nop
 800b75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b75e:	bc08      	pop	{r3}
 800b760:	469e      	mov	lr, r3
 800b762:	4770      	bx	lr
