{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bfdafc1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "# In[2]:\n",
    "\n",
    "\n",
    "import sys, os, array, time\n",
    "import numpy as np\n",
    "import serial, math, secrets\n",
    "from random import *\n",
    "from ast import literal_eval\n",
    "import struct\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "from serial import Serial\n",
    "\n",
    "from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "781c7d9d",
   "metadata": {},
   "outputs": [],
   "source": [
    "class timer:\n",
    "    def __init__(self, name=None):\n",
    "        self.name = name\n",
    "\n",
    "    def tic(self):\n",
    "        self.T_start = time.time()\n",
    "\n",
    "    def toc(self):\n",
    "        self.T_stop = time.time()\n",
    "        print(\"Elapsed time: \" + str(self.T_stop - self.T_start) + \" s\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "89a11721",
   "metadata": {},
   "outputs": [],
   "source": [
    "def perso_model_prediction(model, input_values, summary=False):\n",
    "    # Load an already existing model and test its outputs\n",
    "    to_be_tested_model = tf.keras.models.load_model(model)\n",
    "\n",
    "    if summary == True:\n",
    "        to_be_tested_model.summary()\n",
    "        for layers in to_be_tested_model.layers:\n",
    "            print(layers.kernel)\n",
    "\n",
    "    #add reshape\n",
    "    output_pred = to_be_tested_model.predict(input_values.reshape(-1,64,64,3))\n",
    "    return output_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d6a5fbc3",
   "metadata": {},
   "outputs": [],
   "source": [
    "class MODEL_set:\n",
    "    def __init__(self, used_model):\n",
    "        self.used_model = used_model\n",
    "\n",
    "        self.x_sample = -1\n",
    "        self.y_sample = -1\n",
    "\n",
    "        #we have 4 labels\n",
    "        self.received_output = np.zeros((1,4)) \n",
    "        #self.received_categories = np.zeros((3))\n",
    "\n",
    "    def set_dataset_from_xtest(self, path_xtest, path_ytest):\n",
    "        self.X_test = np.load(path_xtest).astype(dtype=np.float32)\n",
    "        self.Y_test = np.load(path_ytest).astype(dtype=np.float32)\n",
    "\n",
    "    def pick_rand_value_from_xtest(self):\n",
    "        rand_sample = randint(0, self.X_test.shape[0]-1)\n",
    "        self.x_sample = self.X_test[rand_sample]\n",
    "        self.y_sample = self.Y_test[rand_sample]\n",
    "        # return l'indice du grand élement dans y_samp càd 0\n",
    "        tmp = self.y_sample.argmax(axis=0)\n",
    "        print(\"Chosen input's corresponding label is \"+str(tmp)+\" according to y_test\")\n",
    "\n",
    "    def get_prediction(self):\n",
    "        print(self.x_sample.shape)\n",
    "        tmp_proba = perso_model_prediction(self.used_model, self.x_sample)\n",
    "        self.y_proba = tmp_proba\n",
    "        # j'ai changé axis =0 to axis=1\n",
    "        tmp = self.y_proba.argmax(axis=0) \n",
    "        print(\"\\nPYTHON:\")\n",
    "        print(\"Model prediction is \"+str(tmp)+\" with probability \"+str(self.y_proba[tmp]))\n",
    "        \n",
    "    def categorize_received_output(self):\n",
    "        print (\"STM32:\")\n",
    "        print (\"Obtained probabilities: \\n\" + str(self.received_output.round(decimals=4)))\n",
    "        index = self.received_output.argmax(axis=1) # index = 0\n",
    "        print (\"Model prediction is \"+str(index)+\" with probability \"+str(self.received_output[0][index])+\"\\n\")\n",
    "\n",
    "        if (self.y_sample.argmax(axis=0) != index):\n",
    "            print (\"***** Prediction does not match with y_test label\")\n",
    "        else:\n",
    "            print (\"***** Prediction matches with y_test label\")\n",
    "\n",
    "    def match_pred_label(self):\n",
    "        if (self.y_sample.argmax(axis=0) != self.received_output.argmax(axis=1)): # j'ai changé axis=0 to axis=1\n",
    "            return 1\n",
    "        else:\n",
    "            return 0\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4bb107f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def synchronisation_with_target(debug=False):\n",
    "    sync = False\n",
    "    ret = None\n",
    "\n",
    "    while (sync == False):\n",
    "        ser.write(b\"sync\")\n",
    "        ret = ser.read(3)\n",
    "        if (ret == b\"101\"): # \"101\" has been chosen arbitrarily\n",
    "            sync = True\n",
    "            if (debug):\n",
    "                print(\"Synchronised\")\n",
    "        else:\n",
    "            if (debug):\n",
    "                print (\"Wrong ack reponse\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "beb74e1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def send_NN_inputs_to_STM32(MODEL_set, ser):\n",
    "    if not ser.isOpen():\n",
    "        print (\"Error: serial connection to be used isn't opened\")\n",
    "        sys.exit(-1)\n",
    "\n",
    "    # Synchronisation loop\n",
    "    print(\"trying to sync...\\n\")\n",
    "    synchronisation_with_target(True)\n",
    "    print(\"done sync\\n\")\n",
    "    # Send inputs to the Neural Network\n",
    "    input_sent = False\n",
    "    ser.flush()\n",
    "\n",
    "    tmp = MODEL_set.x_sample.reshape(64,64,3)\n",
    "    plt.imshow(tmp)\n",
    "    plt.show()\n",
    "    while(input_sent == False):\n",
    "        \n",
    "    #rgb\n",
    "        for k in range(3):\n",
    "            for i in range(64):\n",
    "                for j in range(64):\n",
    "                    ser.write(tmp[i,j,k])\n",
    "\n",
    "        input_sent = True\n",
    "\n",
    "    # Used for debug (i.e. get the picture sent)\n",
    "    #for i in range(28):\n",
    "    #   for j in range(28):\n",
    "    #       tmp[i][j] = struct.unpack('f', ser.read(4))[0]\n",
    "    #plt.imshow(tmp, cmap='gray')\n",
    "    #plt.show()\n",
    "\n",
    "    # wait for the output values generated by the STM32\n",
    "    out_ack = b\"000\"\n",
    "    while(out_ack != b\"010\"): # \"010\" has been chosen arbitrarily\n",
    "        out_ack = ser.read(3)\n",
    "\n",
    "    for i in range(4):\n",
    "        MODEL_set.received_output[0][i] = struct.unpack('f', ser.read(4))[0]\n",
    "\n",
    "    MODEL_set.categorize_received_output()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a0e77086",
   "metadata": {},
   "outputs": [],
   "source": [
    "def send_NN_inputs_to_STM32(MODEL_set, ser):\n",
    "    if not ser.isOpen():\n",
    "        print (\"Error: serial connection to be used isn't opened\")\n",
    "        sys.exit(-1)\n",
    "\n",
    "    # Synchronisation loop\n",
    "    print(\"trying to sync...\\n\")\n",
    "    synchronisation_with_target(True)\n",
    "    print(\"done sync\\n\")\n",
    "    # Send inputs to the Neural Network\n",
    "    input_sent = False\n",
    "    ser.flush()\n",
    "\n",
    "    tmp = MODEL_set.x_sample.reshape(64,64,3)\n",
    "    plt.imshow(tmp)\n",
    "    plt.show()\n",
    "    while(input_sent == False):\n",
    "        \n",
    "    #rgb\n",
    "        for k in range(3):\n",
    "            for i in range(64):\n",
    "                for j in range(64):\n",
    "                    ser.write(tmp[i,j,k])\n",
    "\n",
    "        input_sent = True\n",
    "\n",
    "    # Used for debug (i.e. get the picture sent)\n",
    "    #for i in range(28):\n",
    "    #   for j in range(28):\n",
    "    #       tmp[i][j] = struct.unpack('f', ser.read(4))[0]\n",
    "    #plt.imshow(tmp, cmap='gray')\n",
    "    #plt.show()\n",
    "\n",
    "    # wait for the output values generated by the STM32\n",
    "    out_ack = b\"000\"\n",
    "    while(out_ack != b\"010\"): # \"010\" has been chosen arbitrarily\n",
    "        out_ack = ser.read(3)\n",
    "\n",
    "    for i in range(4):\n",
    "        MODEL_set.received_output[0][i] = struct.unpack('f', ser.read(4))[0]\n",
    "\n",
    "    MODEL_set.categorize_received_output()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3ee30588",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'tf' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_6328\\3924757295.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'__main__'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m     \u001b[0mtf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mautograph\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mset_verbosity\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      4\u001b[0m     \u001b[0mnb_inference\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m     \u001b[1;32mwith\u001b[0m \u001b[0mserial\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mSerial\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"COM6\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m115200\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mser\u001b[0m\u001b[1;33m:\u001b[0m \u001b[1;31m# COM5 for H743 (nucleo) and COM6 for F411 (Nucleo)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'tf' is not defined"
     ]
    }
   ],
   "source": [
    "if __name__ == '__main__':\n",
    "\n",
    "    tf.autograph.set_verbosity(0)\n",
    "    nb_inference = 1\n",
    "    with serial.Serial(\"COM6\", 115200, timeout=1) as ser: # COM5 for H743 (nucleo) and COM6 for F411 (Nucleo)\n",
    "        chrono = timer(\"Chrono\")\n",
    "    \n",
    "        # Model available for board's results comparaison\n",
    "        used_model = \"model.h5\"\n",
    "    \n",
    "        # X_test and Y_test dataset available for inference\n",
    "        path_xtest = \"x_test.npy\"\n",
    "        path_ytest = \"y_test_onehot.npy\" #we should use one hot vector for y          \n",
    "        i = 0\n",
    "        nb_error = 0\n",
    "        errored_elem = []\n",
    "    \n",
    "        chrono.tic()\n",
    "        while(i < nb_inference):\n",
    "            print (\"\\n\\n----------- Inference \"+str(i)+\" requested: -----------\\n\")\n",
    "    \n",
    "            t1 = MODEL_set(used_model)\n",
    "            t1.set_dataset_from_xtest(path_xtest, path_ytest)\n",
    "            t1.pick_rand_value_from_xtest()\n",
    "            t1.get_prediction()\n",
    "            print (\"\\n done\\n\")\n",
    "    \n",
    "            send_NN_inputs_to_STM32(t1, ser)\n",
    "            print(\"---------\\n\")\n",
    "    \n",
    "            if(t1.match_pred_label() == 1):\n",
    "                nb_error += 1\n",
    "                errored_elem.append(t1)\n",
    "    \n",
    "            i = i + 1\n",
    "    \n",
    "            del t1\n",
    "    \n",
    "        print ('\\n')\n",
    "        chrono.toc()\n",
    "        print (\"\\nAll inferences have been effected\")\n",
    "        print (\"\\nNumber of error reported according to y_test: \"+str(nb_error))\n",
    "        ser.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d2300787",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'MODEL_set' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_6328\\3087798072.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mMODEL_set\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mt1\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_prediction\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'MODEL_set' is not defined"
     ]
    }
   ],
   "source": [
    "MODEL_set.t1.get_prediction()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2504cc82",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0db45106",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
